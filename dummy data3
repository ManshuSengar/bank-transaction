import React, { useEffect } from 'react';
import { Table, TableBody, TableCell, TableHead, TableRow } from "@mui/material";
import { Formik, Form, Field } from 'formik';
import { TextField } from '@mui/material';
import { AdvanceTextBoxField } from '../../../components/framework/AdvanceTextBoxField';
import { AdvanceDatePickerField } from '../../../components/framework/EnhancedComponents';
import { EnhancedDropDown } from '../../../components/framework/EnhancedDropDown';
import { useSaveApplPrestProposalMutation, useGetApplPrestProposalQuery } from "../../../features/monitoring/interestRateFixationApi"

const InterestRateApplicable = () => {
  return (
    <div className="wrap-inner-table mt-0">
      <Table sx={{ minWidth: 650 }} aria-label="external ratings table" className="mt-4">
        <TableHead>
          <TableRow>
            <TableCell colSpan={6}>
              <h6><b>Interest Rate applicable for present proposal</b></h6>
            </TableCell>
          </TableRow>
          <TableRow>
            <TableCell colSpan={6}>
              <b>MCLR</b>
            </TableCell>
          </TableRow>
          <TableRow>
            <TableCell style={{ width: '9%' }}><b>1 Y MCLR (%)</b></TableCell>
            <TableCell><b>Base spread</b></TableCell>
            <TableCell><b>Internal Score</b></TableCell>
            <TableCell><b>Internal Score Linked Spread</b></TableCell>
            <TableCell><b>Total Spread</b></TableCell>
            <TableCell><b>Applicable Rate (%)</b></TableCell>
          </TableRow>
        </TableHead>
        <TableBody>
          <TableRow>
            <TableCell>
              <AdvanceTextBoxField
                label="%" name={'mclr'} />
            </TableCell>
            <TableCell>
              <AdvanceTextBoxField
                label="Base spread" name={'ratingSpread'}
              />
            </TableCell>
            <TableCell>
              <AdvanceTextBoxField
                label="Internal Score"
                name={'intScore'}
              />
            </TableCell>
            <TableCell>
              <AdvanceTextBoxField
                label="Internal Score Linked Spread"
                name={'intScoreLink'}
              />
            </TableCell>
            <TableCell>
              <AdvanceTextBoxField
                label="Total Spread"
                name={'totalSpread'}
              />
            </TableCell>
            <TableCell>
              <AdvanceTextBoxField
                label="Applicable Rate (%)"
                name={'finalRate'}
              />
            </TableCell>
          </TableRow>
        </TableBody>
      </Table>

      <Table sx={{ minWidth: 650 }} aria-label="external ratings table" className="mt-4">
        <TableHead>
          <TableRow>
            <TableCell colSpan={12}>
              <b>Fixed</b>
            </TableCell>
          </TableRow>
          <TableRow>
            <TableCell><b>Rating Grade</b></TableCell>
            <TableCell><b>Daily yield matrix as on </b></TableCell>
            <TableCell><b>Tenure</b></TableCell>
            <TableCell><b>FIMMDA yield for AAA rated NBFCs (Benchmark)</b></TableCell>
            <TableCell><b>FIMMDA Spread</b></TableCell>
            <TableCell><b>SIDBI Spread</b></TableCell>
            <TableCell><b>Total Spread</b></TableCell>
            <TableCell><b>Minimum Interest Rate </b></TableCell>
            <TableCell><b>Minimum interest rate as per TRMV guidance / date </b></TableCell>
            <TableCell><b>Final Rate</b></TableCell>
          </TableRow>
        </TableHead>
        <TableBody>
          <TableRow>
            <TableCell>
              <AdvanceTextBoxField
                label="Rating Grade"
                name='grade'
              />
            </TableCell>
            <TableCell>
              {/* <AdvanceDatePickerField
                label="Daily yield matrix as on"
                name='benchmarkAsOn'
              /> */}
            </TableCell>
            <TableCell>
              <AdvanceTextBoxField
                label="Tenure"
                name='tenure'
              />
            </TableCell>
            <TableCell>
              <AdvanceTextBoxField
                label="FIMMDA yield for AAA rated NBFCs"
                name='benchmarkRate'
              />
            </TableCell>
            <TableCell>
              <AdvanceTextBoxField
                label="FIMMDA Spread"
                name='ratingSpread'
              />
            </TableCell>
            <TableCell>
              <AdvanceTextBoxField
                label="SIDBI Spread"
                name='sidbiSpread'
              />
            </TableCell>
            <TableCell>
              <AdvanceTextBoxField
                label="Total Spread"
                name='totalSpread'
              />
            </TableCell>
            <TableCell>
              <AdvanceTextBoxField
                label="Minimum Interest Rate"
                name='minIntRate'
              />
            </TableCell>
            <TableCell>
              <AdvanceTextBoxField
                label="Minimum interest rate as per TRMV guidance / date"
                name='minIntRateTrmv'
              />
            </TableCell>
            <TableCell>
              <AdvanceTextBoxField
                label="Final Rate"
                name='finalRate'
              />
            </TableCell>
          </TableRow>
        </TableBody>
      </Table>

      {/* ____________T-bill_____________________ */}
      <Table sx={{ minWidth: 650 }} aria-label="external ratings table" className="mt-4">
        <TableHead>
          <TableRow>
            <TableCell colSpan={12}>
              <b>T-bill</b>
            </TableCell>
          </TableRow>
          <TableRow>
            <TableCell><b>Rating Grade</b></TableCell>
            <TableCell><b>Benchmark as on</b></TableCell>
            <TableCell><b>Benchmark</b></TableCell>
            <TableCell><b>Benchmark Rate</b></TableCell>
            <TableCell><b>Rating Spread (%)</b></TableCell>
            <TableCell><b>SIDBI Spread</b></TableCell>
            <TableCell><b>Total Spread</b></TableCell>
            <TableCell><b>Minimum Interest Rate </b></TableCell>
            <TableCell><b>Minimum interest rate as per TRMV guidance / date</b></TableCell>
            <TableCell><b>Final Rate</b></TableCell>
          </TableRow>
        </TableHead>
        <TableBody>
          <TableRow>
            <TableCell>
              <AdvanceTextBoxField
                label="Rating Grade"
                name='grade'
              />
            </TableCell>
            <TableCell>
              <AdvanceTextBoxField
                label="Benchmark as on"
                name='benchmarkAsOn'
              />
            </TableCell>
            <TableCell>
              <EnhancedDropDown
                label="Benchmark"
                name="benchmark"
                domain="mstr/getBenchMark"
              />
            </TableCell>
            <TableCell>
              <AdvanceTextBoxField
                label="Benchmark Rate"
                name='benchmarkRate'
              />
            </TableCell>
            <TableCell>
              <AdvanceTextBoxField
                label="(%)"
                name='ratingSpread'
              />
            </TableCell>
            <TableCell>
              <AdvanceTextBoxField
                label="SIDBI Spread"
                name='sidbiSpread'
              />
            </TableCell>
            <TableCell>
              <AdvanceTextBoxField
                label="Total Spread"
                name='totalSpread'
              />
            </TableCell>
            <TableCell>
              <AdvanceTextBoxField
                label="Minimum Interest Rate"
                name='minIntRate'
              />
            </TableCell>
            <TableCell>
              <AdvanceTextBoxField
                label="Minimum interest rate as per TRMV guidance / date"
                name='minIntRateTrmv'
              />
            </TableCell>
            <TableCell>
              <AdvanceTextBoxField
                label="Final Rate"
                name='finalRate'
              />
            </TableCell>
          </TableRow>
        </TableBody>
      </Table>

      <Table sx={{ minWidth: 650 }} aria-label="external ratings table" className="mt-4">
        <TableHead>
          <TableRow>
            <TableCell colSpan={12}>
              <b>Comments</b>
            </TableCell>
          </TableRow>
        </TableHead>
        <TableBody>
          <TableRow>
            <TableCell>
              <AdvanceTextBoxField
                label="Comments"
                name=''
              />
            </TableCell>
          </TableRow>
        </TableBody>
      </Table>
    </div>
  );
};

export default InterestRateApplicable;

import { createApi } from "@reduxjs/toolkit/query/react";
import { customBaseQuery } from "../../app/commonApi";

export const interestRateFixationApi = createApi({
    reducerPath: 'interestRateFixationApi',
    baseQuery: customBaseQuery,
    tagTypes: [
        'BriefBackground', 
        'InternalRating', 
        'ExternalRating', 
        'ROID', 
        'ROIR', 
        'PresentProposal', 
        'SidbiExposure', 
        'SanctionRating', 
        'ApprovedStructure',
        'ApprovedStructurePresent' 
    ],
    endpoints: (builder) => ({
        getFixationInterestRate: builder.query<any, string>({
            query: (applId) => `interestratefixation/getfixationinterestrate/${applId}`,
            providesTags: ['BriefBackground']
        }),
        saveInternalRating: builder.mutation<any, any[]>({
            query: (data) => ({
                url: `interestratefixation/saveinternalrating`,
                method: 'POST',
                body: data,
            }),
            invalidatesTags: ['InternalRating'],
        }),
        getInternalRatingPresent: builder.query<any, string>({
            query: (applId) => `interestratefixation/getinternalratingpresent/${applId}`,
            providesTags: ['InternalRating']
        }),
        getInternalRatingSanction: builder.query<any, string>({
            query: (applId) => `interestratefixation/getinternalratingsanction/${applId}`,
            providesTags: ['InternalRating']
        }),
        getExternalRatingSanction: builder.query<any, string>({
            query: (applId) => `interestratefixation/getexternalratingsanction/${applId}`,
            providesTags: ['ExternalRating']
        }),
        getExternalRatingPresent: builder.query<any, string>({
            query: (applId) => `interestratefixation/getexternalratingpresent/${applId}`,
            providesTags: ['ExternalRating']
        }),
        saveExternalRating: builder.mutation<any, any[]>({
            query: (data) => ({
                url: `interestratefixation/saveexternalrating`,
                method: 'POST',
                body: data,
            }),
            invalidatesTags: ['ExternalRating'],
        }),
        getResetlist: builder.query<any, string>({
            query: (applId) => `interestratefixation/getresetlist/${applId}`,
            providesTags: ['ROIR']
        }),
        saveReset: builder.mutation<any, any[]>({
            query: (data) => ({
                url: `interestratefixation/savereset`,
                method: 'POST',
                body: data,
            }),
            invalidatesTags: ['ROID'],
        }),
        getDisbursementList: builder.query<any, string>({
            query: (applId) => `interestratefixation/getDisbursementlist/${applId}`,
            providesTags: ['ROID']
        }),
        saveDisbursement: builder.mutation<any, any[]>({
            query: (data) => ({
                url: `interestratefixation/savedisbursement`,
                method: 'POST',
                body: data,
            }),
            invalidatesTags: ['ROID'],
        }),
        getPresentProposal: builder.query<any, string>({
            query: (irfId) => `interestratefixation/getpresentproposal/${irfId}`,
            providesTags: ['PresentProposal']
        }),
        savePresentProposal: builder.mutation<any, any>({
            query: (data) => ({
                url: `interestratefixation/savepresentproposal`,
                method: 'POST',
                body: data,
            }),
            invalidatesTags: ['PresentProposal'],
        }),
        getSidbiExposure: builder.query<any, string>({
            query: (irfId) => `interestratefixation/getsidbiexposure/${irfId}`,
            providesTags: ['SidbiExposure']
        }),
        saveSidbiExposure: builder.mutation<any, any[]>({
            query: (data) => ({
                url: `interestratefixation/savesidbiexposure`,
                method: 'POST',
                body: data,
            }),
            invalidatesTags: ['SidbiExposure'],
        }),
        getSanctionRating: builder.query<any, string>({
            query: (irfId) => `interestratefixation/getsanctionrating/${irfId}`,
            providesTags: ['SanctionRating']
        }),
        saveSanctionRating: builder.mutation<any, any>({
            query: (data) => ({
                url: `interestratefixation/savesanctionrating`,
                method: 'POST',
                body: data,
            }),
            invalidatesTags: ['SanctionRating'],
        }),
        getApprovedStructure: builder.query<any, string>({
            query: (irfId) => `interestratefixation/getapprovedintrate/${irfId}`,
            providesTags: ['ApprovedStructure']
        }),
        saveApprovedStructure: builder.mutation<any, any>({
            query: (data) => ({
                url: `interestratefixation/saveapprovedintrate`,
                method: 'POST',
                body: data,
            }),
            invalidatesTags: ['ApprovedStructure'],
        }),

        getApplPrestProposal: builder.query<any, string>({
            query: (irfId) => `interestratefixation/getapplprestproposal/${irfId}`,
            providesTags: ['ApprovedStructurePresent']
        }),
        saveApplPrestProposal: builder.mutation<any, any>({
            query: (data) => ({
                url: `interestratefixation/saveapplprestproposal`,
                method: 'POST',
                body: data,
            }),
            invalidatesTags: ['ApprovedStructurePresent'],
        }),
    }),
});

export const {
    useGetFixationInterestRateQuery,
    useSaveInternalRatingMutation,
    useGetInternalRatingPresentQuery,
    useGetInternalRatingSanctionQuery,
    useGetExternalRatingSanctionQuery,
    useGetExternalRatingPresentQuery,
    useSaveExternalRatingMutation,
    useGetDisbursementListQuery,
    useGetResetlistQuery,
    useSaveDisbursementMutation,
    useSaveResetMutation,
    useGetPresentProposalQuery,
    useSavePresentProposalMutation,
    useGetSidbiExposureQuery,
    useSaveSidbiExposureMutation,
    useGetSanctionRatingQuery,
    useSaveSanctionRatingMutation,
    useGetApprovedStructureQuery,
    useSaveApprovedStructureMutation,
    useSaveApplPrestProposalMutation,
    useGetApplPrestProposalQuery
} = interestRateFixationApi;


[
  {
    "irfId": "string",
    "mclr": 0,
    "proposalType": "string",
    "intScore": "string",
    "intScoreLink": "string",
    "grade": "string",
    "benchmarkAsOn": "2025-06-17",
    "benchmark": "string",
    "benchmarkRate": 0,
    "tenure": 0,
    "ratingSpread": 0,
    "sidbiSpread": 0,
    "totalSpread": 0,
    "minIntRate": 0,
    "minIrDt": "2025-06-17",
    "minIntRateTrmv": "string",
    "finalRate": 0,
    "saveStatus": "string"
  }
]

import React from 'react';
import Grid from "@mui/material/Grid";
import { KeyValuePair } from "./KeyValuePair";
import { getIn, useFormikContext } from "formik";
import Typography from "@mui/material/Typography";
import { removeRestrictedCharacters } from '../../utlis/input';
import { InputAdornment, Tooltip, IconButton } from '@mui/material';
import HelpOutlineIcon from '@mui/icons-material/HelpOutline';
import RedditTextField from './RedditTextField';


interface AdvanceTextBoxFieldProps {
  id?: number;
  label?: string;
  name: string;
  disabled?: boolean;
  type?: string;
  value?: string;
  readonly?: boolean;
  restrictedCharacters?: string;
  placeholder?: string;
  tooltip?: string;
  required?: boolean;
  maxLength?: number;
  minLength?: number;
  startAdornment?: React.ReactNode;
  endAdornment?: React.ReactNode;
  multiline?: boolean;
  rows?: number;
  maxRows?: number;
  validation?: {
    pattern?: RegExp;
    customValidation?: (value: string) => string | undefined;
  };
  transformValue?: (value: string) => string;
  onCustomChange?: any;
  fullWidth?: boolean;
  className?: string;
  style?: React.CSSProperties;
  InputProps?: any;
  allowNegative?: boolean;
  allowDecimal?: boolean;
  decimalPlaces?: number;
}

export const AdvanceTextBoxField: React.FC<AdvanceTextBoxFieldProps> = ({
  label = "",
  name,
  disabled = false,
  type = 'text',
  readonly = false,
  restrictedCharacters = "<>{}",
  placeholder,
  tooltip,
  required = false,
  maxLength,
  minLength,
  startAdornment,
  endAdornment,
  multiline = false,
  rows,
  maxRows,
  validation,
  transformValue,
  onCustomChange,
  fullWidth = true,
  className,
  style,
  allowNegative = false,
  allowDecimal = true,
  decimalPlaces = 2,
  ...props
}) => {
  const { handleChange, handleBlur, values, touched, errors, setFieldValue } =
    useFormikContext<KeyValuePair>() || {};

  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    let { value } = event.target;

    if (restrictedCharacters) {
      value = removeRestrictedCharacters(value, restrictedCharacters);
    }

    if (transformValue) {
      value = transformValue(value);
    }

    if (type === 'number') {
      let regex = allowNegative ? /^-?\d*\.?\d{0,2}$/ : /^\d*\.?\d{0,2}$/;
      if (!allowDecimal) {
        regex = /^\d*$/;
      }
      if (allowNegative && !allowDecimal) {
        regex = /^-?\d*$/;
      }
      if (!regex.test(value) && value !== '') {
        return;
      }
      if (value !== '' && value !== '-' && allowDecimal && value.includes('.')) {
        const parts = value.split('.');
        if (parts[1] && parts[1].length > decimalPlaces) {
          const rounded = Number(parseFloat(value).toFixed(decimalPlaces));
          value = rounded.toString();
        }
      }
    }

    if (validation?.pattern && !validation.pattern.test(value)) {
      return;
    }
    setFieldValue(name, value);
    if (onCustomChange) {
      onCustomChange(value);
    }
  };
  const labelStyles = {
    '& .MuiInputLabel-shrink': {
      background: '#fff',
      padding: '0 8px',
    },
  };

  const getErrorMessage = () => {
    if (getIn(touched, name) && getIn(errors, name)) {
      return JSON.stringify(getIn(errors, name)).replaceAll('"', "");
    }
    return "";
  };

  return (
    <Grid item xs={12} style={style}>
      <Grid item xs={12}>
        <RedditTextField
          label={label}
          className={`${name} ${className || ''}`}
          onChange={handleInputChange}
          onBlur={handleBlur}
          value={getIn(values, name)}
          name={name}
          size="small"
          disabled={disabled}
          type={type}
          placeholder={placeholder}
          required={required}
          sx={labelStyles}
          inputProps={{
            readOnly: readonly,
            maxLength: maxLength,
            minLength: minLength,
            inputMode: type === 'number' ? 'decimal' : 'text',
            pattern: type === 'number' ? undefined : undefined
          }}
          multiline={multiline}
          rows={rows}
          maxRows={maxRows}
          fullWidth={fullWidth}
          InputProps={{
            startAdornment: startAdornment && (
              <InputAdornment position="start">{startAdornment}</InputAdornment>
            ),
            endAdornment: (
              <InputAdornment position="end">
                {tooltip && (
                  <Tooltip title={tooltip}>
                    <IconButton size="small">
                      <HelpOutlineIcon />
                    </IconButton>
                  </Tooltip>
                )}
                {endAdornment}
              </InputAdornment>
            ),
          }}
          {...props}
        />
      </Grid>
      <Grid item xs={12}>
        <Typography
          color="error"
          variant="subtitle2"
          gutterBottom
          component="span"
          className="mybooking_error"
        >
          {getErrorMessage()}
        </Typography>
      </Grid>
    </Grid>
  );
};

import { KeyValuePair } from "./KeyValuePair";
import { getIn, useFormikContext } from "formik";
import Typography from "@mui/material/Typography";
import Select from "@mui/material/Select";
import { useGetMaterQuery, useLazyGetMasterByIdQuery } from "../../features/master/api";
import { modify } from "../../utlis/helpers";
import InputLabel from '@mui/material/InputLabel';
import MenuItem from '@mui/material/MenuItem';
import FormControl from '@mui/material/FormControl';
import { useEffect, useState } from "react";
import SelectLoader from "../../loader/SelectLoader";

interface EnhancedDropDownProps {
    label?: string;
    name: string;
    domain: string;
    disabled?: boolean;
    dependsOn?: any;
    onChange?: (value: any) => void;
    onValueChange?: (value: any) => void;
    customOptions?: Array<{ key: string, value: string, label: string }>;
    valueKey?: string;
    labelKey?: string;
    query?: string;
}

export const EnhancedDropDown = (props: EnhancedDropDownProps) => {
    const formik = useFormikContext<KeyValuePair>();
    const {
        handleBlur,
        values,
        touched,
        errors,
        setFieldValue,
        setFieldTouched
    } = formik || {};

    const [dependMasterdata, setDependMasterData] = useState<any>();
    const {
        data: masterData,
        isLoading
    } = useGetMaterQuery(props.domain, { 
        skip: Boolean(props.dependsOn),
        refetchOnMountOrArgChange: true 
    });

    const [dependsOnData] = useLazyGetMasterByIdQuery();

    const handleChange = async (event: any) => {
        const value = event.target.value;
        await setFieldValue(props.name, value);
        await setFieldTouched(props.name, true, false);
        
        if (props.onChange) {
            props.onChange(value);
        }
        if (props.onValueChange) {
            props.onValueChange(value);
        }
    };

    const dependentValue: any = getIn(values, props.dependsOn);

    const dependData = async () => {
        let options: any = [];
        if (props.dependsOn) {
            if (getIn(values, props.dependsOn)) {
                try {
                    const dependMasterData = await dependsOnData(
                        `${props.domain}?${props?.query}=${dependentValue}`
                    ).unwrap();
                    options = modify(`${props.domain}`, dependMasterData);
                    return options;
                } catch (error) {
                    return [];
                }
            }
            return options;
        }
        return [];
    };

    const getOptions = () => {
        if (props.customOptions) {
            return props.customOptions;
        }
        return modify(props.domain, masterData);
    };

    useEffect(() => {
        dependData()
            .then((options: any) => {
                setDependMasterData(options);
            })
            .catch(() => {
                setDependMasterData([]);
            });
    }, [props?.dependsOn, dependentValue]);

    if (isLoading) return <SelectLoader />;

    return (
        <>
            <FormControl fullWidth>
                <InputLabel
                    className="select-label"
                    id={`label-id-${props.name}`}
                    error={Boolean(getIn(touched, props.name) && getIn(errors, props.name))}
                >
                    {props.label}
                </InputLabel>
                <Select
                    labelId={`label-id-${props.name}`}
                    id={`id-${props.name}`}
                    value={getIn(values, props.name) || ''}
                    disabled={props.disabled}
                    name={props.name}
                    label={props.label}
                    onChange={handleChange}
                    onBlur={handleBlur}
                    error={Boolean(getIn(touched, props.name) && getIn(errors, props.name))}
                    size="small"
                >
                    {(!props?.dependsOn ? getOptions() : dependMasterdata)?.map((item: any) => (
                        <MenuItem
                            value={item.value}
                            key={item.key}
                        >
                            {item.label}
                        </MenuItem>
                    ))}
                </Select>
            </FormControl>
            <div className="mt-0">
                <Typography
                    color="error"
                    variant="subtitle2"
                    gutterBottom
                    component="span"
                    className="mybooking_error"
                >
                    {getIn(touched, props.name) && getIn(errors, props.name) &&
                        JSON.stringify(getIn(errors, props.name)).replaceAll('"', '')}
                </Typography>
            </div>
        </>
    );
};

import React, { useState } from 'react';
import { Table, TableBody, TableCell, TableHead, TableRow, Button } from "@mui/material";
import { Formik, Form } from 'formik';
import * as Yup from 'yup';
import { useGetApprovedStructureQuery, useSaveApprovedStructureMutation } from '../../../features/monitoring/interestRateFixationApi';
import NbfcSnackbar from '../../../components/shared/NbfcSnackbar';
import AutoSave from '../../../components/framework/AutoSave';
import { TextAreaField } from '../../../components/framework/TextAreaAuto';

const ApprovedInterestRateStructure = ({ irfId }: { irfId: string }) => {
  const { data: approvedStructure, isLoading } = useGetApprovedStructureQuery(irfId, {
    skip: !irfId,
    refetchOnMountOrArgChange: true,
  });

  const [saveApprovedStructure] = useSaveApprovedStructureMutation();

  const [openSnackbar, setOpenSnackbar] = useState(false);
  const [snackMsg, setSnackMsg] = useState("");
  const [severity, setSeverity] = useState<"success" | "error">("success");

  const initialValues = approvedStructure || {
    interestRate: '', 
    approvedStructure: '',
    discretionaryPower: '',
  };

  const validationSchema = Yup.object().shape({
    interestRate: Yup.string().required('Required'),
    approvedStructure: Yup.string().required('Required'),
    discretionaryPower: Yup.string().required('Required'),
  });

  const handleSubmit = async (values: any) => {
    try {
      const dataToSave = {
        irfId,
        interestRate: values.interestRate, 
        approvedStructure: values.approvedStructure,
        discretionaryPower: values.discretionaryPower,
        saveStatus: '01',
      };
      await saveApprovedStructure(dataToSave).unwrap();
      setOpenSnackbar(true);
      setSeverity("success");
      setSnackMsg("Approved Structure saved successfully");
    } catch (error) {
      console.error("Error saving approved structure:", error);
      setOpenSnackbar(true);
      setSeverity("error");
      setSnackMsg("Failed to save Approved Structure");
    }
  };

  const handleSnackClose = () => {
    setOpenSnackbar(false);
  };

  if (isLoading) {
    return <p>Loading...</p>;
  }

  return (
    <div className="wrap-inner-table mt-0">
      <Formik
        initialValues={initialValues}
        validationSchema={validationSchema}
        onSubmit={handleSubmit}
        enableReinitialize={true}
      >
        {({ values }) => (
          <Form>
            <AutoSave debounceMs={2000} values={values} handleSubmit={handleSubmit} />
            <Table sx={{ minWidth: 650 }} aria-label="approved structure table">
              <TableHead>
                <TableRow>
                  <TableCell style={{ width: '6%' }}><b>Sr. No.</b></TableCell>
                  <TableCell style={{ width: '30%' }}><b>Particulars</b></TableCell>
                  <TableCell><b>Remarks</b></TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                <TableRow>
                  <TableCell>a</TableCell>
                  <TableCell>Interest rate / reset structure approval by</TableCell>
                  <TableCell>
                    <div className="alnSet">
                      RiMV vide circular no. 49/ 2024-25 dated January 09, 2025

                    </div>
                    <TextAreaField name="interestRate" label="" maxLength={500} disabled={false} />

                  </TableCell>
                </TableRow>
                <TableRow>
                  <TableCell>b</TableCell>
                  <TableCell>Approved Structure</TableCell>
                  <TableCell>
                  <p>For AAA/ Upper Layer NBFC – FIMMDA daily yield matrix for NBFC + SIDBI spread of 30 bps over and above FIMMDA benchmark and spread.</p>
                  <p><b>Others -</b> Internal score based & MCLR linked</p>
                    <TextAreaField name="approvedStructure" label="" maxLength={1000} disabled={false} />
                  </TableCell>
                </TableRow>
                <TableRow>
                  <TableCell>c</TableCell>
                  <TableCell>Discretionary Power</TableCell>
                  <TableCell>
                  <p>Sub Committee of ALCO – 25 bps and ALCO for discretion beyond 25 bps.</p>
                    <TextAreaField name="discretionaryPower" label="" maxLength={1000} disabled={false} />
                  </TableCell>
                </TableRow>
              </TableBody>
            </Table>
            <Button type="submit" variant="contained" color="primary" className="mt-2">
              Save
            </Button>
          </Form>
        )}
      </Formik>
      <NbfcSnackbar
        open={openSnackbar}
        msg={snackMsg}
        severity={severity}
        handleSnackClose={handleSnackClose}
        submitCall={false}
      />
    </div>
  );
};

export default ApprovedInterestRateStructure;


In this two task are there InterestRateApplicable 
first make dynamic means add formik user can save/update and get data for reference i shared ApprovedInterestRateStructure 
and shared api also and already mapped field to api 
second in InterestRateApplicable add one dropdown proposalType in which fixed,mclr,tbill user will choose then show only that table not all three 



