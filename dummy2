import React, { useState } from 'react';
import {
    Table, TableBody, TableCell, TableHead, TableRow, Button, Grid, TextField, FormControl, InputLabel, Select, MenuItem, SelectChangeEvent
} from "@mui/material";
import CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';
import { Formik, Form } from 'formik';
import * as Yup from 'yup';
import { useGetRecommendationsQuery, useSaveRecommendationsMutation } from '../../../features/monitoring/interestRateFixationApi';
import NbfcSnackbar from '../../../components/shared/NbfcSnackbar';
import { TextBoxField } from '../../../components/framework/TextBoxField';
import { AdvanceDatePickerField } from '../../../components/framework/EnhancedComponents';
import AutoSave from '../../../components/framework/AutoSave';
import { EnhancedDropDown } from '../../../components/framework/EnhancedDropDown';

const Recommendation = ({ irfId }: any) => {
    const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);
    const [snackMsg, setSnackMsg] = useState<string>("");
    const [severity, setSeverity] = useState<"success" | "error">("success");
    const [borrower, setBorrower] = useState('');

    const { data: recommendations, isLoading: isLoadingRecommendations } = useGetRecommendationsQuery(irfId, {
        skip: !irfId,
        refetchOnMountOrArgChange: true,
    });

    const [saveRecommendations] = useSaveRecommendationsMutation();


    const validationSchema = Yup.object().shape({
        recommendation: Yup.object().shape({
            scheme: Yup.string().required("Required"),
            amount: Yup.number().typeError("Must be a number").required("Required").positive("Must be positive"),
            tenure: Yup.number().typeError("Must be a number").required("Required").positive("Must be positive"),
            applicableIntRate: Yup.number().typeError("Must be a number").required("Required").positive("Must be positive"),
            discretion: Yup.number().typeError("Must be a number").required("Required"),
            roiRecommended: Yup.string().required("Required"),
            resetClause: Yup.string().required("Required"),
            nextResetDt: Yup.string().required("Required"),
            // validityDate: Yup.string().required("Required"),
            // dop: Yup.string().required("Required"),
            // dopComments: Yup.string().required("Required"),
            // discretionaryPowers: Yup.string().required("Required"),
        }),
    });

    const handleSubmit = async (values: any) => {
        try {
            const finalValue = [{
                ...values.recommendation,
                irfId,
                slNo: 1,
                saveStatus: '01',
            }];
            await saveRecommendations(finalValue).unwrap();
            setOpenSnackbar(true);
            setSeverity("success");
            setSnackMsg("Recommendation saved successfully");
        } catch (error) {
            console.error("Error saving recommendation:", error);
            setOpenSnackbar(true);
            setSeverity("error");
            setSnackMsg("Failed to save Recommendation");
        }
    };

    const handleSnackClose = () => {
        setOpenSnackbar(false);
    };

    const handleChangeBrw = (event: SelectChangeEvent) => {
        setBorrower(event.target.value);
    };

    return (
        <div className="wrap-inner-table mt-4">
            {isLoadingRecommendations ? (
                <p>Loading...</p>
            ) : (
                <Formik
                    initialValues={{
                        recommendation: (recommendations?.[0]) || {
                            irfId,
                            slNo: 1,
                            scheme: "",
                            amount: "",
                            tenure: "",
                            applicableIntRate: "",
                            discretion: "",
                            roiRecommended: "",
                            resetClause: "",
                            nextResetDt: null,
                            saveStatus: '01',
                        },
                    }}
                    validationSchema={validationSchema}
                    onSubmit={handleSubmit}
                    enableReinitialize={true}
                >
                    {({ values }) => (
                        <Form>
                            <AutoSave debounceMs={5000} values={values} handleSubmit={handleSubmit} />
                            <Table sx={{ minWidth: 650 }} aria-label="recommendation table">
                                <TableHead>
                                    <TableRow>
                                        <TableCell colSpan={8}><b>Interest Rate</b></TableCell>
                                    </TableRow>
                                    <TableRow>
                                        <TableCell><b>Scheme</b></TableCell>
                                        <TableCell><b>Amount (â‚¹crore)</b></TableCell>
                                        <TableCell><b>Tenure</b></TableCell>
                                        <TableCell><b>Applicable Rate</b></TableCell>
                                        <TableCell><b>Discretion (%)</b></TableCell>
                                        <TableCell><b>ROI Recommended</b></TableCell>
                                        <TableCell><b>Reset Clause</b></TableCell>
                                        <TableCell><b>Next Reset Date</b></TableCell>
                                    </TableRow>
                                </TableHead>
                                <TableBody>
                                    <TableRow>
                                        <TableCell>
                                            <TextBoxField
                                                label=""
                                                name="recommendation.scheme"
                                            />
                                        </TableCell>
                                        <TableCell>
                                            <TextBoxField
                                                label=""
                                                name="recommendation.amount"
                                                type="number"
                                            />
                                        </TableCell>
                                        <TableCell>
                                            <TextBoxField
                                                label=""
                                                name="recommendation.tenure"
                                                type="number"
                                            />
                                        </TableCell>
                                        <TableCell>
                                            <TextBoxField
                                                label=""
                                                name="recommendation.applicableIntRate"
                                                type="number"
                                            />
                                        </TableCell>
                                        <TableCell>
                                            <TextBoxField
                                                label=""
                                                name="recommendation.discretion"
                                                type="number"
                                            />
                                        </TableCell>
                                        <TableCell>
                                            <TextBoxField
                                                label=""
                                                name="recommendation.roiRecommended"
                                            />
                                        </TableCell>
                                        <TableCell>
                                            <EnhancedDropDown
                                                label=""
                                                name="recommendation.resetClause"
                                                domain="mstr/getBenchMark"
                                            />
                                        </TableCell>
                                        <TableCell>
                                            <AdvanceDatePickerField
                                                label=""
                                                name="recommendation.nextResetDt"
                                            />
                                        </TableCell>
                                    </TableRow>
                                </TableBody>
                            </Table>
                            <Grid item xs={12} sx={{ mt: 2 }}>
                                <Button
                                    className="sbmtBtn mt-0 mb-3 ms-2 me-2"
                                    type='submit'
                                    variant="contained"
                                >
                                    Save <CheckCircleOutlineIcon />
                                </Button>
                            </Grid>
                        </Form>
                    )}
                </Formik>
            )}
       

            <Grid container spacing={2} padding={4} className='form-grid p-0'>
                <Grid item xs={12}>
                    <h6>Validity of Interest Rate</h6>
                    <Table sx={{ minWidth: 650 }} aria-label="validity table">
                        <TableBody>
                            <TableRow>
                                <TableCell>
                                    {/* <AdvanceDatePickerField
                                        label="Date"
                                        name="recommendation.validityDate"
                                    /> */}
                                </TableCell>
                            </TableRow>
                        </TableBody>
                    </Table>
                </Grid>

                <Grid item xs={12}>
                    <h6>DoP</h6>
                    <Table sx={{ minWidth: 650 }} aria-label="dop table">
                        <TableBody>
                            <TableRow>
                                <TableCell>
                                    <FormControl sx={{ m: 1, minWidth: 120 }} size="small">
                                        <InputLabel id="dop-label">Select</InputLabel>
                                        <Select
                                            labelId="dop-label"
                                            id="dop"
                                            value={borrower}
                                            label="DoP"
                                            onChange={handleChangeBrw}
                                            name="recommendation.dop"
                                        >
                                            <MenuItem value="0">One</MenuItem>
                                            <MenuItem value="1">Two</MenuItem>
                                        </Select>
                                    </FormControl>
                                </TableCell>
                            </TableRow>
                            <TableRow>
                                <TableCell>
                                    <TextBoxField
                                        label="Comments"
                                        name="recommendation.dopComments"
                                    />
                                </TableCell>
                            </TableRow>
                        </TableBody>
                    </Table>
                </Grid>

                <Grid item xs={12}>
                    <h6>Discretionary Powers</h6>
                    <Table sx={{ minWidth: 650 }} aria-label="discretionary powers table">
                        <TableBody>
                            <TableRow>
                                <TableCell>
                                    <TextBoxField
                                        label="Discretionary Powers"
                                        name="recommendation.discretionaryPowers"
                                    />
                                </TableCell>
                            </TableRow>
                        </TableBody>
                    </Table>
                </Grid>
            </Grid>

            <NbfcSnackbar
                open={openSnackbar}
                msg={snackMsg}
                severity={severity}
                handleSnackClose={handleSnackClose}
                submitCall={false}
            />
        </div>
    );
};

export default Recommendation;

curl -X 'POST' \
  'https://dev-nbfc.sidbi.in/refapi/interestratefixation/savememorandumtxt' \
  -H 'accept: */*' \
  -H 'Content-Type: application/json' \
  -d '{
  "irfId": "string",
  "verticalComments": "string",
  "recommendation": "string",
  "irValidity": "2025-06-19",
  "dop": "string",
  "discPowers": "string",
  "saveStatus": "string",
  "preprosalComment": "string",
  "rateReqComment": "string"
}'

import { createApi } from "@reduxjs/toolkit/query/react";
import { customBaseQuery } from "../../app/commonApi";

export const interestRateFixationApi = createApi({
    reducerPath: 'interestRateFixationApi',
    baseQuery: customBaseQuery('refapi'),
    tagTypes: [
        'BriefBackground',
        'InternalRating',
        'ExternalRating',
        'ROID',
        'ROIR',
        'PresentProposal',
        'SidbiExposure',
        'SanctionRating',
        'ApprovedStructure',
        'ApprovedStructurePresent',
        'CompanyRateRequest',
        'interesetComment',
        'Recommendations'
    ],
    endpoints: (builder) => ({
        getFixationInterestRate: builder.query<any, string>({
            query: (applId) => `interestratefixation/getfixationinterestrate/${applId}`,
            providesTags: ['BriefBackground']
        }),
        saveInternalRating: builder.mutation<any, any[]>({
            query: (data) => ({
                url: `interestratefixation/saveinternalrating`,
                method: 'POST',
                body: data,
            }),
            invalidatesTags: ['InternalRating'],
        }),
        getInternalRatingPresent: builder.query<any, string>({
            query: (applId) => `interestratefixation/getinternalratingpresent/${applId}`,
            providesTags: ['InternalRating']
        }),
        getInternalRatingSanction: builder.query<any, string>({
            query: (applId) => `interestratefixation/getinternalratingsanction/${applId}`,
            providesTags: ['InternalRating']
        }),
        getExternalRatingSanction: builder.query<any, string>({
            query: (applId) => `interestratefixation/getexternalratingsanction/${applId}`,
            providesTags: ['ExternalRating']
        }),
        getExternalRatingPresent: builder.query<any, string>({
            query: (applId) => `interestratefixation/getexternalratingpresent/${applId}`,
            providesTags: ['ExternalRating']
        }),
        saveExternalRating: builder.mutation<any, any[]>({
            query: (data) => ({
                url: `interestratefixation/saveexternalrating`,
                method: 'POST',
                body: data,
            }),
            invalidatesTags: ['ExternalRating'],
        }),
        getResetlist: builder.query<any, string>({
            query: (applId) => `interestratefixation/getresetlist/${applId}`,
            providesTags: ['ROIR']
        }),
        saveReset: builder.mutation<any, any[]>({
            query: (data) => ({
                url: `interestratefixation/savereset`,
                method: 'POST',
                body: data,
            }),
            invalidatesTags: ['ROID'],
        }),
        getDisbursementList: builder.query<any, string>({
            query: (applId) => `interestratefixation/getDisbursementlist/${applId}`,
            providesTags: ['ROID']
        }),
        saveDisbursement: builder.mutation<any, any[]>({
            query: (data) => ({
                url: `interestratefixation/savedisbursement`,
                method: 'POST',
                body: data,
            }),
            invalidatesTags: ['ROID'],
        }),
        getPresentProposal: builder.query<any, string>({
            query: (irfId) => `interestratefixation/getpresentproposal/${irfId}`,
            providesTags: ['PresentProposal']
        }),
        savePresentProposal: builder.mutation<any, any>({
            query: (data) => ({
                url: `interestratefixation/savepresentproposal`,
                method: 'POST',
                body: data,
            }),
            invalidatesTags: ['PresentProposal'],
        }),
        getSidbiExposure: builder.query<any, string>({
            query: (irfId) => `interestratefixation/getsidbiexposure/${irfId}`,
            providesTags: ['SidbiExposure']
        }),
        saveSidbiExposure: builder.mutation<any, any[]>({
            query: (data) => ({
                url: `interestratefixation/savesidbiexposure`,
                method: 'POST',
                body: data,
            }),
            invalidatesTags: ['SidbiExposure'],
        }),
        getSanctionRating: builder.query<any, string>({
            query: (irfId) => `interestratefixation/getsanctionrating/${irfId}`,
            providesTags: ['SanctionRating']
        }),
        saveSanctionRating: builder.mutation<any, any>({
            query: (data) => ({
                url: `interestratefixation/savesanctionrating`,
                method: 'POST',
                body: data,
            }),
            invalidatesTags: ['SanctionRating'],
        }),
        getApprovedStructure: builder.query<any, string>({
            query: (irfId) => `interestratefixation/getapprovedintrate/${irfId}`,
            providesTags: ['ApprovedStructure']
        }),
        saveApprovedStructure: builder.mutation<any, any>({
            query: (data) => ({
                url: `interestratefixation/saveapprovedintrate`,
                method: 'POST',
                body: data,
            }),
            invalidatesTags: ['ApprovedStructure'],
        }),
        getapplprestproposal: builder.query<any, string>({
            query: (irfId) => `interestratefixation/getapplprestproposal/${irfId}`,
            providesTags: ['ApprovedStructurePresent']
        }),
        saveApplPrestProposal: builder.mutation<any, any>({
            query: (data) => ({
                url: `interestratefixation/saveapplprestproposal`,
                method: 'POST',
                body: [data],
            }),
            invalidatesTags: ['ApprovedStructurePresent'],
        }),
        getCompanyRateRequest: builder.query<any, string>({
            query: (irfId) => `interestratefixation/getcomprequestrate/${irfId}`,
            providesTags: ['CompanyRateRequest']
        }),
        saveCompanyRateRequest: builder.mutation<any, any>({
            query: (data) => ({
                url: `interestratefixation/savecomprequestrate`,
                method: 'POST',
                body: data,
            }),
            invalidatesTags: ['CompanyRateRequest'],
        }),
        getMemorandumTxt: builder.query<any, string>({
            query: (irfId) => `interestratefixation/getmemorandumtxt/${irfId}`,
            providesTags: ['interesetComment']
        }),
        saveMemorandumTxt: builder.mutation<any, any>({
            query: (data) => ({
                url: `interestratefixation/savememorandumtxt`,
                method: 'POST',
                body: data,
            }),
            invalidatesTags: ['interesetComment'],
        }),
        getRecommendations: builder.query<any, string>({
            query: (irfId) => `interestratefixation/getrecommendations/${irfId}`,
            providesTags: ['Recommendations']
        }),
        saveRecommendations: builder.mutation<any, any[]>({
            query: (data) => ({
                url: `interestratefixation/saverecommendations`,
                method: 'POST',
                body: data,
            }),
            invalidatesTags: ['Recommendations'],
        }),
    }),
});

export const {
    useGetFixationInterestRateQuery,
    useSaveInternalRatingMutation,
    useGetInternalRatingPresentQuery,
    useGetInternalRatingSanctionQuery,
    useGetExternalRatingSanctionQuery,
    useGetExternalRatingPresentQuery,
    useSaveExternalRatingMutation,
    useGetDisbursementListQuery,
    useGetResetlistQuery,
    useSaveDisbursementMutation,
    useSaveResetMutation,
    useGetPresentProposalQuery,
    useSavePresentProposalMutation,
    useGetSidbiExposureQuery,
    useSaveSidbiExposureMutation,
    useGetSanctionRatingQuery,
    useSaveSanctionRatingMutation,
    useGetApprovedStructureQuery,
    useSaveApprovedStructureMutation,
    useSaveApplPrestProposalMutation,
    useGetapplprestproposalQuery,
    useGetCompanyRateRequestQuery,
    useSaveCompanyRateRequestMutation,
    useGetMemorandumTxtQuery,
    useSaveMemorandumTxtMutation,
    useGetRecommendationsQuery,
    useSaveRecommendationsMutation
} = interestRateFixationApi;

import React, { useState } from 'react';
import {
    Table, TableBody, TableCell, TableHead, TableRow, Button, IconButton, Grid, TextField
} from "@mui/material";
import DeleteIcon from '@mui/icons-material/Delete';
import AddCircleIcon from '@mui/icons-material/AddCircle';
import CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';
import { Formik, FieldArray, Form } from 'formik';
import * as Yup from 'yup';
import { useAppSelector } from '../../../app/hooks';
import {
    useGetCompanyRateRequestQuery,
    useSaveCompanyRateRequestMutation,
    useGetMemorandumTxtQuery,
    useSaveMemorandumTxtMutation
} from '../../../features/monitoring/interestRateFixationApi';
import moment from 'moment';
import NbfcSnackbar from '../../../components/shared/NbfcSnackbar';
import { TextBoxField } from '../../../components/framework/TextBoxField';
import { AdvanceDatePickerField } from '../../../components/framework/EnhancedComponents';
import AutoSave from '../../../components/framework/AutoSave';
import { EnhancedDropDown } from '../../../components/framework/EnhancedDropDown';
import { RichTextField } from '../../../components/framework/RichTextField';

const RateRequestCompany = ({ irfId }: any) => {
    const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);
    const [snackMsg, setSnackMsg] = useState<string>("");
    const [severity, setSeverity] = useState<"success" | "error">("success");

    const { data: rateRequests, isLoading: isLoadingRates } = useGetCompanyRateRequestQuery(irfId, {
        skip: !irfId,
        refetchOnMountOrArgChange: true,
    });

    const { data: commentData, isLoading: isCommentLoading } = useGetMemorandumTxtQuery(irfId, {
        skip: !irfId,
        refetchOnMountOrArgChange: true,
    });



    const [saveCompanyRateRequest] = useSaveCompanyRateRequestMutation();

    const [saveCommentMemorandum] = useSaveMemorandumTxtMutation();

    const initialValues = {
        ratings: rateRequests || [],
    };

    const initialValuesComments = { ...commentData };

    const validationSchema = Yup.object().shape({
        ratings: Yup.array().of(
            Yup.object().shape({
                lenderInst: Yup.string().required("Required"),
                facilityType: Yup.string().required("Required"),
                dateOfAvailment: Yup.string().required("Required"),
                sancAmt: Yup.number()
                    .typeError("Must be a number")
                    .required("Required")
                    .positive("Must be positive"),
                interestRate: Yup.number()
                    .typeError("Must be a number")
                    .required("Required")
                    .positive("Must be positive"),
                tenure: Yup.number()
                    .typeError("Must be a number")
                    .required("Required")
                    .positive("Must be positive"),
            })
        ),
    });

    const handleSubmit = async (values: any) => {
        try {
            const finalValue = values.ratings.map((rating: any, index: number) => ({
                ...rating,
                irfId,
                slNo: index + 1,
                saveStatus: '01',
            }));
            await saveCompanyRateRequest(finalValue).unwrap();
            setOpenSnackbar(true);
            setSeverity("success");
            setSnackMsg("Company Rate Request saved successfully");
        } catch (error) {
            console.error("Error saving company rate request:", error);
            setOpenSnackbar(true);
            setSeverity("error");
            setSnackMsg("Failed to save Company Rate Request");
        }
    };

    const handleSubmitComments = async (values: any) => {
        try {
            const finalValue = { ...values, irfId };
            await saveCommentMemorandum(finalValue).unwrap();
            setOpenSnackbar(true);
            setSeverity("success");
            setSnackMsg("Company Rate Request saved successfully");
        } catch (error) {
            console.error("Error saving company rate request:", error);
            setOpenSnackbar(true);
            setSeverity("error");
            setSnackMsg("Failed to save Company Rate Request");
        }
    };


    const handleSnackClose = () => {
        setOpenSnackbar(false);
    };

    return (
        <div className="wrap-inner-table mt-4">
            {isLoadingRates ? (
                <p>Loading...</p>
            ) : (
                <Formik
                    initialValues={initialValues}
                    validationSchema={validationSchema}
                    onSubmit={handleSubmit}
                    enableReinitialize={true}
                >
                    {({ values }) => (
                        <Form>
                            <AutoSave debounceMs={5000} values={values} handleSubmit={handleSubmit} />

                            <FieldArray name="ratings">
                                {({ push, remove }) => (
                                    <>
                                        <Button
                                            type="button"
                                            size='small'
                                            className='text-capitalize mt-1 mb-3 saveBtn'
                                            variant="contained"
                                            color="primary"
                                            style={{ display: 'block' }}
                                            onClick={() => push({
                                                irfId,
                                                lenderInst: "",
                                                facilityType: "",
                                                dateOfAvailment: null,
                                                sancAmt: "",
                                                interestRate: "",
                                                tenure: "",
                                                saveStatus: '01',
                                            })}
                                        >
                                            Add <AddCircleIcon />
                                        </Button>
                                        <Table sx={{ minWidth: 650 }} aria-label="company rate request table">
                                            <TableHead>
                                                <TableRow>
                                                    <TableCell><b>Sr. No.</b></TableCell>
                                                    <TableCell><b>Lender/Instrument</b></TableCell>
                                                    <TableCell><b>Facility Type</b></TableCell>
                                                    <TableCell><b>Date of Availment</b></TableCell>
                                                    <TableCell><b>Sanctioned Amount (crore)</b></TableCell>
                                                    <TableCell><b>Interest Rate</b></TableCell>
                                                    <TableCell><b>Tenure</b></TableCell>
                                                    <TableCell><b>Actions</b></TableCell>
                                                </TableRow>
                                            </TableHead>
                                            <TableBody>
                                                {values.ratings.length > 0 ? (
                                                    values.ratings.map((rating: any, index: number) => (
                                                        <TableRow key={index}>
                                                            <TableCell>{index + 1}</TableCell>
                                                            <TableCell>
                                                                <TextBoxField
                                                                    label=""
                                                                    name={`ratings.${index}.lenderInst`}
                                                                />
                                                            </TableCell>
                                                            <TableCell>
                                                                <EnhancedDropDown
                                                                    label=""
                                                                    domain="mstr/getFacilityTypeMstr"
                                                                    basePath='mon'
                                                                    name={`ratings.${index}.facilityType`}
                                                                />
                                                            </TableCell>
                                                            <TableCell>
                                                                <AdvanceDatePickerField
                                                                    label=""
                                                                    name={`ratings.${index}.dateOfAvailment`}
                                                                    disableFuture={true}
                                                                />
                                                            </TableCell>
                                                            <TableCell>
                                                                <TextBoxField
                                                                    label=""
                                                                    name={`ratings.${index}.sancAmt`}
                                                                    type="number"
                                                                />
                                                            </TableCell>
                                                            <TableCell>
                                                                <TextBoxField
                                                                    label=""
                                                                    name={`ratings.${index}.interestRate`}
                                                                    type="number"
                                                                />
                                                            </TableCell>
                                                            <TableCell>
                                                                <TextBoxField
                                                                    label=""
                                                                    name={`ratings.${index}.tenure`}
                                                                    type="number"
                                                                />
                                                            </TableCell>
                                                            <TableCell>
                                                                <IconButton
                                                                    aria-label="delete"
                                                                    color="error"
                                                                    onClick={() => remove(index)}
                                                                    disabled={values.ratings.length === 1}
                                                                >
                                                                    <DeleteIcon />
                                                                </IconButton>
                                                            </TableCell>
                                                        </TableRow>
                                                    ))
                                                ) : (
                                                    <TableRow>
                                                        <TableCell colSpan={8}>No data available</TableCell>
                                                    </TableRow>
                                                )}
                                            </TableBody>
                                        </Table>
                                        <Grid item xs={12} sx={{ mt: 2 }}>
                                            <Button
                                                className="sbmtBtn mt-0 mb-3 ms-2 me-2"
                                                type='submit'
                                                variant="contained"
                                            >
                                                Save <CheckCircleOutlineIcon />
                                            </Button>
                                        </Grid>


                                    </>
                                )}
                            </FieldArray>
                        </Form>
                    )}
                </Formik>
            )}

            <Formik
                initialValues={initialValuesComments}
                onSubmit={handleSubmitComments}
                enableReinitialize
                validateOnChange={false}
                validateOnBlur={true}
            >
                {({ values }) => (
                    <Form>
                        <Grid
                            spacing={2}
                            padding={4}
                            container
                            className='form-grid p-0'
                        >
                            <Grid item xs={12} sm={12} md={12} lg={12}>
                                <RichTextField
                                    label=""
                                    name="rateReqComment"
                                />
                            </Grid>
                            <Grid item className="pt-0" xs={12} sm={12} md={12} lg={12}>
                                <div className="wrap-richtext">

                                    <RichTextField label="Vertical Comment" name="verticalComments" />
                                </div>
                            </Grid>
                            <Grid item xs={12} sx={{ mt: 2 }}>
                                <Button
                                    className="sbmtBtn mt-0 mb-3 ms-2 me-2"
                                    type='submit'
                                    variant="contained"
                                >
                                    Save <CheckCircleOutlineIcon />
                                </Button>
                            </Grid>
                        </Grid>
                    </Form>
                )}
            </Formik>

            <NbfcSnackbar
                open={openSnackbar}
                msg={snackMsg}
                severity={severity}
                handleSnackClose={handleSnackClose}
                submitCall={false}
            />
        </div>
    );
};

export default RateRequestCompany;


Validity of Interest Rate
Discretionary Powers
DoP
save all this section take reference from RateRequestCompany in that how i save comment like that save in Recommendation give me complete and proper code
