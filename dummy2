
curl -X 'POST' \
  'http://localhost:8080/refapi/interestratefixation/savesidbiexposure' \
  -H 'accept: */*' \
  -H 'Content-Type: application/json' \
  -d '[
  {
    "irfId": "string",
    "ratedExposure": 0,
    "ratingAgency": "string",
    "dateOfRating": "2025-06-13",
    "ratingRefId": 0,
    "saveStatus": "string"
  }
]'

curl -X 'GET' \
  'http://localhost:8080/refapi/interestratefixation/getsidbiexposure/12' \
  -H 'accept: */*'

curl -X 'POST' \
  'http://localhost:8080/refapi/interestratefixation/savesanctionrating' \
  -H 'accept: */*' \
  -H 'Content-Type: application/json' \
  -d '{
  "irfId": "string",
  "ratingFy": "string",
  "intScore": "string",
  "comments": "string",
  "ratingType":"string"
}'

curl -X 'GET' \
  'http://localhost:8080/refapi/interestratefixation/getsanctionrating/12' \
  -H 'accept: */*'

import { createApi } from "@reduxjs/toolkit/query/react";
import { customBaseQuery } from "../../app/commonApi";

export const interestRateFixationApi = createApi({
    reducerPath: 'interestRateFixationApi',
    baseQuery: customBaseQuery,
    tagTypes: ['BriefBackground', 'InternalRating', 'ExternalRating', 'ROID', 'ROIR','PresentProposal'],
    endpoints: (builder) => ({
        getFixationInterestRate: builder.query<any, string>({
            query: (applId) => `interestratefixation/getfixationinterestrate/${applId}`,
            providesTags: ['BriefBackground']
        }),
        saveInternalRating: builder.mutation<any, any[]>({
            query: (data) => ({
                url: `interestratefixation/saveinternalrating`,
                method: 'POST',
                body: data,
            }),
            invalidatesTags: ['InternalRating'],
        }),
        getInternalRatingPresent: builder.query<any, string>({
            query: (applId) => `interestratefixation/getinternalratingpresent/${applId}`,
            providesTags: ['InternalRating']
        }),
        getInternalRatingSanction: builder.query<any, string>({
            query: (applId) => `interestratefixation/getinternalratingsanction/${applId}`,
            providesTags: ['InternalRating']
        }),
        getExternalRatingSanction: builder.query<any, string>({
            query: (applId) => `interestratefixation/getexternalratingsanction/${applId}`,
            providesTags: ['ExternalRating']
        }),
        getExternalRatingPresent: builder.query<any, string>({
            query: (applId) => `interestratefixation/getexternalratingpresent/${applId}`,
            providesTags: ['ExternalRating']
        }),
        saveExternalRating: builder.mutation<any, any[]>({
            query: (data) => ({
                url: `interestratefixation/saveexternalrating`,
                method: 'POST',
                body: data,
            }),
            invalidatesTags: ['ExternalRating'],
        }),

        getResetlist: builder.query<any, string>({
            query: (applId) => `interestratefixation/getresetlist/${applId}`,
            providesTags: ['ROIR']
        }),
        saveReset: builder.mutation<any, any[]>({
            query: (data) => ({
                url: `interestratefixation/savereset`,
                method: 'POST',
                body: data,
            }),
            invalidatesTags: ['ROID'],
        }),
        getDisbursementList: builder.query<any, string>({
            query: (applId) => `interestratefixation/getDisbursementlist/${applId}`,
            providesTags: ['ROID']
        }),
        saveDisbursement: builder.mutation<any, any[]>({
            query: (data) => ({
                url: `interestratefixation/savedisbursement`,
                method: 'POST',
                body: data,
            }),
            invalidatesTags: ['ROID'],
        }),
        getPresentProposal: builder.query<any, string>({
            query: (applId) => `interestratefixation/getpresentproposal/${applId}`,
            providesTags: ['PresentProposal']
        }),
        savePresentProposal: builder.mutation<any, any>({
            query: (data) => ({
                url: `interestratefixation/savepresentproposal`,
                method: 'POST',
                body: data,
            }),
            invalidatesTags: ['PresentProposal'],
        }),
    }),
});

export const {
    useGetFixationInterestRateQuery,
    useSaveInternalRatingMutation,
    useGetInternalRatingPresentQuery,
    useGetInternalRatingSanctionQuery,
    useGetExternalRatingSanctionQuery,
    useGetExternalRatingPresentQuery,
    useSaveExternalRatingMutation,
    useGetDisbursementListQuery,
    useGetResetlistQuery,
    useSaveDisbursementMutation,
    useSaveResetMutation,
    useGetPresentProposalQuery,
    useSavePresentProposalMutation,
} = interestRateFixationApi;


import React, { useState } from 'react';
import { Table, TableBody, TableCell, TableHead, TableRow, FormControl, InputLabel, Select, MenuItem, TextField, Button } from "@mui/material";
import AddCircleIcon from '@mui/icons-material/AddCircle';
import { useGetExternalRatingPresentQuery } from '../../../features/monitoring/interestRateFixationApi';

const ExternalRatingProposal = ({ applId }: { applId: string }) => {
  const { data: presentExternalRatings, isLoading } = useGetExternalRatingPresentQuery(applId, {
    skip: !applId,
    refetchOnMountOrArgChange: true,
  });

  const [downgrade, setDowngrade] = useState('');

  const handleDowngradeChange:any = (event: React.ChangeEvent<{ value: unknown }>) => {
    setDowngrade(event.target.value as string);
  };

  if (isLoading) {
    return <p>Loading...</p>;
  }

  return (
    <div className="wrap-inner-table mt-0">
      <Table sx={{ minWidth: 650 }} aria-label="external ratings proposal table">
        <TableBody>
          <TableRow>
            <TableCell style={{ width: '31.7%' }}>Any downgrade in External Rating</TableCell>
            <TableCell>
              <FormControl sx={{ m: 1, minWidth: 120 }} size="small">
                <InputLabel id="downgrade-label">Select</InputLabel>
                <Select
                  labelId="downgrade-label"
                  id="downgrade-select"
                  value={downgrade}
                  label="Downgrade"
                  onChange={handleDowngradeChange}
                >
                  <MenuItem value="Yes">Yes</MenuItem>
                  <MenuItem value="No">No</MenuItem>
                </Select>
              </FormControl>
              {downgrade === 'Yes' && (
                <Table className="rtnTbl">
                  <TableRow>
                    <TableCell>Point - 1</TableCell>
                  </TableRow>
                  <TableRow>
                    <TableCell>Point - 2</TableCell>
                  </TableRow>
                </Table>
              )}
            </TableCell>
          </TableRow>
          <TableRow>
            <TableCell style={{ width: '31.7%' }}>1. Rating where SIDBI exposure is covered</TableCell>
            <TableCell>
              <Table className="rtnTbl">
                <TableHead>
                  <TableRow>
                    <TableCell><b>Rated Exposure (` crore)</b></TableCell>
                    <TableCell><b>Rating Agency</b></TableCell>
                    <TableCell><b>Date of Rating</b></TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  <TableRow>
                    <TableCell>
                      <TextField label="Rated Exposure" size="small" />
                    </TableCell>
                    <TableCell>
                      <FormControl sx={{ m: 1, minWidth: 120 }} size="small">
                        <InputLabel id="rating-agency-label">Select</InputLabel>
                        <Select labelId="rating-agency-label" id="rating-agency-select" value={''} label="Rating Agency">
                          <MenuItem value="Agency1">Agency1</MenuItem>
                          <MenuItem value="Agency2">Agency2</MenuItem>
                        </Select>
                      </FormControl>
                    </TableCell>
                    <TableCell>
                      <TextField label="Date of Rating" size="small" />
                    </TableCell>
                  </TableRow>
                </TableBody>
              </Table>
            </TableCell>
          </TableRow>
          <TableRow>
            <TableCell style={{ width: '31.7%' }}>2. Present External Rating (from latest review)</TableCell>
            <TableCell>
              {presentExternalRatings?.length > 0 ? (
                <Table className="rtnTbl">
                  <TableHead>
                    <TableRow>
                      <TableCell><b>Rated Exposure (` crore)</b></TableCell>
                      <TableCell><b>Rating Agency</b></TableCell>
                      <TableCell><b>Date of Rating</b></TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {presentExternalRatings.map((rating: any, index: number) => (
                      <TableRow key={index}>
                        <TableCell>{rating.ratedExposure}</TableCell>
                        <TableCell>{rating.ratingAgency}</TableCell>
                        <TableCell>{rating.dateOfRating}</TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              ) : (
                <p>No present external ratings available</p>
              )}
            </TableCell>
          </TableRow>
        </TableBody>
      </Table>
    </div>
  );
};

export default ExternalRatingProposal;

import React from 'react';
import { useFormikContext, getIn, FormikValues } from 'formik';
import Radio from '@mui/material/Radio';
import RadioGroup from '@mui/material/RadioGroup';
import FormControlLabel from '@mui/material/FormControlLabel';
import FormControl from '@mui/material/FormControl';
import Typography from '@mui/material/Typography';
import Grid from '@mui/material/Grid';
import { FormLabel } from '@mui/material';
 
interface RadioButtonOption {
  label: string;
  value: string;
}
 
interface RadioButtonFieldProps {
  label: string;
  name: string;
  options: RadioButtonOption[];
}
 
const RadioButtonField: React.FC<RadioButtonFieldProps> = ({ label, name, options }) => {
  const { values, touched, errors, setFieldValue } = useFormikContext<FormikValues>() || {};
 
  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setFieldValue(name, event.target.value);
  };
 
  return (
    <Grid container spacing={2}>
      {/* <Grid item xs={12}>
        <Typography variant="caption" display="block" gutterBottom sx={{ color: '#A9A9A9', fontWeight: '500', marginBottom: '0px' }}>
          {label}
        </Typography>
      </Grid> */}
      <Grid item xs={12}>
        <FormControl component="fieldset" error={getIn(touched, name) && Boolean(getIn(errors, name))}>
        <FormLabel id={label}>{label}</FormLabel>
          <RadioGroup
            row
            aria-label={label}
            name={name}
            value={getIn(values, name) || ''}
            onChange={handleChange}
          >
            {options.map((option) => (
              <FormControlLabel
                key={option.value}
                value={option.value}
                control={<Radio size="small" />}
                label={option.label}
              />
            ))}
          </RadioGroup>
        </FormControl>
      </Grid>
      {/* <Grid item xs={12}> */}
        <Typography color="error" variant="subtitle2" gutterBottom component="span" className="mybooking_error">
          {getIn(touched, name) && getIn(errors, name) && JSON.stringify(getIn(errors, name)).replaceAll('"', '')}
        </Typography>
      {/* </Grid> */}
    </Grid>
  );
};
 
export default RadioButtonField;

import React from 'react';
import {
  Table, TableBody, TableCell, TableHead, TableRow, Button, IconButton, Grid
} from "@mui/material";
import DeleteIcon from '@mui/icons-material/Delete';
import AddCircleIcon from '@mui/icons-material/AddCircle';
import { Formik, FieldArray, Form } from 'formik';
import * as Yup from 'yup';
import { useAppSelector } from '../../../app/hooks';
import {
  useGetExternalRatingSanctionQuery,
  useGetExternalRatingPresentQuery,
  useSaveExternalRatingMutation
} from '../../../features/monitoring/interestRateFixationApi';
import CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';
import { TextBoxField } from '../../../components/framework/TextBoxField';
import { EnhancedDropDown } from '../../../components/framework/EnhancedDropDown';
import { AdvanceDatePickerField } from '../../../components/framework/EnhancedComponents';
import moment from 'moment';
import NbfcSnackbar from '../../../components/shared/NbfcSnackbar';
import { useState } from 'react';
import AutoSave from '../../../components/framework/AutoSave';

const RfExternalRating = ({ irfId }: any) => {

  const { data: sanctionRatings, isLoading: isLoadingSanction } = useGetExternalRatingSanctionQuery(irfId, {
    skip: !irfId,
    refetchOnMountOrArgChange: true,
  });

  const { data: presentRatings, isLoading: isLoadingPresent } = useGetExternalRatingPresentQuery(irfId, {
    skip: !irfId,
    refetchOnMountOrArgChange: true,
  });

  const [saveExternalRating] = useSaveExternalRatingMutation();

  const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);
  const [snackMsg, setSnackMsg] = useState<string>("");
  const [severity, setSeverity] = useState<"success" | "error">("success");

  const initialValues = {
    ratings: presentRatings || [],
  };

  const validationSchema = Yup.object().shape({
    ratings: Yup.array().of(
      Yup.object().shape({
        agencyName: Yup.string().required("Required"),
        instrument: Yup.string().required("Required"),
        amtCr: Yup.number().typeError("Must be a number").required("Required"),
        ratingDesc: Yup.string().required("Required"),
        outLook: Yup.string().required("Required"),
        ratingDt: Yup.string().required("Required"),
      })
    ),
  });

  const handleSubmit = async (values: any) => {
    try {
      const finalValue = values.ratings.map((rating: any, index: number) => ({
        ...rating,
        irfId,
        id: index + 1,
        saveStatus: '01',
      }));
      await saveExternalRating(finalValue).unwrap();
      setOpenSnackbar(true);
      setSeverity("success");
      setSnackMsg("Latest External Rating saved successfully");
    } catch (error) {
      console.error("Error saving latest external rating:", error);
      setOpenSnackbar(true);
      setSeverity("error");
      setSnackMsg("Failed to save Latest External Rating");
    }
  };

  const handleSnackClose = () => {
    setOpenSnackbar(false);
  };

  return (
    <div className="wrap-inner-table mt-0">
      <Table sx={{ minWidth: 650 }} aria-label="external ratings table">
        <TableHead>
          <TableRow>
            <TableCell style={{ width: '6%' }}><b>Sr. No.</b></TableCell>
            <TableCell style={{ width: '20%' }}><b>Particulars</b></TableCell>
            <TableCell><b>Remarks</b></TableCell>
          </TableRow>
        </TableHead>
        <TableBody>
          <TableRow>
            <TableCell>1</TableCell>
            <TableCell>External rating at the time of sanction</TableCell>
            <TableCell>
              {isLoadingSanction ? (
                <p>Loading...</p>
              ) : (
                <Table sx={{ minWidth: 650 }} aria-label="sanction external ratings table">
                  <TableHead>
                    <TableRow>
                      <TableCell><b>Name of Rating Agency</b></TableCell>
                      <TableCell><b>Instrument</b></TableCell>
                      <TableCell><b>Amount (in ₹ crore)</b></TableCell>
                      <TableCell><b>Rating</b></TableCell>
                      <TableCell><b>Outlook</b></TableCell>
                      <TableCell><b>Date of Rating</b></TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {sanctionRatings?.length > 0 ? (
                      sanctionRatings.map((rating: any, index: number) => (
                        <TableRow key={index}>
                          <TableCell>{rating.agencyName}</TableCell>
                          <TableCell>{rating.instrument}</TableCell>
                          <TableCell>{rating.amtCr}</TableCell>
                          <TableCell>{rating.ratingDesc}</TableCell>
                          <TableCell>{rating.outLook}</TableCell>
                          <TableCell>{moment(rating.ratingDt).format("DD-MM-YYYY")}</TableCell>
                        </TableRow>
                      ))
                    ) : (
                      <TableRow>
                        <TableCell colSpan={6}>No data available</TableCell>
                      </TableRow>
                    )}
                  </TableBody>
                </Table>
              )}
            </TableCell>
          </TableRow>

          <TableRow>
            <TableCell>2</TableCell>
            <TableCell>Latest External Rating</TableCell>
            <TableCell>
              {isLoadingPresent ? (
                <p>Loading...</p>
              ) : (
                <Formik
                  initialValues={initialValues}
                  validationSchema={validationSchema}
                  onSubmit={handleSubmit}
                  enableReinitialize={true}
                >
                  {({ values, setFieldValue }) => (
                    <Form>
                      <AutoSave debounceMs={2000} values={values} handleSubmit={handleSubmit} />
                      <FieldArray name="ratings">
                        {({ push, remove }) => (
                          <>
                            <Button type="button" size='small' className='text-capitalize mt-1 mb-3  saveBtn'
                              variant="contained" color="primary" style={{ display: 'block' }}
                              onClick={() => push({
                                irfId,
                                agencyName: "",
                                instrument: "",
                                amtCr: "",
                                ratingDesc: "",
                                outLook: "",
                                ratingDt: null,
                              })}
                            >
                              Add <AddCircleIcon />
                            </Button>
                            <Table sx={{ minWidth: 650 }} aria-label="latest external ratings table">
                              <TableHead>
                                <TableRow>
                                  <TableCell><b>Name of Rating Agency</b></TableCell>
                                  <TableCell><b>Instrument</b></TableCell>
                                  <TableCell><b>Amount (in ₹ crore)</b></TableCell>
                                  <TableCell><b>Rating</b></TableCell>
                                  <TableCell><b>Outlook</b></TableCell>
                                  <TableCell><b>Date of Rating</b></TableCell>
                                  <TableCell><b>Actions</b></TableCell>
                                </TableRow>
                              </TableHead>
                              <TableBody>
                                {values.ratings.length > 0 ? (
                                  values.ratings.map((rating: any, index: number) => (
                                    <TableRow key={index}>
                                      <TableCell>
                                        <EnhancedDropDown
                                          label=""
                                          name={`ratings.${index}.agencyName`}
                                          domain="mstr/getRatingAgency"
                                        />
                                      </TableCell>
                                      <TableCell>
                                        <TextBoxField
                                          label=""
                                          name={`ratings.${index}.instrument`}
                                        />
                                      </TableCell>
                                      <TableCell>
                                        <TextBoxField
                                          label=""
                                          name={`ratings.${index}.amtCr`}
                                          type="number"
                                        />
                                      </TableCell>
                                      <TableCell>
                                        <EnhancedDropDown
                                          label=""
                                          name={`ratings.${index}.ratingDesc`}
                                          domain="mstr/getRatingCode"
                                        />
                                      </TableCell>
                                      <TableCell>
                                        <TextBoxField
                                          label=""
                                          name={`ratings.${index}.outLook`}
                                        />
                                      </TableCell>
                                      <TableCell>
                                        <AdvanceDatePickerField
                                          label=""
                                          name={`ratings.${index}.ratingDt`}
                                          disableFuture={true}
                                        />
                                      </TableCell>
                                      <TableCell>
                                        <IconButton
                                          aria-label="delete"
                                          color="error"
                                          onClick={() => remove(index)}
                                          disabled={values.ratings.length === 1}
                                        >
                                          <DeleteIcon />
                                        </IconButton>
                                      </TableCell>
                                    </TableRow>
                                  ))
                                ) : (
                                  <TableRow>
                                    <TableCell colSpan={7}>No data available</TableCell>
                                  </TableRow>
                                )}
                              </TableBody>
                            </Table>
                            <Grid item xs={12} sx={{ mt: 2 }}>
                              <Button
                                className="sbmtBtn mt-0 mb-3 ms-2 me-2"
                                type='submit'
                                variant="contained"> Save <CheckCircleOutlineIcon />
                              </Button>
                            </Grid>
                          </>
                        )}
                      </FieldArray>
                    </Form>
                  )}
                </Formik>
              )}
            </TableCell>
          </TableRow>
        </TableBody>
      </Table>

      <NbfcSnackbar
        open={openSnackbar}
        msg={snackMsg}
        severity={severity}
        handleSnackClose={handleSnackClose}
        submitCall={false}
      />
    </div>
  );
};

export default RfExternalRating;


so there is two task 1. to make externalRatingPropsal dynamic and second one is to add new api in intersetRateFixation 
in externalRatingPropsal now there is dropdown and remove point1 and point 2 no use 
show radio button if yes then show . 1.Rating where SIDBI exposure is covered and 2. Present External Rating (from latest review)  both will dyanmic as i gave api also and shared one component for  reference make t
like that so for point 1 .getsanctionrating this api will use for pont 2. savesidbiexposure as point 2 multiple user can save and delete and add 
give me complete and proper code 
