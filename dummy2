export const masterApi = createApi({
  reducerPath: path,
  baseQuery: customBaseQuery(),
  tagTypes: ['Master'],
  endpoints: (builder) => ({
    getMater: builder.query<any, string>({
      query: (searchReqeust) => `/${searchReqeust}`,
      providesTags: (result, error, arg) => [{ type: 'Master', id: arg }],
      // Cache for 5 minutes
      keepUnusedDataFor: 300,
    }),
  }),
});


// Add bank master data fetch at the top level
const { 
  data: bankMasterData, 
  isLoading: isBankMasterLoading
} = useGetMaterQuery(`refapi/mstr/getBankMasters`, {
  refetchOnMountOrArgChange: true
});

// Transform bank options
const bankOptions = React.useMemo(() => {
  if (!bankMasterData) return [];
  return modify("mstr/getBankMasters", bankMasterData)?.map((item: any) => ({
    key: item.key,
    value: item.key,
    label: item.value
  })) || [];
}, [bankMasterData]);

// Pass options to MultipleDropDownField
<MultipleDropDownField
  label=""
  name={`data.${index}.lenderName`}
  domain="mstr/getBankMasters"
  disabled={tlData.saveStatus === '02'}
  options={bankOptions}
  isLoading={isBankMasterLoading}
/>






import { FieldArray, Form, Formik } from "formik";
import { useEffect, useState } from "react";
import { Alert, Button, Grid, IconButton, Snackbar, Table, TableBody, TableCell, TableHead, TableRow } from "@mui/material";
import { Delete } from '@mui/icons-material';
import AddCircleIcon from '@mui/icons-material/AddCircle';
import CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';

import { connect } from 'react-redux'
import { useDeleteLenderTermLoanByIdMutation, useGetLenderTermLoanFormDataQuery, useSaveLenderTermLoanFormDataMutation } from "../../../features/application-form/capitalResourceForm";
import AutoSave from "../../../components/framework/AutoSave";
import { TextBoxField } from "../../../components/framework/TextBoxField";
import FormLoader from "../../../loader/FormLoader";
import { EnhancedDropDown } from "../../../components/framework/EnhancedDropDown";
import { AdvanceDatePickerField } from "../../../components/framework/EnhancedComponents";
import ConfirmationAlertDialog from "../../../models/application-form/ConfirmationAlertDialog";
import { OnlineSnackbar } from "../../../components/shared/OnlineSnackbar";
import { MultipleDropDownField } from "../../pnf/components/MultiplePnfDropDown";
import * as Yup from 'yup';
import SaveAsIcon from '@mui/icons-material/SaveAs';
import { AdvanceTextBoxField } from "../../../components/framework/AdvanceTextBoxField";
import FullScreenLoaderNoClose from "../../../components/common/FullScreenLoaderNoClose";
import { useGetMaterQuery } from "../../../features/master/api";

const Lender CoverTermLoanForm = ({ applId, excelData }: any) => {
    const [addLimitTlDetails] = useSaveLenderTermLoanFormDataMutation();
    const [deleteLimitTlDetails] = useDeleteLenderTermLoanByIdMutation();
    const { data: LimitTlData, isLoading } = useGetLenderTermLoanFormDataQuery(applId);
    const [open, setOpen] = useState(false);
    const [index, setIndex] = useState(0);

    const [initialValues, setInitialValues] = useState<any>({ data: [] });
    const [openConfirmation, setOpenConfirmation] = useState(false);
    const [formData, setFormData] = useState<any>("");
    const [actionVal, setActionVal] = useState<any>("");
    const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);
    const [snackMsg, setSnackMsg] = useState<any>("");
    const [severity, setSeverity] = useState<string | any>("success");
    const [isUploading, setIsUploading] = useState<boolean>(false);
    const [snackMsgList, setSnackMsgList] = useState<any>("");

    const [snackOpen, setSnackOpen] = useState(false);
    const [snackSeverity, setSnackSeverity] = useState<'error' | 'success' | 'info'>('error');
    const [snackMessages, setSnackMessages] = useState<any>([]);
    const [snackSeverityList, setSnackSeverityList] = useState<string | any>("success");

    // Fetch dropdown data once and cache it
    const { data: bankMastersData } = useGetMaterQuery('refapi/mstr/getBankMasters');
    const { data: lenderTypeData } = useGetMaterQuery('refapi/mstr/getLenderType');

    const formatDate = (str: string) => {
        if (!str) return "";
        if ((typeof str) == "string") return str;
        let date = new Date(str),
            mnth = ("0" + (date.getMonth() + 1)).slice(-2),
            day = ("0" + date.getDate()).slice(-2);
        return [day, mnth, date.getFullYear()].join("-");
    }

    useEffect(() => {
        if (LimitTlData) {
            const dataWithApplId = LimitTlData.map((item: any) => ({
                ...item,
                applId
            }))
            setInitialValues({ data: dataWithApplId })
        }
    }, [LimitTlData, applId]);

    useEffect(() => {
        if (excelData && excelData.length > 0) {
            const lenderRows = excelData.filter((row: any) => {
                return row[2] && row[2] !== 'Total'
            });
            const newData: any = [];
            lenderRows.forEach((excelRow: any) => {
                const rowData = {
                    lenderName: excelRow[2]?.toString().trim(),
                    lenderType: excelRow[3]?.toString().trim(),
                    sancDt: formatDate(excelRow[4]),
                    sancAmt: parseExcelValue(excelRow[5]),
                    disbDt: formatDate(excelRow[6]),
                    disbAmt: parseExcelValue(excelRow[7]),
                    undrawnSanc: parseExcelValue(excelRow[8]),
                    outstandingAmt: parseExcelValue(excelRow[9]),
                    totalExposure: calculateTotalExposure(parseExcelValue(excelRow[8]), parseExcelValue(excelRow[9])),
                    intRate: parseExcelValue(excelRow[11]),
                    tenure: parseExcelValue(excelRow[12]),
                    contactDetails: excelRow[13]?.toString().trim(),
                    acr: parseExcelValue(excelRow[14]),
                    security: excelRow[15]?.toString().trim(),
                    corpGuarantee: excelRow[16]?.toString().trim(),
                    persGuarantee: excelRow[17]?.toString().trim(),
                    collSecurity: excelRow[18]?.toString().trim(),
                    majorCovenants: excelRow[19]?.toString().trim(),
                    slNo: null,
                    saveStatus: '01',
                };
                newData.push(rowData);
            });
            setInitialValues({ data: newData });
            setOpenSnackbar(true);
            setSeverity("success");
            setSnackMsg("Lender data imported successfully");
        }
    }, [excelData]);

    const parseExcelValue = (value: any): number => {
        if (value === undefined || value === null || value === '') return 0;
        if (typeof value === 'string') return parseFloat(value.replace(/,/g, '')) || 0;
        return parseFloat(value) || 0;
    };

    const extractErrorMessages = (errorResponse: Record<string, string>) => {
        const allMessages = Object.values(errorResponse)
            .flatMap(msg => msg.split(',').map(m => m.trim()));
        return allMessages;
    };

    const handleSubmitApis = async (values: any) => {
        try {
            let requestBody = values.data;
            if (!requestBody) {
                requestBody = values;
            }
            setIsUploading(true);
            if (await addLimitTlDetails(requestBody).unwrap()) {
                if (requestBody?.[0]?.saveStatus === '02' || requestBody?.[0]?.saveStatus === '01') {
                    setOpenSnackbar(true);
                    setIsUploading(false);
                    setSeverity("success");
                    if (requestBody?.[0]?.saveStatus === '02') {
                        setSnackMsg("Section submitted successfully");
                    } else if (requestBody?.[0]?.saveStatus === '01') {
                        setSnackMsg("Record saved successfully");
                    }
                }
                setActionVal(null);
                return true;
            }
            return false;
        } catch (err: any) {
            setIsUploading(false);
            if (err.status == 400 && err.message === "Invalid") {
                setIsUploading(false);
                console.log('api error', err.customCode);
                const errorMessages = extractErrorMessages(err.customCode);
                setSnackMsgList(errorMessages.length > 0 ? errorMessages : "Validation failed.");
                setSnackMessages(errorMessages.length > 0 ? errorMessages : "Validation failed.");
                setSnackSeverityList('error');
                setSnackOpen(true);
            }
            else {
                console.error(err);
                setIsUploading(false);
            }
            return false;
        }
    };

    const handleClosePop = () => {
        setOpenSnackbar(false);
    };

    const handleDelete = async (applId: any, index: number) => {
        handleClose();
        try {
            if (await deleteLimitTlDetails({ applId, index }).unwrap()) {
                setOpenSnackbar(true);
                setSeverity("success");
                setSnackMsg("Record Deleted successfully");
            }
        } catch (error) {
            console.error("Error saving compliance position:", error);
            setOpenSnackbar(true);
            setSeverity("error");
            setSnackMsg("Failed to delete");
        }
    };

    const handleClickOpen = (index: number) => {
        setIndex(index);
        setOpen(true);
    };

    const calculateSanTotal = (values: any) => {
        return values.data.reduce((total: number, data1: any) => {
            return total + (parseFloat(data1.sancAmt) || 0);
        }, 0);
    };

    const calculateDisbTotal = (values: any) => {
        return values.data.reduce((total: number, data1: any) => {
            return total + (parseFloat(data1.disbAmt) || 0);
        }, 0);
    };

    const calculateUndrawnSanctionTotal = (values: any) => {
        return values.data.reduce((total: number, data1: any) => {
            return total + (parseFloat(data1.undrawnSanc) || 0);
        }, 0);
    };

    const calculateOutStTotal = (values: any) => {
        return values.data.reduce((total: number, data1: any) => {
            return total + (parseFloat(data1.outstandingAmt) || 0);
        }, 0);
    };

    const calculateExpoTotal = (values: any) => {
        return values.data.reduce((total: number, data1: any) => {
            return total + (parseFloat(data1.totalExposure) || 0);
        }, 0);
    };

    const termLoanListingSchema = Yup.object().shape({
        data: Yup.array().of(
            Yup.object().shape({
                lenderName: Yup.string()
                    .min(3, 'Lender Name must be at least 3 characters')
                    .max(100, 'Lender Name cannot exceed 100 characters')
                    .required('Required'),
                lenderType: Yup.string()
                    .max(100, 'Lender Type cannot exceed 100 characters')
                    .required('Required'),
                acr: Yup.string().required('Required')
                    .matches(/^[0-9.]+$/, 'ACR must be a number')
                    .test('positive', 'ACR must be between 0-2', val => val ? Number(val) > 0 && Number(val) <= 2 : false),
                sancAmt: Yup.number().required('Required'),
                disbAmt: Yup.number()
                    .required('Required')
                    .test(
                        'is-not-greater-than-value1',
                        'Disburement Amt. cannot be greater than Sanction Amt.',
                        function (value) {
                            const { sancAmt } = this.parent;
                            return value <= sancAmt;
                        }
                    ),
            })
        ),
    });

    const handleClose = () => {
        setOpen(false);
    };
    const handleCloseConfirmation = () => {
        setActionVal(null);
        setOpenConfirmation(false);
    };
    const handleSubmitConfirmation = (values: any) => {
        setOpenConfirmation(false);
        handleSubmitApis(values);
    };
    const handleSubmit = async (values: any) => {
        let finalValue = values?.data?.map((listData: any, index: number) => ({
            ...listData, applId, slNo: index + 1, saveStatus: actionVal
        }));
        if (actionVal === '02') {
            setFormData(finalValue);
            setOpenConfirmation(true);
        } else {
            handleSubmitApis(finalValue);
        }
        setActionVal(null);
    };

    const handleClickSetAction = (action: any) => {
        setActionVal(action);
    };

    const calculateTotalExposure = (outstandingAmt: number, undrawnSanc: number) => {
        const outstanding = parseFloat(outstandingAmt?.toString() || '0') || 0;
        const undrawn = parseFloat(undrawnSanc?.toString() || '0') || 0;
        return outstanding + undrawn;
    };

    const handleFieldChange = (index: number, field: string, value: any, setFieldValue: any, values: any) => {
        setFieldValue(`data.${index}.${field}`, value);
        if (field === 'outstandingAmt' || field === 'undrawnSanc') {
            const currentRow = values.data[index];
            const outstandingAmt = field === 'outstandingAmt' ? value : currentRow.outstandingAmt;
            const undrawnSanc = field === 'undrawnSanc' ? value : currentRow.undrawnSanc;

            const newTotalExposure = calculateTotalExposure(outstandingAmt, undrawnSanc);
            setFieldValue(`data.${index}.totalExposure`, newTotalExposure);
        }
    };

    const handleSnackbarCloseSnack = () => {
        setSnackOpen(false);
    };
    if (isLoading) return <FormLoader />
    if (isUploading) return <FullScreenLoaderNoClose />;

    return (
        <div className="wrap-appraisal-area">
            <Snackbar
                open={snackOpen}
                autoHideDuration={6000}
                onClose={handleSnackbarCloseSnack}
                anchorOrigin={{ vertical: 'top', horizontal: 'right' }}
            >
                <Alert onClose={handleSnackbarCloseSnack} severity={snackSeverityList} sx={{ width: '100%' }}>
                    <ul className="list-unstyled">
                        {snackMessages && snackMessages.length > 0 ? snackMessages.map((msg: any, i: number) => {
                            return (
                                <li key={i} className="text-danger">{`(${i + 1})`} {msg} </li>
                            )
                        }) : ''}
                    </ul>
                </Alert>
            </Snackbar>

            <ConfirmationAlertDialog
                id={applId}
                type={4}
                open={openConfirmation}
                handleClose={handleCloseConfirmation}
                handleDelete={handleSubmitConfirmation}
                values={formData}
            />
            <div className="custome-form">
                <ConfirmationAlertDialog
                    id={applId}
                    index={index}
                    type={2}
                    open={open}
                    handleClose={handleClose}
                    handleDelete={handleDelete}
                />
                <div className="wrap-inner-table" style={{ overflow: 'auto' }}>
                    <Formik
                        initialValues={initialValues}
                        onSubmit={handleSubmit}
                        enableReinitialize={true}
                        validationSchema={termLoanListingSchema}
                        validateOnChange={true}
                        validateOnBlur={true}
                    >
                        {({ values, setFieldValue }) => (
                            <Form>
                                <fieldset disabled={values?.data?.[0]?.saveStatus === "02"}>
                                    {values?.data?.[0]?.saveStatus !== "02" &&
                                        <AutoSave handleSubmit={handleSubmit} values={values} debounceMs={10000} />
                                    }
                                    <FieldArray name="data">
                                        {({ push, remove }) => (
                                            <>
                                                {
                                                    values?.data?.[0]?.saveStatus !== "02" &&
                                                    <Button type="submit" size='small' className='psn_btn text-capitalize my-2 saveBtn'
                                                        variant="contained" color="primary" style={{ marginLeft: '15px', display: 'block' }}
                                                        onClick={() =>
                                                            push({
                                                                applId: applId,
                                                                slNo: values.length,
                                                                lenderName: '',
                                                                lenderType: null,
                                                                sancDt: null,
                                                                sancAmt: null,
                                                                disbDt: null,
                                                                disbAmt: null,
                                                                undrawnSanc: null,
                                                                outstandingAmt: null,
                                                                totalExposure: null,
                                                                intRate: null,
                                                                tenure: null,
                                                                contactDetails: null,
                                                                acr: null,
                                                                security: '',
                                                                corpGuarantee: '',
                                                                persGuarantee: '',
                                                                collSecurity: '',
                                                                majorCovenants: '',
                                                                saveStatus: ''
                                                            })
                                                        }>
                                                        Add <AddCircleIcon />
                                                    </Button>
                                                }
                                                <Table sx={{ minWidth: 650 }} aria-label="simple table">
                                                    <TableHead>
                                                        <TableRow>
                                                            <TableCell style={{ minWidth: '40px' }} align='center'>
                                                                <b> Action </b>
                                                            </TableCell>
                                                            <TableCell style={{ minWidth: '50px' }}><b>Sr. No.</b></TableCell>
                                                            <TableCell style={{ minWidth: '250px' }}><b>Name of the Bank/ lender</b></TableCell>
                                                            <TableCell style={{ minWidth: '150px' }}><b>Institution Type</b></TableCell>
                                                            <TableCell style={{ minWidth: '170px' }}><b>Date of Sanction</b></TableCell>
                                                            <TableCell style={{ minWidth: '170px' }}><b>Sanctioned Amount (In ₹ crore)</b></TableCell>
                                                            <TableCell style={{ minWidth: '170px' }}><b>Date of Disbursement</b></TableCell>
                                                            <TableCell style={{ minWidth: '170px' }}><b>Amount Disbursement (In ₹ crore)</b></TableCell>
                                                            <TableCell style={{ minWidth: '170px' }}><b>Undrawn Sanction</b></TableCell>
                                                            <TableCell style={{ minWidth: '170px' }}><b>Amount Outstanding (In ₹ crore)</b></TableCell>
                                                            <TableCell style={{ minWidth: '170px' }}><b>Total Exposure</b></TableCell>
                                                            <TableCell style={{ minWidth: '170px' }}><b>Interest rate (%)</b></TableCell>
                                                            <TableCell style={{ minWidth: '170px' }}><b>Tenure(in months)</b></TableCell>
                                                            <TableCell style={{ minWidth: '170px' }}><b>Contact Details of Lenders</b></TableCell>
                                                            <TableCell style={{ minWidth: '170px' }}><b>ACR</b></TableCell>
                                                            <TableCell style={{ minWidth: '170px' }}><b>Security</b></TableCell>
                                                            <TableCell style={{ minWidth: '350px' }}><b>Any Corporate Guarantee given for others</b></TableCell>
                                                            <TableCell style={{ minWidth: '350px' }}><b>Any personal guarantee of promoters / founders / directors given to others</b></TableCell>
                                                            <TableCell style={{ minWidth: '350px' }}><b>Any collateral security provided to any lender</b></TableCell>
                                                            <TableCell style={{ minWidth: '350px' }}><b>Major Covenants</b></TableCell>
                                                        </TableRow>
                                                    </TableHead>
                                                    <TableBody>
                                                        {
                                                            values?.data?.map((tlData: any, index: number) => (
                                                                <TableRow key={index + 1}>
                                                                    <TableCell>
                                                                        <IconButton disabled={tlData.saveStatus === '02'} onClick={() => tlData?.slNo ? handleClickOpen(tlData?.slNo) : remove(index)}
                                                                            color="error">
                                                                            <Delete />
                                                                        </IconButton>
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <p>{index + 1}</p>
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <MultipleDropDownField
                                                                            label=""
                                                                            name={`data.${index}.lenderName`}
                                                                            domain="mstr/getBankMasters"
                                                                            disabled={tlData.saveStatus === '02'}
                                                                        />
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <Grid item xs={12}>
                                                                            <EnhancedDropDown
                                                                                label=""
                                                                                name={`data.${index}.lenderType`}
                                                                                domain="mstr/getLenderType"
                                                                                disabled={tlData.saveStatus === '02'}
                                                                            />
                                                                        </Grid>
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <AdvanceDatePickerField
                                                                            label=""
                                                                            name={`data.${index}.sancDt`}
                                                                            disableFuture={true}
                                                                        />
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <TextBoxField
                                                                            label=""
                                                                            name={`data.${index}.sancAmt`}
                                                                            type={"number"} />
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <AdvanceDatePickerField
                                                                            label=""
                                                                            name={`data.${index}.disbDt`}
                                                                            disableFuture={true}
                                                                        />
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <TextBoxField
                                                                            label=""
                                                                            name={`data.${index}.disbAmt`}
                                                                            type={"number"} />
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <AdvanceTextBoxField
                                                                            name={`data.${index}.undrawnSanc`}
                                                                            type="number"
                                                                            onCustomChange={(value: any) => handleFieldChange(index, 'undrawnSanc', value, setFieldValue, values)}
                                                                        />
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <AdvanceTextBoxField
                                                                            name={`data.${index}.outstandingAmt`}
                                                                            type="number"
                                                                            onCustomChange={(value: any) => handleFieldChange(index, 'outstandingAmt', value, setFieldValue, values)}
                                                                        />
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <AdvanceTextBoxField
                                                                            label=""
                                                                            name={`data.${index}.totalExposure`}
                                                                            type={"number"}
                                                                            disabled={true}
                                                                        />
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <TextBoxField
                                                                            label=""
                                                                            name={`data.${index}.intRate`}
                                                                            type={"number"} />
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <TextBoxField
                                                                            label=""
                                                                            name={`data.${index}.tenure`}
                                                                            type={"number"} />
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <TextBoxField
                                                                            label=""
                                                                            name={`data.${index}.contactDetails`}
                                                                        />
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <TextBoxField
                                                                            label=""
                                                                            name={`data.${index}.acr`}
                                                                            type={"number"} />
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <TextBoxField
                                                                            label=""
                                                                            name={`data.${index}.security`}
                                                                        />
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <TextBoxField
                                                                            label=""
                                                                            name={`data.${index}.corpGuarantee`}
                                                                        />
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <TextBoxField
                                                                            label=""
                                                                            name={`data.${index}.persGuarantee`}
                                                                        />
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <TextBoxField
                                                                            label=""
                                                                            name={`data.${index}.collSecurity`}
                                                                        />
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <TextBoxField
                                                                            label=""
                                                                            name={`data.${index}.majorCovenants`}
                                                                        />
                                                                    </TableCell>
                                                                </TableRow>
                                                            ))
                                                        }
                                                        <TableRow>
                                                            <TableCell></TableCell>
                                                            <TableCell></TableCell>
                                                            <TableCell colSpan={2}></TableCell>
                                                            <TableCell><b>Total</b></TableCell>
                                                            <TableCell>
                                                                <b>
                                                                    {calculateSanTotal(values).toLocaleString('en-IN', {
                                                                        maximumFractionDigits: 2,
                                                                        style: 'currency',
                                                                        currency: 'INR'
                                                                    })}
                                                                </b>
                                                            </TableCell>
                                                            <TableCell></TableCell>
                                                            <TableCell>
                                                                <b>
                                                                    {calculateDisbTotal(values).toLocaleString('en-IN', {
                                                                        maximumFractionDigits: 2,
                                                                        style: 'currency',
                                                                        currency: 'INR'
                                                                    })}
                                                                </b>
                                                            </TableCell>
                                                            <TableCell>
                                                                <b>
                                                                    {calculateUndrawnSanctionTotal(values).toLocaleString('en-IN', {
                                                                        maximumFractionDigits: 2,
                                                                        style: 'currency',
                                                                        currency: 'INR'
                                                                    })}
                                                                </b>
                                                            </TableCell>
                                                            <TableCell>
                                                                <b>
                                                                    {calculateOutStTotal(values).toLocaleString('en-IN', {
                                                                        maximumFractionDigits: 2,
                                                                        style: 'currency',
                                                                        currency: 'INR'
                                                                    })}
                                                                </b>
                                                            </TableCell>
                                                            <TableCell>
                                                                <b>
                                                                    {calculateExpoTotal(values).toLocaleString('en-IN', {
                                                                        maximumFractionDigits: 2,
                                                                        style: 'currency',
                                                                        currency: 'INR'
                                                                    })}
                                                                </b>
                                                            </TableCell>
                                                            <TableCell colSpan={9}></TableCell>
                                                        </TableRow>
                                                    </TableBody>
                                                </Table>
                                            </>
                                        )}
                                    </FieldArray>
                                </fieldset>
                                {values?.data?.[0]?.saveStatus !== "02" &&
                                    <Button className="sbmtBtn psn_btn mt-3 mb-3 ms-3" type='submit'
                                        onClick={() => handleClickSetAction('01')}
                                        variant="contained"> Save <CheckCircleOutlineIcon />
                                    </Button>
                                }
                                {values?.data?.[0]?.saveStatus !== "02" &&
                                    <Button className="sbmtBtn sbmtBtn_scn psn_btn mt-3 mb-3 ms-3" type='submit'
                                        onClick={() => handleClickSetAction('02')}
                                        variant="contained"> Submit <SaveAsIcon />
                                    </Button>
                                }
                            </Form>
                        )}
                    </Formik>
                </div>
                <OnlineSnackbar open={openSnackbar} msg={snackMsg} severity={severity}
                    handleSnackClose={handleClosePop} />
            </div>
        </div>
    )
}

export default connect((state: any) => {
    return {
        applId: state.userStore.applId
    };
})(LenderTermLoanForm)

import React, { useMemo } from "react";
import { KeyValuePair } from "../../../components/framework/KeyValuePair";
import { getIn, useFormikContext } from "formik";
import Typography from "@mui/material/Typography";
import { Autocomplete, TextField, Grid } from "@mui/material";
import { useSelector } from "react-redux";
import { masterApi } from "../../../features/master/api";
import { modify } from "../../../utlis/helpers";
import { useGetMirQuery } from "../../../features/mir/api";

export const MultipleDropDownField = (props: {
  label?: string;
  name: string;
  domain: string;
  disabled?: boolean
}) => {
  const {
    handleBlur,
    values,
    touched,
    errors,
    setFieldValue
  } = useFormikContext<KeyValuePair>() || {};

  // Use selector to retrieve cached data instead of fetching
  const selectData = masterApi.endpoints.getMater.select(`refapi/${props.domain}`);
  const { data: masterData, isLoading: isMasterLoading, error: masterError } = useSelector(selectData);

  const {
    data: infoData,
    isLoading: infoLoading,
    error: infoError
  } = useGetMirQuery(getIn(values, props.name), {
    skip: !getIn(values, props.name)
  });

  const options = React.useMemo(() => {
    const transformedOptions = modify(props.domain, masterData)?.map((item: any) => ({
      key: item.key,
      value: props.domain !== "mir/getMirPnfList" ? item.value : item.key,
      label: item.label || item.value
    })) || [];

    return transformedOptions;
  }, [masterData, props.domain]);

  React.useEffect(() => {
    if (infoData) {
      setFieldValue("custDetails", infoData?.customerDetails);
      setFieldValue("customerName", infoData?.nbfcName);
      setFieldValue("authBehalf", infoData?.nbfcName);
      setFieldValue("businessNature", infoData?.businessNature);
      setFieldValue("loanPurpose", infoData?.loanPurpose);
      setFieldValue("pan", infoData?.panNo);
      setFieldValue("nbfcId", infoData?.nbfcId);
      setFieldValue("cifCd", infoData?.cifCd);
    }
  }, [infoData, setFieldValue]);

  const currentValue = useMemo(() => {
    return options.find(
      (option: any) => option.value == getIn(values, props.name)
    ) || null;
  }, [options, values, props.name]);

  return (
    <Grid item xs={12}>
      <Autocomplete
        sx={{
          "& .MuiOutlinedInput-root": {
            paddingRight: "20px!important",
            paddingLeft: "0px!important",
          },
        }}
        fullWidth
        options={options}
        value={currentValue}
        disabled={props?.disabled}
        loading={isMasterLoading}
        onChange={(_, newValue) => {
          setFieldValue(props.name, newValue ? newValue.value : null);
        }}
        onBlur={handleBlur}
        getOptionLabel={(option) => option.label}
        renderInput={(params) => (
          <TextField
            {...params}
            name={props.name}
            label={props.label}
            variant="outlined"
          />
        )}
        isOptionEqualToValue={(option, value) => option.value === value.value}
        filterOptions={(options, { inputValue }) =>
          options.filter(option =>
            option.label.toLowerCase().includes(inputValue.toLowerCase())
          )
        }
      />
      <Grid item xs={12}>
        <Typography
          color="error"
          variant="subtitle2"
          gutterBottom
          component="span"
          className="mybooking_error"
        >
          {getIn(errors, props.name) &&
            JSON.stringify(getIn(errors, props.name)).replaceAll('"', "")
          }
        </Typography>
      </Grid>
    </Grid>
  );
};

import React, { useMemo } from "react";
import { KeyValuePair } from "../../../components/framework/KeyValuePair";
import { getIn, useFormikContext } from "formik";
import { Autocomplete, TextField, Grid } from "@mui/material";
import { useSelector } from "react-redux";
import { masterApi } from "../../../features/master/api";
import { modify } from "../../../utlis/helpers";

export const EnhancedDropDown = (props: {
  label?: string;
  name: string;
  domain: string;
  disabled?: boolean
}) => {
  const {
    handleBlur,
    values,
    touched,
    errors,
    setFieldValue
  } = useFormikContext<KeyValuePair>() || {};

  // Use selector to retrieve cached data instead of fetching
  const selectData = masterApi.endpoints.getMater.select(`refapi/${props.domain}`);
  const { data: masterData, isLoading: isMasterLoading, error: masterError } = useSelector(selectData);

  const options = React.useMemo(() => {
    const transformedOptions = modify(props.domain, masterData)?.map((item: any) => ({
      key: item.key,
      value: item.value,
      label: item.label || item.value
    })) || [];

    return transformedOptions;
  }, [masterData, props.domain]);

  const currentValue = useMemo(() => {
    return options.find(
      (option: any) => option.value == getIn(values, props.name)
    ) || null;
  }, [options, values, props.name]);

  return (
    <Grid item xs={12}>
      <Autocomplete
        sx={{
          "& .MuiOutlinedInput-root": {
            paddingRight: "20px!important",
            paddingLeft: "0px!important",
          },
        }}
        fullWidth
        options={options}
        value={currentValue}
        disabled={props?.disabled}
        loading={isMasterLoading}
        onChange={(_, newValue) => {
          setFieldValue(props.name, newValue ? newValue.value : null);
        }}
        onBlur={handleBlur}
        getOptionLabel={(option) => option.label}
        renderInput={(params) => (
          <TextField
            {...params}
            name={props.name}
            label={props.label}
            variant="outlined"
          />
        )}
        isOptionEqualToValue={(option, value) => option.value === value.value}
        filterOptions={(options, { inputValue }) =>
          options.filter(option =>
            option.label.toLowerCase().includes(inputValue.toLowerCase())
          )
        }
      />
      <Grid item xs={12}>
        {getIn(errors, props.name) && (
          <Typography
            color="error"
            variant="subtitle2"
            gutterBottom
            component="span"
          >
            {JSON.stringify(getIn(errors, props.name)).replaceAll('"', "")}
          </Typography>
        )}
      </Grid>
    </Grid>
  );
};













import React, { useMemo } from "react";
import { KeyValuePair } from "../../../components/framework/KeyValuePair";
import { getIn, useFormikContext } from "formik";
import Typography from "@mui/material/Typography";
import { Autocomplete, TextField, Grid } from "@mui/material";
import { useGetMaterQuery } from "../../../features/master/api";
import { modify } from "../../../utlis/helpers";
import { useGetMirQuery } from "../../../features/mir/api";

export const MultipleDropDownField = (props: {
  label?: string;
  name: string;
  domain: string;
  disabled?: boolean
}) => {
  const {
    handleBlur,
    values,
    touched,
    errors,
    setFieldValue
  } = useFormikContext<KeyValuePair>() || {};

  const {
    data: masterData,
    isLoading: isMasterLoading,
    error: masterError,
  } = useGetMaterQuery(`refapi/${props.domain}`, {
    refetchOnMountOrArgChange: true
  });

  const {
    data: infoData,
    isLoading: infoLoading,
    error: infoError
  } = useGetMirQuery(getIn(values, props.name), {
    skip: !getIn(values, props.name)
  });

  const options = React.useMemo(() => {
    const transformedOptions = modify(props.domain, masterData)?.map((item: any) => ({
      key: item.key,
      value: props.domain !== "mir/getMirPnfList" ? item.value : item.key,
      label: item.label || item.value
    })) || [];

    return transformedOptions;
  }, [masterData, props.domain]);

  React.useEffect(() => {
    if (infoData) {
      setFieldValue("custDetails", infoData?.customerDetails);
      setFieldValue("customerName", infoData?.nbfcName);
      setFieldValue("authBehalf", infoData?.nbfcName);
      setFieldValue("businessNature", infoData?.businessNature);
      setFieldValue("loanPurpose", infoData?.loanPurpose);
      setFieldValue("pan", infoData?.panNo);
      setFieldValue("nbfcId", infoData?.nbfcId);
      setFieldValue("cifCd", infoData?.cifCd);
    }
  }, [infoData, setFieldValue]);

  const currentValue = useMemo(() => {
    return options.find(
      (option: any) => option.value == getIn(values, props.name)
    ) || null;
  }, [options, values, props.name]);

  return (
    <Grid item xs={12}>
      <Autocomplete
      sx={{
        "& .MuiOutlinedInput-root": {
          paddingRight: "20px!important",
          paddingLeft: "0px!important",
        },
      }}
        fullWidth
        options={options}
        value={currentValue}
        disabled={props?.disabled}
        loading={isMasterLoading}
        onChange={(_, newValue) => {
          setFieldValue(props.name, newValue ? newValue.value : null);
        }}
        onBlur={handleBlur}
        getOptionLabel={(option) => option.label}
        renderInput={(params) => (
          <TextField
            {...params}
            name={props.name}
            label={props.label}
            variant="outlined"
          // error={!!getIn(errors, props.name)}
          // helperText={
          //   getIn(touched, props.name) &&
          //   getIn(errors, props.name) &&
          //   JSON.stringify(getIn(errors, props.name)).replaceAll('"', "")
          // }
          />
        )}
        isOptionEqualToValue={(option, value) => option.value === value.value}
        filterOptions={(options, { inputValue }) =>
          options.filter(option =>
            option.label.toLowerCase().includes(inputValue.toLowerCase())
          )
        }
      />
      <Grid item xs={12}>
        <Typography
          color="error"
          variant="subtitle2"
          gutterBottom
          component="span"
          className="mybooking_error"
        >
          {getIn(errors, props.name) &&
            JSON.stringify(getIn(errors, props.name)).replaceAll('"', "")
          }
        </Typography>
      </Grid>
    </Grid>
  );
};

import { FieldArray, Form, Formik } from "formik";
import { useEffect, useState } from "react";
import { Alert, Button, Grid, IconButton, Snackbar, Table, TableBody, TableCell, TableHead, TableRow } from "@mui/material";
import { Delete } from '@mui/icons-material';
import AddCircleIcon from '@mui/icons-material/AddCircle';
import CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';

import { connect } from 'react-redux'
import { useDeleteLenderTermLoanByIdMutation, useGetLenderTermLoanFormDataQuery, useSaveLenderTermLoanFormDataMutation }
    from "../../../features/application-form/capitalResourceForm";
import AutoSave from "../../../components/framework/AutoSave";
import { TextBoxField } from "../../../components/framework/TextBoxField";
import FormLoader from "../../../loader/FormLoader";
import { EnhancedDropDown } from "../../../components/framework/EnhancedDropDown";
import { AdvanceDatePickerField } from "../../../components/framework/EnhancedComponents";
import ConfirmationAlertDialog from "../../../models/application-form/ConfirmationAlertDialog";
import { OnlineSnackbar } from "../../../components/shared/OnlineSnackbar";
import { MultipleDropDownField } from "../../pnf/components/MultiplePnfDropDown";
import * as Yup from 'yup';
import SaveAsIcon from '@mui/icons-material/SaveAs';
import { AdvanceTextBoxField } from "../../../components/framework/AdvanceTextBoxField";
import FullScreenLoaderNoClose from "../../../components/common/FullScreenLoaderNoClose";

const LenderTermLoanForm = ({ applId, excelData }: any) => {
    const [addLimitTlDetails] = useSaveLenderTermLoanFormDataMutation();
    const [deleteLimitTlDetails] = useDeleteLenderTermLoanByIdMutation();
    const { data: LimitTlData, isLoading } = useGetLenderTermLoanFormDataQuery(applId);
    const [open, setOpen] = useState(false);
    const [index, setIndex] = useState(0);

    const [initialValues, setInitialValues] = useState<any>({ data: [] });
    const [openConfirmation, setOpenConfirmation] = useState(false);
    const [formData, setFormData] = useState<any>("");
    const [actionVal, setActionVal] = useState<any>("");
    const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);
    const [snackMsg, setSnackMsg] = useState<any>("");
    const [severity, setSeverity] = useState<string | any>("success");
    const [isUploading, setIsUploading] = useState<boolean>(false);
    const [snackMsgList, setSnackMsgList] = useState<any>("");

    const [snackOpen, setSnackOpen] = useState(false);
    const [snackSeverity, setSnackSeverity] = useState<'error' | 'success' | 'info'>('error');
    const [snackMessages, setSnackMessages] = useState<any>([]);
    const [snackSeverityList, setSnackSeverityList] = useState<string | any>("success");


    const formatDate = (str: string) => {
        if (!str) return "";
        if ((typeof str) == "string") return str;
        let date = new Date(str),
            mnth = ("0" + (date.getMonth() + 1)).slice(-2),
            day = ("0" + date.getDate()).slice(-2);
        return [day, mnth, date.getFullYear()].join("-");
    }

    useEffect(() => {
        if (LimitTlData) {
            const dataWithApplId = LimitTlData.map((item: any) => ({
                ...item,
                applId
            }))
            setInitialValues({ data: dataWithApplId })
        }
    }, [LimitTlData, applId]);

    useEffect(() => {
        if (excelData && excelData.length > 0) {
            const lenderRows = excelData.filter((row: any) => {
                return row[2] && row[2] !== 'Total'
            });
            const newData: any = [];
            lenderRows.forEach((excelRow: any) => {
                const rowData = {
                    lenderName: excelRow[2]?.toString().trim(),
                    lenderType: excelRow[3]?.toString().trim(),
                    sancDt: formatDate(excelRow[4]),
                    sancAmt: parseExcelValue(excelRow[5]),
                    disbDt: formatDate(excelRow[6]),
                    disbAmt: parseExcelValue(excelRow[7]),
                    undrawnSanc: parseExcelValue(excelRow[8]),
                    outstandingAmt: parseExcelValue(excelRow[9]),
                    totalExposure: calculateTotalExposure(parseExcelValue(excelRow[8]), parseExcelValue(excelRow[9])),
                    intRate: parseExcelValue(excelRow[11]),
                    tenure: parseExcelValue(excelRow[12]),
                    contactDetails: excelRow[13]?.toString().trim(),
                    acr: parseExcelValue(excelRow[14]),
                    security: excelRow[15]?.toString().trim(),
                    corpGuarantee: excelRow[16]?.toString().trim(),
                    persGuarantee: excelRow[17]?.toString().trim(),
                    collSecurity: excelRow[18]?.toString().trim(),
                    majorCovenants: excelRow[19]?.toString().trim(),
                    slNo: null,
                    saveStatus: '01',
                };
                newData.push(rowData);
            });
            setInitialValues({ data: newData });
            setOpenSnackbar(true);
            setSeverity("success");
            setSnackMsg("Lender data imported successfully");
        }
    }, [excelData]);


    const parseExcelValue = (value: any): number => {
        if (value === undefined || value === null || value === '') return 0;
        if (typeof value === 'string') return parseFloat(value.replace(/,/g, '')) || 0;
        return parseFloat(value) || 0;
    };

    const extractErrorMessages = (errorResponse: Record<string, string>) => {
        const allMessages = Object.values(errorResponse)
            .flatMap(msg => msg.split(',').map(m => m.trim()));
        return allMessages;
    };


    const handleSubmitApis = async (values: any) => {

        try {
            let requestBody = values.data;
            if (!requestBody) {
                requestBody = values;
            }
            setIsUploading(true);
            if (await addLimitTlDetails(requestBody).unwrap()) {
                if (requestBody?.[0]?.saveStatus === '02' || requestBody?.[0]?.saveStatus === '01') {
                    setOpenSnackbar(true);
                    setIsUploading(false);
                    setSeverity("success");
                    if (requestBody?.[0]?.saveStatus === '02') {
                        setSnackMsg("Section submitted successfully");
                    } else if (requestBody?.[0]?.saveStatus === '01') {
                        setSnackMsg("Record saved successfully");
                    }
                }
                setActionVal(null);
                return true;
            }
            return false;
        } catch (err: any) {
            setIsUploading(false);
            if (err.status == 400 && err.message === "Invalid") {
                setIsUploading(false);
                console.log('api error', err.customCode);
                const errorMessages = extractErrorMessages(err.customCode);
                setSnackMsgList(errorMessages.length > 0 ? errorMessages : "Validation failed.");
                setSnackMessages(errorMessages.length > 0 ? errorMessages : "Validation failed.");
                setSnackSeverityList('error');
                setSnackOpen(true);
            }
            else {
                console.error(err);
                setIsUploading(false);
                // setOpenSnackbar(true);
                // setSeverity("error");
                // setSnackMsg("failed to save : " + err?.message);

                // console.error(err);
                // setOpenSnackbar(true);
                // setSeverity("error");
                // setSnackMsg("failed to save : " + err?.message);
            }
            return false;
        }
    };

    const handleClosePop = () => {
        setOpenSnackbar(false);
    };

    const handleDelete = async (applId: any, index: number) => {
        handleClose();
        try {
            if (await deleteLimitTlDetails({ applId, index }).unwrap()) {
                setOpenSnackbar(true);
                setSeverity("success");
                setSnackMsg("Record Deleted successfully");
            }
        } catch (error) {
            console.error("Error saving compliance position:", error);
            setOpenSnackbar(true);
            setSeverity("error");
            setSnackMsg("Failed to delete");
        }
    };

    const handleClickOpen = (index: number) => {
        setIndex(index);
        setOpen(true);
    };

    const calculateSanTotal = (values: any) => {
        return values.data.reduce((total: number, data1: any) => {
            return total + (parseFloat(data1.sancAmt) || 0);
        }, 0);
    };

    const calculateDisbTotal = (values: any) => {
        return values.data.reduce((total: number, data1: any) => {
            return total + (parseFloat(data1.disbAmt) || 0);
        }, 0);
    };

    const calculateUndrawnSanctionTotal = (values: any) => {
        return values.data.reduce((total: number, data1: any) => {
            return total + (parseFloat(data1.undrawnSanc) || 0);
        }, 0);
    };

    const calculateOutStTotal = (values: any) => {
        return values.data.reduce((total: number, data1: any) => {
            return total + (parseFloat(data1.outstandingAmt) || 0);
        }, 0);
    };

    const calculateExpoTotal = (values: any) => {
        return values.data.reduce((total: number, data1: any) => {
            return total + (parseFloat(data1.totalExposure) || 0);
        }, 0);
    };

    const termLoanListingSchema = Yup.object().shape({
        data: Yup.array().of(
            Yup.object().shape({
                lenderName: Yup.string()
                    .min(3, 'Lender Name must be at least 3 characters')
                    .max(100, 'Lender Name cannot exceed 100 characters')
                    .required('Required'),
                lenderType: Yup.string()
                    //.min(3, 'Lender Type Name must be at least 3 characters')
                    .max(100, 'Lender Type cannot exceed 100 characters')
                    .required('Required'),
                acr: Yup.string().required('Required')
                    .matches(/^[0-9.]+$/, 'ACR must be a number')
                    .test('positive', 'ACR must be between 0-2', val => val ? Number(val) > 0 && Number(val) <= 2 : false),
                sancAmt: Yup.number().required('Required'),
                disbAmt: Yup.number()
                    .required('Required')
                    .test(
                        'is-not-greater-than-value1',
                        'Disburement Amt. cannot be greater than Sanction Amt.',
                        function (value) {
                            const { sancAmt } = this.parent;
                            return value <= sancAmt;
                        }
                    ),
            })

        ),
    });

    const handleClose = () => {
        setOpen(false);
    };
    const handleCloseConfirmation = () => {
        setActionVal(null);
        setOpenConfirmation(false);
    };
    const handleSubmitConfirmation = (values: any) => {
        setOpenConfirmation(false);
        handleSubmitApis(values);
    };
    const handleSubmit = async (values: any) => {
        let finalValue = values?.data?.map((listData: any, index: number) => ({
            ...listData, applId, slNo: index + 1, saveStatus: actionVal
        }));
        if (actionVal === '02') {
            setFormData(finalValue);
            setOpenConfirmation(true);
        } else {
            handleSubmitApis(finalValue);
        }
        setActionVal(null);
    };

    const handleClickSetAction = (action: any) => {
        setActionVal(action);
    };


    const calculateTotalExposure = (outstandingAmt: number, undrawnSanc: number) => {
        const outstanding = parseFloat(outstandingAmt?.toString() || '0') || 0;
        const undrawn = parseFloat(undrawnSanc?.toString() || '0') || 0;
        return outstanding + undrawn;
    };


    const handleFieldChange = (index: number, field: string, value: any, setFieldValue: any, values: any) => {
        setFieldValue(`data.${index}.${field}`, value);
        if (field === 'outstandingAmt' || field === 'undrawnSanc') {
            const currentRow = values.data[index];
            const outstandingAmt = field === 'outstandingAmt' ? value : currentRow.outstandingAmt;
            const undrawnSanc = field === 'undrawnSanc' ? value : currentRow.undrawnSanc;

            const newTotalExposure = calculateTotalExposure(outstandingAmt, undrawnSanc);
            setFieldValue(`data.${index}.totalExposure`, newTotalExposure);
        }
    };

    const handleSnackbarCloseSnack = () => {
        setSnackOpen(false);
    };
    if (isLoading) return <FormLoader />
    //isLoading
    if (isUploading) return <FullScreenLoaderNoClose />;

    return (
        <div className="wrap-appraisal-area">

            <Snackbar
                open={snackOpen}
                autoHideDuration={6000}
                onClose={handleSnackbarCloseSnack}
                anchorOrigin={{ vertical: 'top', horizontal: 'right' }}
            >
                <Alert onClose={handleSnackbarCloseSnack} severity={snackSeverityList} sx={{ width: '100%' }}>
                    <ul className="list-unstyled">
                        {snackMessages && snackMessages.length > 0 ? snackMessages.map((msg: any, i: number) => {
                            return (
                                <li key={i} className="text-danger">{`(${i + 1})`} {msg} </li>
                            )

                        }) : ''}
                    </ul>
                </Alert>
            </Snackbar>


            <ConfirmationAlertDialog
                id={applId}
                type={4}
                open={openConfirmation}
                handleClose={handleCloseConfirmation}
                handleDelete={handleSubmitConfirmation}
                values={formData}
            />
            <div className="custome-form">
                <ConfirmationAlertDialog
                    id={applId}
                    index={index}
                    type={2}
                    open={open}
                    handleClose={handleClose}
                    handleDelete={handleDelete}
                />
                <div className="wrap-inner-table" style={{ overflow: 'auto' }}>
                    <Formik
                        initialValues={initialValues}
                        onSubmit={handleSubmit}
                        enableReinitialize={true}
                        validationSchema={termLoanListingSchema}
                        validateOnChange={true}
                        validateOnBlur={true}
                    >
                        {({ values, setFieldValue }) => (
                            <Form>
                                <fieldset disabled={values?.data?.[0]?.saveStatus === "02"}>
                                    {values?.data?.[0]?.saveStatus !== "02" &&
                                        < AutoSave handleSubmit={handleSubmit} values={values} debounceMs={10000} />
                                    }
                                    <FieldArray name="data">
                                        {({ push, remove }) => (
                                            <>
                                                {
                                                    values?.data?.[0]?.saveStatus !== "02" &&
                                                    <Button type="submit" size='small' className='psn_btn text-capitalize my-2 saveBtn'
                                                        variant="contained" color="primary" style={{ marginLeft: '15px', display: 'block' }}
                                                        onClick={() =>
                                                            push({
                                                                applId: applId,
                                                                slNo: values.length,
                                                                lenderName: '',
                                                                lenderType: null,
                                                                sancDt: null,
                                                                sancAmt: null,
                                                                disbDt: null,
                                                                disbAmt: null,
                                                                undrawnSanc: null,
                                                                outstandingAmt: null,
                                                                totalExposure: null,
                                                                intRate: null,
                                                                tenure: null,
                                                                contactDetails: null,
                                                                acr: null,
                                                                security: '',
                                                                corpGuarantee: '',
                                                                persGuarantee: '',
                                                                collSecurity: '',
                                                                majorCovenants: '',
                                                                saveStatus: ''
                                                            })
                                                        }>
                                                        Add <AddCircleIcon />
                                                    </Button>
                                                }
                                                <Table sx={{ minWidth: 650 }} aria-label="simple table">
                                                    <TableHead>
                                                        <TableRow>
                                                            <TableCell style={{ minWidth: '40px' }} align='center'>
                                                                <b> Action </b>
                                                            </TableCell>
                                                            <TableCell style={{ minWidth: '50px' }}><b>Sr. No.</b></TableCell>
                                                            <TableCell style={{ minWidth: '250px' }}><b>Name of the Bank/ lender</b></TableCell>
                                                            <TableCell style={{ minWidth: '150px' }}><b>Institution Type</b></TableCell>
                                                            <TableCell style={{ minWidth: '170px' }}><b>Date of Sanction</b></TableCell>
                                                            <TableCell style={{ minWidth: '170px' }}><b>Sanctioned Amount (In ₹ crore)</b></TableCell>
                                                            <TableCell style={{ minWidth: '170px' }}><b>Date of Disbursement</b></TableCell>
                                                            <TableCell style={{ minWidth: '170px' }}><b>Amount Disbursement (In ₹ crore)</b></TableCell>
                                                            <TableCell style={{ minWidth: '170px' }}><b>Undrawn Sanction</b></TableCell>
                                                            <TableCell style={{ minWidth: '170px' }}><b>Amount Outstanding (In ₹ crore)</b></TableCell>
                                                            <TableCell style={{ minWidth: '170px' }}><b>Total Exposure</b></TableCell>
                                                            <TableCell style={{ minWidth: '170px' }}><b>Interest rate (%)</b></TableCell>
                                                            <TableCell style={{ minWidth: '170px' }}><b>Tenure(in months)</b></TableCell>
                                                            <TableCell style={{ minWidth: '170px' }}><b>Contact Details of Lenders</b></TableCell>
                                                            <TableCell style={{ minWidth: '170px' }}><b>ACR</b></TableCell>
                                                            <TableCell style={{ minWidth: '170px' }}><b>Security</b></TableCell>
                                                            <TableCell style={{ minWidth: '350px' }}><b>Any Corporate
                                                                Gurantee given for others</b></TableCell>
                                                            <TableCell style={{ minWidth: '350px' }}><b>Any personal
                                                                guarantee of promoters / founders / directors given to others</b></TableCell>
                                                            <TableCell style={{ minWidth: '350px' }}><b>Any collateral security provided to any lender</b></TableCell>
                                                            <TableCell style={{ minWidth: '350px' }}><b>Major Convenants</b></TableCell>
                                                        </TableRow>
                                                    </TableHead>
                                                    <TableBody>
                                                        {
                                                            values?.data?.map((tlData: any, index: number) => (
                                                                <TableRow key={index + 1}>

                                                                    <TableCell>
                                                                        <IconButton disabled={tlData.saveStatus === '02'} onClick={() => tlData?.slNo ? handleClickOpen(tlData?.slNo) : remove(index)}
                                                                            color="error">
                                                                            <Delete />
                                                                        </IconButton>
                                                                    </TableCell>

                                                                    <TableCell>
                                                                        <p>{index + 1}</p>
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <MultipleDropDownField
                                                                            // label="Name of the Bank/ lender"
                                                                            label=""
                                                                            name={`data.${index}.lenderName`}
                                                                            domain="mstr/getBankMasters"
                                                                            disabled={tlData.saveStatus === '02'}
                                                                        />
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <Grid item xs={12}>
                                                                            <EnhancedDropDown
                                                                                // label="Institution Type"
                                                                                label=""
                                                                                name={`data.${index}.lenderType`}
                                                                                domain="mstr/getLenderType"
                                                                                disabled={tlData.saveStatus === '02'}
                                                                            />
                                                                        </Grid>
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <AdvanceDatePickerField
                                                                            // label="Date of Sanction"
                                                                            label=""
                                                                            name={`data.${index}.sancDt`}
                                                                            disableFuture={true}
                                                                        />
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <TextBoxField
                                                                            label=""
                                                                            name={`data.${index}.sancAmt`}
                                                                            // label="Enter Sanctioned Amount"
                                                                            type={"number"} />
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <AdvanceDatePickerField
                                                                            label=""
                                                                            // label="Date of Disbursement"
                                                                            name={`data.${index}.disbDt`}
                                                                            disableFuture={true}
                                                                        />
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <TextBoxField
                                                                            label=""
                                                                            name={`data.${index}.disbAmt`}
                                                                            // label="Enter Amount Disbursement"
                                                                            type={"number"} />
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <AdvanceTextBoxField
                                                                            name={`data.${index}.undrawnSanc`}
                                                                            // label="Undrawn Sanction"
                                                                            type="number"
                                                                            onCustomChange={(value: any) => handleFieldChange(index, 'undrawnSanc', value, setFieldValue, values)}
                                                                        />
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <AdvanceTextBoxField
                                                                            name={`data.${index}.outstandingAmt`}
                                                                            // label="Amount Outstanding"
                                                                            type="number"
                                                                            onCustomChange={(value: any) => handleFieldChange(index, 'outstandingAmt', value, setFieldValue, values)}
                                                                        />
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <AdvanceTextBoxField
                                                                            label=""
                                                                            name={`data.${index}.totalExposure`}
                                                                            // label="Enter Total Exposure"
                                                                            type={"number"}
                                                                            disabled={true}

                                                                        />
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <TextBoxField
                                                                            label=""
                                                                            name={`data.${index}.intRate`}
                                                                            // label="Enter Interest rate"
                                                                            type={"number"} />
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <TextBoxField
                                                                            label=""
                                                                            name={`data.${index}.tenure`}
                                                                            // label="Enter Tenure"
                                                                            type={"number"} />
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <TextBoxField
                                                                            label=""
                                                                            name={`data.${index}.contactDetails`}
                                                                        // label="Enter Contact Details"
                                                                        />
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <TextBoxField
                                                                            label=""
                                                                            name={`data.${index}.acr`}
                                                                            // label="Enter ACR"
                                                                            type={"number"} />
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <TextBoxField
                                                                            label=""
                                                                            name={`data.${index}.security`}
                                                                        // label="Enter Security"
                                                                        />
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <TextBoxField
                                                                            label=""
                                                                            name={`data.${index}.corpGuarantee`}
                                                                        // label="Enter Corporate Gurantee"
                                                                        />
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <TextBoxField
                                                                            label=""
                                                                            name={`data.${index}.persGuarantee`}
                                                                        // label="Enter personal guarantee"
                                                                        />
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <TextBoxField
                                                                            label=""
                                                                            name={`data.${index}.collSecurity`}
                                                                        // label="Enter collateral Security"
                                                                        />
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <TextBoxField
                                                                            label=""
                                                                            name={`data.${index}.majorCovenants`}
                                                                        // label="Enter Major Convenants"
                                                                        />
                                                                    </TableCell>
                                                                </TableRow>
                                                            ))
                                                        }
                                                        <TableRow>
                                                            <TableCell></TableCell>
                                                            <TableCell></TableCell>
                                                            <TableCell colSpan={2}></TableCell>
                                                            <TableCell><b>Total</b></TableCell>
                                                            <TableCell>
                                                                <b>
                                                                    {calculateSanTotal(values).toLocaleString('en-IN', {
                                                                        maximumFractionDigits: 2,
                                                                        style: 'currency',
                                                                        currency: 'INR'
                                                                    })}
                                                                </b>
                                                            </TableCell>
                                                            <TableCell></TableCell>
                                                            <TableCell>
                                                                <b>
                                                                    {calculateDisbTotal(values).toLocaleString('en-IN', {
                                                                        maximumFractionDigits: 2,
                                                                        style: 'currency',
                                                                        currency: 'INR'
                                                                    })}
                                                                </b>
                                                            </TableCell>
                                                            <TableCell>
                                                                <b>
                                                                    {calculateUndrawnSanctionTotal(values).toLocaleString('en-IN', {
                                                                        maximumFractionDigits: 2,
                                                                        style: 'currency',
                                                                        currency: 'INR'
                                                                    })}
                                                                </b>
                                                            </TableCell>
                                                            <TableCell>
                                                                <b>
                                                                    {calculateOutStTotal(values).toLocaleString('en-IN', {
                                                                        maximumFractionDigits: 2,
                                                                        style: 'currency',
                                                                        currency: 'INR'
                                                                    })}
                                                                </b>
                                                            </TableCell>
                                                            <TableCell>
                                                                <b>
                                                                    {calculateExpoTotal(values).toLocaleString('en-IN', {
                                                                        maximumFractionDigits: 2,
                                                                        style: 'currency',
                                                                        currency: 'INR'
                                                                    })}
                                                                </b>
                                                            </TableCell>
                                                            <TableCell colSpan={9}></TableCell>
                                                        </TableRow>
                                                    </TableBody>
                                                </Table>
                                            </>
                                        )}
                                    </FieldArray>
                                </fieldset>
                                {values?.data?.[0]?.saveStatus !== "02" &&
                                    <Button className="sbmtBtn psn_btn mt-3 mb-3 ms-3" type='submit'
                                        onClick={() => handleClickSetAction('01')}
                                        variant="contained"> Save <CheckCircleOutlineIcon />
                                    </Button>
                                }
                                {values?.data?.[0]?.saveStatus !== "02" &&
                                    <Button className="sbmtBtn sbmtBtn_scn psn_btn mt-3 mb-3 ms-3" type='submit'
                                        onClick={() => handleClickSetAction('02')}
                                        variant="contained"> Submit <SaveAsIcon />
                                    </Button>
                                }
                            </Form>
                        )}
                    </Formik>
                </div>
                <OnlineSnackbar open={openSnackbar} msg={snackMsg} severity={severity}
                    handleSnackClose={handleClosePop} />
            </div>
        </div>

    )
}

export default connect((state: any) => {
    return {
        applId: state.userStore.applId
    };
})(LenderTermLoanForm)





import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import { apiEndpoint, crudApiTemplate } from "../../app/commonApi";
import { Master } from "../../models/master";
import { customBaseQuery } from '../../app/commonApi'


const entity = "masters";

const path = `masterApi`;


const tags = [entity];

export const masterApi = createApi({
    reducerPath: path,
    baseQuery: customBaseQuery(),
    tagTypes: tags,
    endpoints: (builder) => ({
        getMater: builder.query<any, string>({
            query: (searchReqeust) => ({
                url: `/${searchReqeust}`,
                method: "GET",
            }),
            // providesTags: tags,
        }),
        getMasterById: builder.query<any, any>({
            query: (searchReqeust) => ({
                url: `/${searchReqeust}`,
                method: "GET",
            }),
            // providesTags: tags,
        }),
    }),
});

//Exported hooks for use in components
export const {
    useGetMaterQuery,
    useLazyGetMasterByIdQuery
    
} = masterApi;
