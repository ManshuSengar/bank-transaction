import { createApi } from "@reduxjs/toolkit/query/react";
import { customBaseQuery } from "../../app/commonApi";

export const interestRateFixationApi = createApi({
    reducerPath: 'interestRateFixationApi',
    baseQuery: customBaseQuery,
    tagTypes: [
        'BriefBackground', 
        'InternalRating', 
        'ExternalRating', 
        'ROID', 
        'ROIR', 
        'PresentProposal', 
        'SidbiExposure', 
        'SanctionRating', 
        'ApprovedStructure',
        'ApprovedStructurePresent',
        'CompanyRateRequest'
    ],
    endpoints: (builder) => ({
        getFixationInterestRate: builder.query<any, string>({
            query: (applId) => `interestratefixation/getfixationinterestrate/${applId}`,
            providesTags: ['BriefBackground']
        }),
        saveInternalRating: builder.mutation<any, any[]>({
            query: (data) => ({
                url: `interestratefixation/saveinternalrating`,
                method: 'POST',
                body: data,
            }),
            invalidatesTags: ['InternalRating'],
        }),
        getInternalRatingPresent: builder.query<any, string>({
            query: (applId) => `interestratefixation/getinternalratingpresent/${applId}`,
            providesTags: ['InternalRating']
        }),
        getInternalRatingSanction: builder.query<any, string>({
            query: (applId) => `interestratefixation/getinternalratingsanction/${applId}`,
            providesTags: ['InternalRating']
        }),
        getExternalRatingSanction: builder.query<any, string>({
            query: (applId) => `interestratefixation/getexternalratingsanction/${applId}`,
            providesTags: ['ExternalRating']
        }),
        getExternalRatingPresent: builder.query<any, string>({
            query: (applId) => `interestratefixation/getexternalratingpresent/${applId}`,
            providesTags: ['ExternalRating']
        }),
        saveExternalRating: builder.mutation<any, any[]>({
            query: (data) => ({
                url: `interestratefixation/saveexternalrating`,
                method: 'POST',
                body: data,
            }),
            invalidatesTags: ['ExternalRating'],
        }),
        getResetlist: builder.query<any, string>({
            query: (applId) => `interestratefixation/getresetlist/${applId}`,
            providesTags: ['ROIR']
        }),
        saveReset: builder.mutation<any, any[]>({
            query: (data) => ({
                url: `interestratefixation/savereset`,
                method: 'POST',
                body: data,
            }),
            invalidatesTags: ['ROID'],
        }),
        getDisbursementList: builder.query<any, string>({
            query: (applId) => `interestratefixation/getDisbursementlist/${applId}`,
            providesTags: ['ROID']
        }),
        saveDisbursement: builder.mutation<any, any[]>({
            query: (data) => ({
                url: `interestratefixation/savedisbursement`,
                method: 'POST',
                body: data,
            }),
            invalidatesTags: ['ROID'],
        }),
        getPresentProposal: builder.query<any, string>({
            query: (irfId) => `interestratefixation/getpresentproposal/${irfId}`,
            providesTags: ['PresentProposal']
        }),
        savePresentProposal: builder.mutation<any, any>({
            query: (data) => ({
                url: `interestratefixation/savepresentproposal`,
                method: 'POST',
                body: data,
            }),
            invalidatesTags: ['PresentProposal'],
        }),
        getSidbiExposure: builder.query<any, string>({
            query: (irfId) => `interestratefixation/getsidbiexposure/${irfId}`,
            providesTags: ['SidbiExposure']
        }),
        saveSidbiExposure: builder.mutation<any, any[]>({
            query: (data) => ({
                url: `interestratefixation/savesidbiexposure`,
                method: 'POST',
                body: data,
            }),
            invalidatesTags: ['SidbiExposure'],
        }),
        getSanctionRating: builder.query<any, string>({
            query: (irfId) => `interestratefixation/getsanctionrating/${irfId}`,
            providesTags: ['SanctionRating']
        }),
        saveSanctionRating: builder.mutation<any, any>({
            query: (data) => ({
                url: `interestratefixation/savesanctionrating`,
                method: 'POST',
                body: data,
            }),
            invalidatesTags: ['SanctionRating'],
        }),
        getApprovedStructure: builder.query<any, string>({
            query: (irfId) => `interestratefixation/getapprovedintrate/${irfId}`,
            providesTags: ['ApprovedStructure']
        }),
        saveApprovedStructure: builder.mutation<any, any>({
            query: (data) => ({
                url: `interestratefixation/saveapprovedintrate`,
                method: 'POST',
                body: data,
            }),
            invalidatesTags: ['ApprovedStructure'],
        }),
        getapplprestproposal: builder.query<any, string>({
            query: (irfId) => `interestratefixation/getapplprestproposal/${irfId}`,
            providesTags: ['ApprovedStructurePresent']
        }),
        saveApplPrestProposal: builder.mutation<any, any>({
            query: (data) => ({
                url: `interestratefixation/saveapplprestproposal`,
                method: 'POST',
                body: [data],
            }),
            invalidatesTags: ['ApprovedStructurePresent'],
        }),
        getCompanyRateRequest: builder.query<any, string>({
            query: (irfId) => `interestratefixation/getcomprequestrate/${irfId}`,
            providesTags: ['CompanyRateRequest']
        }),
        saveCompanyRateRequest: builder.mutation<any, any>({
            query: (data) => ({
                url: `interestratefixation/savecomprequestrate`,
                method: 'POST',
                body: data,
            }),
            invalidatesTags: ['CompanyRateRequest'],
        }),
    }),
});

export const {
    useGetFixationInterestRateQuery,
    useSaveInternalRatingMutation,
    useGetInternalRatingPresentQuery,
    useGetInternalRatingSanctionQuery,
    useGetExternalRatingSanctionQuery,
    useGetExternalRatingPresentQuery,
    useSaveExternalRatingMutation,
    useGetDisbursementListQuery,
    useGetResetlistQuery,
    useSaveDisbursementMutation,
    useSaveResetMutation,
    useGetPresentProposalQuery,
    useSavePresentProposalMutation,
    useGetSidbiExposureQuery,
    useSaveSidbiExposureMutation,
    useGetSanctionRatingQuery,
    useSaveSanctionRatingMutation,
    useGetApprovedStructureQuery,
    useSaveApprovedStructureMutation,
    useSaveApplPrestProposalMutation,
    useGetapplprestproposalQuery,
    useGetCompanyRateRequestQuery,
    useSaveCompanyRateRequestMutation
} = interestRateFixationApi;

import React, { useState } from 'react';
import {
  Table, TableBody, TableCell, TableHead, TableRow, Button, IconButton, Grid, TextField
} from "@mui/material";
import DeleteIcon from '@mui/icons-material/Delete';
import AddCircleIcon from '@mui/icons-material/AddCircle';
import CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';
import { Formik, FieldArray, Form } from 'formik';
import * as Yup from 'yup';
import { useAppSelector } from '../../../app/hooks';
import {
  useGetCompanyRateRequestQuery,
  useSaveCompanyRateRequestMutation
} from '../../../features/monitoring/interestRateFixationApi';
import moment from 'moment';
import NbfcSnackbar from '../../../components/shared/NbfcSnackbar';
import { TextBoxField } from '../../../components/framework/TextBoxField';
import { AdvanceDatePickerField } from '../../../components/framework/EnhancedComponents';
import AutoSave from '../../../components/framework/AutoSave';

const RateRequestCompany = ({ irfId }: any) => {
  const { applId } = useAppSelector((state: { userStore: any; }) => state.userStore);
  const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);
  const [snackMsg, setSnackMsg] = useState<string>("");
  const [severity, setSeverity] = useState<"success" | "error">("success");

  const { data: rateRequests, isLoading: isLoadingRates } = useGetCompanyRateRequestQuery(irfId, {
    skip: !irfId,
    refetchOnMountOrArgChange: true,
  });

  const [saveCompanyRateRequest] = useSaveCompanyRateRequestMutation();

  const initialValues = {
    rateRequested: '',
    ratings: rateRequests || [],
  };

  const validationSchema = Yup.object().shape({
    rateRequested: Yup.number()
      .typeError("Must be a number")
      .required("Required")
      .positive("Must be positive"),
    ratings: Yup.array().of(
      Yup.object().shape({
        lenderInst: Yup.string().required("Required"),
        facilityType: Yup.string().required("Required"),
        dateOfAvailment: Yup.string().required("Required"),
        sancAmt: Yup.number()
          .typeError("Must be a number")
          .required("Required")
          .positive("Must be positive"),
        interestRate: Yup.number()
          .typeError("Must be a number")
          .required("Required")
          .positive("Must be positive"),
        tenure: Yup.number()
          .typeError("Must be a number")
          .required("Required")
          .positive("Must be positive"),
      })
    ),
  });

  const handleSubmit = async (values: any) => {
    try {
      const finalValue = values.ratings.map((rating: any, index: number) => ({
        ...rating,
        irfId,
        slNo: index + 1,
        saveStatus: '01',
      }));
      await saveCompanyRateRequest({
        rateRequested: values.rateRequested,
        ratings: finalValue
      }).unwrap();
      setOpenSnackbar(true);
      setSeverity("success");
      setSnackMsg("Company Rate Request saved successfully");
    } catch (error) {
      console.error("Error saving company rate request:", error);
      setOpenSnackbar(true);
      setSeverity("error");
      setSnackMsg("Failed to save Company Rate Request");
    }
  };

  const handleSnackClose = () => {
    setOpenSnackbar(false);
  };

  return (
    <div className="wrap-inner-table mt-4">
      {isLoadingRates ? (
        <p>Loading...</p>
      ) : (
        <Formik
          initialValues={initialValues}
          validationSchema={validationSchema}
          onSubmit={handleSubmit}
          enableReinitialize={true}
        >
          {({ values }) => (
            <Form>
              <AutoSave debounceMs={5000} values={values} handleSubmit={handleSubmit} />
              <TextBoxField
                label="Rate Requested by the Company"
                name="rateRequested"
                type="number"
                size="small"
                className="fnt_sml mb-4"
              />
              <FieldArray name="ratings">
                {({ push, remove }) => (
                  <>
                    <Button
                      type="button"
                      size='small'
                      className='text-capitalize mt-1 mb-3 saveBtn'
                      variant="contained"
                      color="primary"
                      style={{ display: 'block' }}
                      onClick={() => push({
                        irfId,
                        lenderInst: "",
                        facilityType: "",
                        dateOfAvailment: null,
                        sancAmt: "",
                        interestRate: "",
                        tenure: "",
                        saveStatus: '01',
                      })}
                    >
                      Add <AddCircleIcon />
                    </Button>
                    <Table sx={{ minWidth: 650 }} aria-label="company rate request table">
                      <TableHead>
                        <TableRow>
                          <TableCell><b>Sr. No.</b></TableCell>
                          <TableCell><b>Lender/Instrument</b></TableCell>
                          <TableCell><b>Facility Type</b></TableCell>
                          <TableCell><b>Date of Availment</b></TableCell>
                          <TableCell><b>Sanctioned Amount (crore)</b></TableCell>
                          <TableCell><b>Interest Rate</b></TableCell>
                          <TableCell><b>Tenure</b></TableCell>
                          <TableCell><b>Actions</b></TableCell>
                        </TableRow>
                      </TableHead>
                      <TableBody>
                        {values.ratings.length > 0 ? (
                          values.ratings.map((rating: any, index: number) => (
                            <TableRow key={index}>
                              <TableCell>{index + 1}</TableCell>
                              <TableCell>
                                <TextBoxField
                                  label=""
                                  name={`ratings.${index}.lenderInst`}
                                  size="small"
                                  className="fnt_sml"
                                />
                              </TableCell>
                              <TableCell>
                                <TextBoxField
                                  label=""
                                  name={`ratings.${index}.facilityType`}
                                  size="small"
                                  className="fnt_sml"
                                />
                              </TableCell>
                              <TableCell>
                                <AdvanceDatePickerField
                                  label=""
                                  name={`ratings.${index}.dateOfAvailment`}
                                  disableFuture={true}
                                  size="small"
                                  className="fnt_sml"
                                />
                              </TableCell>
                              <TableCell>
                                <TextBoxField
                                  label=""
                                  name={`ratings.${index}.sancAmt`}
                                  type="number"
                                  size="small"
                                  className="fnt_sml"
                                />
                              </TableCell>
                              <TableCell>
                                <TextBoxField
                                  label=""
                                  name={`ratings.${index}.interestRate`}
                                  type="number"
                                  size="small"
                                  className="fnt_sml"
                                />
                              </TableCell>
                              <TableCell>
                                <TextBoxField
                                  label=""
                                  name={`ratings.${index}.tenure`}
                                  type="number"
                                  size="small"
                                  className="fnt_sml"
                                />
                              </TableCell>
                              <TableCell>
                                <IconButton
                                  aria-label="delete"
                                  color="error"
                                  onClick={() => remove(index)}
                                  disabled={values.ratings.length === 1}
                                >
                                  <DeleteIcon />
                                </IconButton>
                              </TableCell>
                            </TableRow>
                          ))
                        ) : (
                          <TableRow>
                            <TableCell colSpan={8}>No data available</TableCell>
                          </TableRow>
                        )}
                      </TableBody>
                    </Table>
                    <Grid item xs={12} sx={{ mt: 2 }}>
                      <Button
                        className="sbmtBtn mt-0 mb-3 ms-2 me-2"
                        type='submit'
                        variant="contained"
                      >
                        Save <CheckCircleOutlineIcon />
                      </Button>
                    </Grid>
                  </>
                )}
              </FieldArray>
            </Form>
          )}
        </Formik>
      )}
      <NbfcSnackbar
        open={openSnackbar}
        msg={snackMsg}
        severity={severity}
        handleSnackClose={handleSnackClose}
        submitCall={false}
      />
    </div>
  );
};

export default RateRequestCompany;







[
  {
    "irfId": "string",
    "slNo": 0,
    "lenderInst": "string",
    "facilityType": "string",
    "dateOfAvailment": "2025-06-17",
    "sancAmt": 0,
    "interestRate": 0,
    "tenure": 0,
    "saveStatus": "string"
  }
]

'https://dev-nbfc.sidbi.in/refapi/interestratefixation/savecomprequestrate'

curl -X 'GET' \
  'https://dev-nbfc.sidbi.in/refapi/interestratefixation/getcomprequestrate/1212' \
  -H 'accept: */*'
  
  
  import {
   
    TextField,
    FormControl,
    InputLabel,
    MenuItem,
    Select,
    SelectChangeEvent,
    Table,
    TableBody,
    TableHead,
    TableRow,
    TableCell,
    Button
} from "@mui/material";
import React, { memo } from "react";
import Box from "@mui/material/Box";
import { useParams } from "react-router-dom";
import { useAppSelector } from "../../../app/hooks";


interface TabPanelProps {
    children?: React.ReactNode;
    index: number;
    value: number;
}

function CustomTabPanel(props: Readonly<TabPanelProps>) {
    const { children, value, index, ...other } = props;

    return (
        <div
            role="tabpanel"
            hidden={value !== index}
            id={`simple-tabpanel-${index}`}
            aria-labelledby={`simple-tab-${index}`}
            {...other}
        >
            {value === index && <Box sx={{ p: 3 }}>{children}</Box>}
        </div>
    );
}

function a11yProps(index: number) {
    return {
        id: `simple-tab-${index}`,
        "aria-controls": `simple-tabpanel-${index}`,
    };
}


const RateRequestCompany = ({irfId}:any) => {
    const [value, setValue] = React.useState(0);
    const { id } = useParams();
    const { applId } = useAppSelector((state: { userStore: any; }) => state.userStore);

    const [expanded, setExpanded] = React.useState("");
    const onOpenChange =
        (panel: any) => (event: React.SyntheticEvent, isExpanded: any) => {
            setExpanded(isExpanded ? panel : false);
        };

    const handleChange = (event: React.SyntheticEvent, newValue: number) => {
        setValue(newValue);
    };

    const [borrower, setBorrower] = React.useState('');

    const handleChangeBrw = (event: SelectChangeEvent) => {
        setBorrower(event.target.value);
    };

    const topBorrowers = [
        { label: 'Borrower 1', nbfcId: 1 },
        { label: 'Borrower 2', nbfcId: 2 },
        { label: 'Borrower 3', nbfcId: 3 },
        { label: 'Borrower 4', nbfcId: 4 },
    ];

    const topSchemes = [
        { label: 'Scheme of refinance to nbfcs', schCd: 'a' },
        { label: 'Scheme 2', schCd: 'b' },
        { label: 'Scheme 3', schCd: 'c' },
        { label: 'Scheme 4', schCd: 'd' },
        { label: 'Scheme 5', schCd: 'e' },
        { label: "Scheme 6", schCd: 'f' }
    ];

    const options = [
        { label: "Excellent", value: "Excellent" },
        { label: "Good", value: "Good" },
        { label: "Satisfactory", value: "Satisfactory" },
        { label: "Moderate", value: "Moderate" },
        { label: "Poor", value: "Poor" },
        { label: "Default", value: "Default" },
    ];

    const dummyLoanAccounts: any[] = [
        {
            id: 1, loanAccountNo: '000405007899', DisbDate: '30/04/2025', DisbAmt: 250, osAmount: 250,
            currentROI: '4.75', benchmark: "Benchmark will be here", fixedORFloating: 4, resetClause: 'Reset Clause here',
            loanStatus: 'Approved'
        },
        {
            id: 2, loanAccountNo: '000405007877', DisbDate: '30/04/2025', DisbAmt: 250, osAmount: 250,
            currentROI: '4.75', benchmark: "Benchmark will be here", fixedORFloating: 4, resetClause: 'Reset Clause here',
            loanStatus: 'Approved'
        }
    ];
    return (
        <> <TextField
            label="Rate Requested by the Company"
            id=""
            size="small" className="fnt_sml"
        />
            <div className="wrap-inner-table mt-4">
                <Table sx={{ minWidth: 650 }} aria-label="external ratings table">
                    <TableHead>
                        <TableRow>
                            <TableCell><b>Lender/Instrument </b></TableCell>
                            <TableCell><b>Facility Type </b></TableCell>
                            <TableCell><b>Date of Availment </b></TableCell>
                            <TableCell><b>Sanctioned Amount (crore) </b></TableCell>
                            <TableCell><b>Interest Rate </b></TableCell>
                            <TableCell><b>Tenure  </b></TableCell>
                        </TableRow>
                    </TableHead>
                    <TableBody>
                        <TableRow>
                            <TableCell>
                                <TextField
                                    label="Lender/Instrument"
                                    id=""
                                    size="small" className="fnt_sml"
                                />
                            </TableCell>
                            <TableCell>
                             
                            </TableCell>
                            <TableCell>
                                <TextField
                                    label="Date of Availment "
                                    id=""
                                    size="small" className="fnt_sml"
                                />
                            </TableCell>
                            <TableCell>
                                <TextField
                                    label="Sanctioned Amount"
                                    id=""
                                    size="small" className="fnt_sml"
                                />
                            </TableCell>
                            <TableCell>
                                <TextField
                                    label="Interest Rate "
                                    id=""
                                    size="small" className="fnt_sml"
                                />
                            </TableCell>
                            <TableCell>
                                <TextField
                                    label="Tenure"
                                    id=""
                                    size="small" className="fnt_sml"
                                />
                            </TableCell>
                        </TableRow>
                    </TableBody>
                </Table>
            </div></>
    )
}

export default RateRequestCompany;


import React from 'react';
import {
  Table, TableBody, TableCell, TableHead, TableRow, Button, IconButton, Grid
} from "@mui/material";
import DeleteIcon from '@mui/icons-material/Delete';
import AddCircleIcon from '@mui/icons-material/AddCircle';
import { Formik, FieldArray, Form } from 'formik';
import * as Yup from 'yup';
import { useAppSelector } from '../../../app/hooks';
import {
  useGetExternalRatingSanctionQuery,
  useGetExternalRatingPresentQuery,
  useSaveExternalRatingMutation
} from '../../../features/monitoring/interestRateFixationApi';
import CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';
import { TextBoxField } from '../../../components/framework/TextBoxField';
import { EnhancedDropDown } from '../../../components/framework/EnhancedDropDown';
import { AdvanceDatePickerField } from '../../../components/framework/EnhancedComponents';
import moment from 'moment';
import NbfcSnackbar from '../../../components/shared/NbfcSnackbar';
import { useState } from 'react';
import AutoSave from '../../../components/framework/AutoSave';

const RfExternalRating = ({ irfId }: any) => {

  const { data: sanctionRatings, isLoading: isLoadingSanction } = useGetExternalRatingSanctionQuery(irfId, {
    skip: !irfId,
    refetchOnMountOrArgChange: true,
  });

  const { data: presentRatings, isLoading: isLoadingPresent } = useGetExternalRatingPresentQuery(irfId, {
    skip: !irfId,
    refetchOnMountOrArgChange: true,
  });

  const [saveExternalRating] = useSaveExternalRatingMutation();

  const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);
  const [snackMsg, setSnackMsg] = useState<string>("");
  const [severity, setSeverity] = useState<"success" | "error">("success");

  const initialValues = {
    ratings: presentRatings || [],
  };

  const validationSchema = Yup.object().shape({
    ratings: Yup.array().of(
      Yup.object().shape({
        agencyName: Yup.string().required("Required"),
        instrument: Yup.string().required("Required"),
        amount: Yup.number().typeError("Must be a number").required("Required"),
        prevRating: Yup.string().required("Required"),
        outlook: Yup.string().required("Required"),
        ratingDate: Yup.string().required("Required"),
      })
    ),
  });

  const handleSubmit = async (values: any) => {
    try {
      const finalValue = values.ratings.map((rating: any, index: number) => ({
        ...rating,
        irfId,
        id: index + 1,
        saveStatus: '01',
      }));
      await saveExternalRating(finalValue).unwrap();
      setOpenSnackbar(true);
      setSeverity("success");
      setSnackMsg("Latest External Rating saved successfully");
    } catch (error) {
      console.error("Error saving latest external rating:", error);
      setOpenSnackbar(true);
      setSeverity("error");
      setSnackMsg("Failed to save Latest External Rating");
    }
  };

  const handleSnackClose = () => {
    setOpenSnackbar(false);
  };

  return (
    <div className="wrap-inner-table mt-0">
      <Table sx={{ minWidth: 650 }} aria-label="external ratings table">
        <TableHead>
          <TableRow>
            <TableCell style={{ width: '6%' }}><b>Sr. No.</b></TableCell>
            <TableCell style={{ width: '20%' }}><b>Particulars</b></TableCell>
            <TableCell><b>Remarks</b></TableCell>
          </TableRow>
        </TableHead>
        <TableBody>
          <TableRow>
            <TableCell>1</TableCell>
            <TableCell>External rating at the time of sanction</TableCell>
            <TableCell>
              {isLoadingSanction ? (
                <p>Loading...</p>
              ) : (
                <Table sx={{ minWidth: 650 }} aria-label="sanction external ratings table">
                  <TableHead>
                    <TableRow>
                      <TableCell><b>Name of Rating Agency</b></TableCell>
                      <TableCell><b>Instrument</b></TableCell>
                      <TableCell><b>Amount (in ₹ crore)</b></TableCell>
                      <TableCell><b>Rating</b></TableCell>
                      <TableCell><b>Outlook</b></TableCell>
                      <TableCell><b>Date of Rating</b></TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {sanctionRatings?.length > 0 ? (
                      sanctionRatings.map((rating: any, index: number) => (
                        <TableRow key={index}>
                          <TableCell>{rating.agencyName}</TableCell>
                          <TableCell>{rating.instrument}</TableCell>
                          <TableCell>{rating.amount}</TableCell>
                          <TableCell>{rating.prevRating}</TableCell>
                          <TableCell>{rating.outlook}</TableCell>
                          <TableCell>{moment(rating.ratingDate).format("DD-MM-YYYY")}</TableCell>
                        </TableRow>
                      ))
                    ) : (
                      <TableRow>
                        <TableCell colSpan={6}>No data available</TableCell>
                      </TableRow>
                    )}
                  </TableBody>
                </Table>
              )}
            </TableCell>
          </TableRow>

          <TableRow>
            <TableCell>2</TableCell>
            <TableCell>Latest External Rating</TableCell>
            <TableCell>
              {isLoadingPresent ? (
                <p>Loading...</p>
              ) : (
                <Formik
                  initialValues={initialValues}
                  validationSchema={validationSchema}
                  onSubmit={handleSubmit}
                  enableReinitialize={true}
                >
                  {({ values, setFieldValue }) => (
                    <Form>
                      <AutoSave debounceMs={5000} values={values} handleSubmit={handleSubmit} />
                      <FieldArray name="ratings">
                        {({ push, remove }) => (
                          <>
                            <Button type="button" size='small' className='text-capitalize mt-1 mb-3  saveBtn'
                              variant="contained" color="primary" style={{ display: 'block' }}
                              onClick={() => push({
                                irfId,
                                agencyName: "",
                                instrument: "",
                                amount: "",
                                prevRating: "",
                                outlook: "",
                                ratingDate: null,
                              })}
                            >
                              Add <AddCircleIcon />
                            </Button>
                            <Table sx={{ minWidth: 650 }} aria-label="latest external ratings table">
                              <TableHead>
                                <TableRow>
                                  <TableCell><b>Name of Rating Agency</b></TableCell>
                                  <TableCell><b>Instrument</b></TableCell>
                                  <TableCell><b>Amount (in ₹ crore)</b></TableCell>
                                  <TableCell><b>Rating</b></TableCell>
                                  <TableCell><b>Outlook</b></TableCell>
                                  <TableCell><b>Date of Rating</b></TableCell>
                                  <TableCell><b>Actions</b></TableCell>
                                </TableRow>
                              </TableHead>
                              <TableBody>
                                {values.ratings.length > 0 ? (
                                  values.ratings.map((rating: any, index: number) => (
                                    <TableRow key={index}>
                                      <TableCell>
                                        <EnhancedDropDown
                                          label=""
                                          name={`ratings.${index}.agencyName`}
                                          domain="mstr/getRatingAgency"
                                        />
                                      </TableCell>
                                      <TableCell>
                                        <TextBoxField
                                          label=""
                                          name={`ratings.${index}.instrument`}
                                        />
                                      </TableCell>
                                      <TableCell>
                                        <TextBoxField
                                          label=""
                                          name={`ratings.${index}.amount`}
                                          type="number"
                                        />
                                      </TableCell>
                                      <TableCell>
                                        <EnhancedDropDown
                                          label=""
                                          name={`ratings.${index}.prevRating`}
                                          domain="mstr/getRatingCode"
                                        />
                                      </TableCell>
                                      <TableCell>
                                        <TextBoxField
                                          label=""
                                          name={`ratings.${index}.outlook`}
                                        />
                                      </TableCell>
                                      <TableCell>
                                        <AdvanceDatePickerField
                                          label=""
                                          name={`ratings.${index}.ratingDate`}
                                          disableFuture={true}
                                        />
                                      </TableCell>
                                      <TableCell>
                                        <IconButton
                                          aria-label="delete"
                                          color="error"
                                          onClick={() => remove(index)}
                                          disabled={values.ratings.length === 1}
                                        >
                                          <DeleteIcon />
                                        </IconButton>
                                      </TableCell>
                                    </TableRow>
                                  ))
                                ) : (
                                  <TableRow>
                                    <TableCell colSpan={7}>No data available</TableCell>
                                  </TableRow>
                                )}
                              </TableBody>
                            </Table>
                            <Grid item xs={12} sx={{ mt: 2 }}>
                              <Button
                                className="sbmtBtn mt-0 mb-3 ms-2 me-2"
                                type='submit'
                                variant="contained"> Save <CheckCircleOutlineIcon />
                              </Button>
                            </Grid>
                          </>
                        )}
                      </FieldArray>
                    </Form>
                  )}
                </Formik>
              )}
            </TableCell>
          </TableRow>
        </TableBody>
      </Table>

      <NbfcSnackbar
        open={openSnackbar}
        msg={snackMsg}
        severity={severity}
        handleSnackClose={handleSnackClose}
        submitCall={false}
      />
    </div>
  );
};

export default RfExternalRating;



import { createApi } from "@reduxjs/toolkit/query/react";
import { customBaseQuery } from "../../app/commonApi";

export const interestRateFixationApi = createApi({
    reducerPath: 'interestRateFixationApi',
    baseQuery: customBaseQuery,
    tagTypes: [
        'BriefBackground', 
        'InternalRating', 
        'ExternalRating', 
        'ROID', 
        'ROIR', 
        'PresentProposal', 
        'SidbiExposure', 
        'SanctionRating', 
        'ApprovedStructure',
        'ApprovedStructurePresent' 
    ],
    endpoints: (builder) => ({
        getFixationInterestRate: builder.query<any, string>({
            query: (applId) => `interestratefixation/getfixationinterestrate/${applId}`,
            providesTags: ['BriefBackground']
        }),
        saveInternalRating: builder.mutation<any, any[]>({
            query: (data) => ({
                url: `interestratefixation/saveinternalrating`,
                method: 'POST',
                body: data,
            }),
            invalidatesTags: ['InternalRating'],
        }),
        getInternalRatingPresent: builder.query<any, string>({
            query: (applId) => `interestratefixation/getinternalratingpresent/${applId}`,
            providesTags: ['InternalRating']
        }),
        getInternalRatingSanction: builder.query<any, string>({
            query: (applId) => `interestratefixation/getinternalratingsanction/${applId}`,
            providesTags: ['InternalRating']
        }),
        getExternalRatingSanction: builder.query<any, string>({
            query: (applId) => `interestratefixation/getexternalratingsanction/${applId}`,
            providesTags: ['ExternalRating']
        }),
        getExternalRatingPresent: builder.query<any, string>({
            query: (applId) => `interestratefixation/getexternalratingpresent/${applId}`,
            providesTags: ['ExternalRating']
        }),
        saveExternalRating: builder.mutation<any, any[]>({
            query: (data) => ({
                url: `interestratefixation/saveexternalrating`,
                method: 'POST',
                body: data,
            }),
            invalidatesTags: ['ExternalRating'],
        }),
        getResetlist: builder.query<any, string>({
            query: (applId) => `interestratefixation/getresetlist/${applId}`,
            providesTags: ['ROIR']
        }),
        saveReset: builder.mutation<any, any[]>({
            query: (data) => ({
                url: `interestratefixation/savereset`,
                method: 'POST',
                body: data,
            }),
            invalidatesTags: ['ROID'],
        }),
        getDisbursementList: builder.query<any, string>({
            query: (applId) => `interestratefixation/getDisbursementlist/${applId}`,
            providesTags: ['ROID']
        }),
        saveDisbursement: builder.mutation<any, any[]>({
            query: (data) => ({
                url: `interestratefixation/savedisbursement`,
                method: 'POST',
                body: data,
            }),
            invalidatesTags: ['ROID'],
        }),
        getPresentProposal: builder.query<any, string>({
            query: (irfId) => `interestratefixation/getpresentproposal/${irfId}`,
            providesTags: ['PresentProposal']
        }),
        savePresentProposal: builder.mutation<any, any>({
            query: (data) => ({
                url: `interestratefixation/savepresentproposal`,
                method: 'POST',
                body: data,
            }),
            invalidatesTags: ['PresentProposal'],
        }),
        getSidbiExposure: builder.query<any, string>({
            query: (irfId) => `interestratefixation/getsidbiexposure/${irfId}`,
            providesTags: ['SidbiExposure']
        }),
        saveSidbiExposure: builder.mutation<any, any[]>({
            query: (data) => ({
                url: `interestratefixation/savesidbiexposure`,
                method: 'POST',
                body: data,
            }),
            invalidatesTags: ['SidbiExposure'],
        }),
        getSanctionRating: builder.query<any, string>({
            query: (irfId) => `interestratefixation/getsanctionrating/${irfId}`,
            providesTags: ['SanctionRating']
        }),
        saveSanctionRating: builder.mutation<any, any>({
            query: (data) => ({
                url: `interestratefixation/savesanctionrating`,
                method: 'POST',
                body: data,
            }),
            invalidatesTags: ['SanctionRating'],
        }),
        getApprovedStructure: builder.query<any, string>({
            query: (irfId) => `interestratefixation/getapprovedintrate/${irfId}`,
            providesTags: ['ApprovedStructure']
        }),
        saveApprovedStructure: builder.mutation<any, any>({
            query: (data) => ({
                url: `interestratefixation/saveapprovedintrate`,
                method: 'POST',
                body: data,
            }),
            invalidatesTags: ['ApprovedStructure'],
        }),

        getapplprestproposal: builder.query<any, string>({
            query: (irfId) => `interestratefixation/getapplprestproposal/${irfId}`,
            providesTags: ['ApprovedStructurePresent']
        }),

        saveApplPrestProposal: builder.mutation<any, any>({
            query: (data) => ({
                url: `interestratefixation/saveapplprestproposal`,
                method: 'POST',
                body: [data],
            }),
            invalidatesTags: ['ApprovedStructurePresent'],
        }),
    }),
});

export const {
    useGetFixationInterestRateQuery,
    useSaveInternalRatingMutation,
    useGetInternalRatingPresentQuery,
    useGetInternalRatingSanctionQuery,
    useGetExternalRatingSanctionQuery,
    useGetExternalRatingPresentQuery,
    useSaveExternalRatingMutation,
    useGetDisbursementListQuery,
    useGetResetlistQuery,
    useSaveDisbursementMutation,
    useSaveResetMutation,
    useGetPresentProposalQuery,
    useSavePresentProposalMutation,
    useGetSidbiExposureQuery,
    useSaveSidbiExposureMutation,
    useGetSanctionRatingQuery,
    useSaveSanctionRatingMutation,
    useGetApprovedStructureQuery,
    useSaveApprovedStructureMutation,
    useSaveApplPrestProposalMutation,
    useGetapplprestproposalQuery
    
} = interestRateFixationApi;

add new api to interestRateFixationApi 
and make dynamic means use formik etc take reference only from external rating how to save and get form validation etc make RateRequestCompany aldready shared api and request body 
for now ignore coment only that section amke add row,delete etc 
give me complete and proper code
