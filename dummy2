import { useState, useEffect } from "react";
import { FieldArray, Form, Formik } from 'formik';
import AutoSave from '../../../components/framework/AutoSave';
import { Button, Table, TableBody, TableCell, TableHead, TableRow } from "@mui/material";
import CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';
import {
    useGetRepsessionDetailQuery,
    useSaveRepsessionDetailsMutation
} from "../../../features/application-form/portfolioApi";
import { AdvanceTextBoxField } from "../../../components/framework/AdvanceTextBoxField";
import ConfirmationAlertDialog from "../../../models/application-form/ConfirmationAlertDialog";
import SaveAsIcon from '@mui/icons-material/SaveAs';
import { OnlineSnackbar } from "../../../components/shared/OnlineSnackbar";

const RepsessionDetails = ({ applId }: any) => {
    const [saveRepsessionDetails] = useSaveRepsessionDetailsMutation();
    const { data: repsessionData } = useGetRepsessionDetailQuery(applId, { refetchOnMountOrArgChange: true });
    const [initialValues, setInitialValues] = useState<any>({ data: [] });
    const [openConfirmation, setOpenConfirmation] = useState(false);
    const [formData, setFormData] = useState<any>("");
    const [actionVal, setActionVal] = useState<any>("");
    const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);
    const [snackMsg, setSnackMsg] = useState<any>("");
    const [severity, setSeverity] = useState<string>("success");

    useEffect(() => {
        if (repsessionData) {
            setInitialValues({ data: repsessionData.data });
        }
    }, [repsessionData, applId]);

    const handleSubmitApis = async (values: any) => {
        let finalValue = values?.data?.map((listData: any, index: number) => {
            return {
                ...listData,
                applId,
                slNo: index + 1
            };
        });

        try {
            if (await saveRepsessionDetails(finalValue).unwrap()) {
                setOpenSnackbar(true);
                setSeverity("success");
                if (finalValue?.[0]?.saveStatus === '02') {
                    setSnackMsg("Section submitted successfully");
                } else {
                    setSnackMsg("Record saved successfully");
                }
                return true;
            }
        } catch (error: any) {
            setOpenSnackbar(true);
            setSeverity("error");
            setSnackMsg("Failed to save: " + error?.message);
            return false;
        }
    };

    const handleClose = () => {
        setOpenSnackbar(false);
    };

    const handleCloseConfirmation = () => {
        setActionVal(null);
        setOpenConfirmation(false);
    };

    const handleSubmitConfirmation = (values: any) => {
        const finalValue = values?.data?.map((listData: any) => {
            return {
                ...listData,
                saveStatus: '02'
            };
        });
        setOpenConfirmation(false);
        handleSubmitApis(finalValue);
    };

    const handleSubmit = async (values: any) => {
        if (actionVal === '02') {
            setFormData(values);
            setOpenConfirmation(true);
        } else {
            handleSubmitApis(values);
        }
        setActionVal(null);
    };

    const handleClickSetAction = (action: any) => {
        setActionVal(action);
    };

    const calculation = (setFieldValue: any, values: any, column: string) => {
        if (values.data && values.data.length >= 3) {
            const row0Value = parseFloat(values.data[0][column]) || 0;
            const row1Value = parseFloat(values.data[1][column]) || 0;
            const total = row0Value - row1Value;
            setFieldValue(`data.2.${column}`, total.toFixed(2));
        }
    };

    return (
        <>
            <div className="custome-form">
                <ConfirmationAlertDialog
                    id={applId as unknown as number}
                    type={4}
                    open={openConfirmation}
                    handleClose={handleCloseConfirmation}
                    handleDelete={handleSubmitConfirmation}
                    values={formData}
                />
                <div className="wrap-inner-table" style={{ overflow: 'auto' }}>
                    <Formik
                        initialValues={initialValues}
                        onSubmit={handleSubmit}
                        enableReinitialize
                    >
                        {({ values, setFieldValue }) => {
                            return (
                                <Form>
                                    <fieldset disabled={values?.data?.[0]?.saveStatus === "02"}>
                                        {values?.data?.[0]?.saveStatus !== "02" &&
                                            <AutoSave handleSubmit={handleSubmit} values={values} debounceMs={10000} autoStyle={true} />
                                        }
                                        <FieldArray name="data">
                                            {() => (
                                                <Table sx={{ minWidth: 650 }} aria-label="simple table">
                                                    <TableHead>
                                                        <TableRow>
                                                            <TableCell><b>Sr. No.</b></TableCell>
                                                            <TableCell><b>Particulars</b></TableCell>
                                                            <TableCell><b>Val Ason T2</b></TableCell>
                                                            <TableCell><b>Val Ason T1</b></TableCell>
                                                            <TableCell><b>Val Ason T</b></TableCell>
                                                        </TableRow>
                                                    </TableHead>
                                                    <TableBody>
                                                        {values?.data?.map((item: any, index: number) => (
                                                            <TableRow
                                                                key={item?.slNo}
                                                                sx={item?.particulares === "Total Net" ? {
                                                                    backgroundColor: "gray.100",
                                                                    fontWeight: "bold"
                                                                } : {}}
                                                            >
                                                                <TableCell>{item?.slNo}</TableCell>
                                                                <TableCell>{item?.particulares}</TableCell>
                                                                <TableCell>
                                                                    <AdvanceTextBoxField
                                                                        name={`data.${index}.valAsonT2`}
                                                                        label={index === 2 ? "" : "Enter only Number"}
                                                                        onCustomChange={() => index < 2 && calculation(setFieldValue, values, 'valAsonT2')}
                                                                        type={'number'}
                                                                        disabled={index === 2}
                                                                    />
                                                                </TableCell>
                                                                <TableCell>
                                                                    <AdvanceTextBoxField
                                                                        name={`data.${index}.valAsonT1`}
                                                                        label={index === 2 ? "" : "Enter only Number"}
                                                                        onCustomChange={() => index < 2 && calculation(setFieldValue, values, 'valAsonT1')}
                                                                        type={'number'}
                                                                        disabled={index === 2}
                                                                    />
                                                                </TableCell>
                                                                <TableCell>
                                                                    <AdvanceTextBoxField
                                                                        name={`data.${index}.valAsonT`}
                                                                        label={index === 2 ? "" : "Enter only Number"}
                                                                        onCustomChange={() => index < 2 && calculation(setFieldValue, values, 'valAsonT')}
                                                                        type={'number'}
                                                                        disabled={index === 2}
                                                                    />
                                                                </TableCell>
                                                            </TableRow>
                                                        ))}
                                                    </TableBody>
                                                </Table>
                                            )}
                                        </FieldArray>
                                    </fieldset>
                                    {values?.data?.[0]?.saveStatus !== "02" &&
                                        <Button
                                            className="sbmtBtn psn_btn mt-3 mb-3 ms-3"
                                            type='submit'
                                            onClick={() => handleClickSetAction('01')}
                                            variant="contained"
                                        >
                                            Save <CheckCircleOutlineIcon />
                                        </Button>
                                    }
                                    {values?.data?.[0]?.saveStatus !== "02" &&
                                        <Button
                                            className="sbmtBtn sbmtBtn_scn psn_btn mt-3 mb-3 ms-3"
                                            type='submit'
                                            onClick={() => handleClickSetAction('02')}
                                            variant="contained"
                                        >
                                            Submit <SaveAsIcon />
                                        </Button>
                                    }
                                </Form>
                            );
                        }}
                    </Formik>
                </div>
            </div>
            <OnlineSnackbar
                open={openSnackbar}
                msg={snackMsg}
                severity={severity}
                handleSnackClose={handleClose}
            />
        </>
    );
};

export default RepsessionDetails;


















https://dev-nbfc.sidbi.in/refapi/appl/getRepsessionDtl/M000004374
{
  "data": [
    {
      "slNo": null,
      "applId": null,
      "particulares": "Asset obtained by taking possession of collatera",
      "valAsonT2": null,
      "valAsonT1": null,
      "valAsonT": null,
      "saveStatus": null
    },
    {
      "slNo": null,
      "applId": null,
      "particulares": "(-) Impairment Loss Allowance",
      "valAsonT2": null,
      "valAsonT1": null,
      "valAsonT": null,
      "saveStatus": null
    },
	{
      "slNo": null,
      "applId": null,
      "particulares": "Total Net",
      "valAsonT2": null,
      "valAsonT1": null,
      "valAsonT": null,
      "saveStatus": null
    }
  ],
  "message": "Success",
  "status": 200
}



import { useState, useEffect } from "react";
import { FieldArray, Form, Formik } from 'formik';
import AutoSave from '../../../components/framework/AutoSave';
import { Button, Table, TableBody, TableCell, TableHead, TableRow, } from "@mui/material";
import CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';
import {
    useGetmfiRegionDtlsQuery,
    useSaveMfiRegionValueWiseMutation
} from "../../../features/application-form/mfiActivityApi";
import { AdvanceTextBoxField } from "../../../components/framework/AdvanceTextBoxField";
import { InfoIcon } from "lucide-react";
import ConfirmationAlertDialog from "../../../models/application-form/ConfirmationAlertDialog";
import SaveAsIcon from '@mui/icons-material/SaveAs';
import { OnlineSnackbar } from "../../../components/shared/OnlineSnackbar";


const MFIActivityRegionWise = ({ applId }: any) => {
    const [saveMfiRegionwise] = useSaveMfiRegionValueWiseMutation()
    const { data: mfiRegionWise } = useGetmfiRegionDtlsQuery(applId, { refetchOnMountOrArgChange: true });
    const [initialValues, setInitialValues] = useState<any>({ data: [] });
    const [openConfirmation, setOpenConfirmation] = useState(false);
    const [formData, setFormData] = useState<any>("");
    const [actionVal, setActionVal] = useState<any>("");

    useEffect(() => {
        if (mfiRegionWise) {
            setInitialValues({ data: mfiRegionWise })
        }
    }, [mfiRegionWise, applId])


    const handleSubmitApis = async (values: any) => {
        let finalValue = values?.data?.map((listData: any, index: number) => {
            return {
                ...listData, applId, slNo: index + 1
            }
        })

        if (!finalValue) {
            finalValue = values?.map((listData: any, index: number) => {
                return {
                    ...listData, applId, slNo: index + 1
                }
            })
        }

        try {
            if(finalValue?.[3].fyOsPercent === "100.00" && finalValue?.[3].qtrOsPercent === "100.00"  || 
                finalValue?.[3].fyOsPercent === 100.00 && finalValue?.[3].qtrOsPercent === 100.00 
            ){
                if (await saveMfiRegionwise(finalValue).unwrap()) {
                    setOpenSnackbar(true);
                    setSeverity("success");
                    if (finalValue?.[0]?.saveStatus === '02') {
                        setSnackMsg("Section submitted successfully");
                    } else {
                        setSnackMsg("Record saved successfully");
                    }
                    return true;
                }
            }else{
                setOpenSnackbar(true);
                setSeverity("error");
                setSnackMsg("% of Fiscal & Quater Year can't be more than or less than 100%");
                return false;
            }
        } catch (error: any) {
            setOpenSnackbar(true);
            setSeverity("error");
            setSnackMsg("failed to save : " + error?.message);
            return false;
        }
    };

    const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);
    const [snackMsg, setSnackMsg] = useState<any>("");
    const [severity, setSeverity] = useState<string>("success");

    const handleClose = () => {
        setOpenSnackbar(false);
    };

    const handleCloseConfirmation = () => {
        setActionVal(null);
        setOpenConfirmation(false);
    };

    const handleSubmitConfirmation = (values: any) => {
        const finalValue = values?.data?.map((listData: any) => {
            return {
                ...listData, saveStatus: '02'
            }
        });
        setOpenConfirmation(false);
        handleSubmitApis(finalValue);
    };

    const handleSubmit = async (values: any) => {
        if (actionVal === '02') {
            setFormData(values);
            setOpenConfirmation(true);
        } else {
            handleSubmitApis(values);
        }
        setActionVal(null);
    };

    const handleClickSetAction = (action: any) => {
        setActionVal(action);
    };

    const calculation = (setFieldValue: any, values: any, currentIndex: number,
        currentVal: number, currentRowId: string) => {
        calculationTotal(setFieldValue, values, currentIndex, currentVal, currentRowId);
    }

    const calculationTotal = (setFieldValue: any, values: any, currentIndex: number,
        currentVal: number, currentRowId: string) => {
        const currentRowVal = currentVal;
        let total = 0;
        for (let i = 0; i < values.data.length - 1; i++) {
            if (i !== currentIndex) {
                total = (+total + +getRowValue(values, i, currentRowId))
            }
        }
        total = (+currentRowVal + +total);
        const totalPrefix = 'data.3.' + currentRowId;
        setFieldValue(`${totalPrefix}`, total.toFixed(2));
    }

    const getRowValue = (values: any, index: number, currentRowId: string) => {
        if (currentRowId === 'osAmtCrLastFy') {
            return values.data[index].osAmtCrLastFy;
        } else if (currentRowId === 'fyOsPercent') {
            return values.data[index].fyOsPercent;
        } else if (currentRowId === 'osAmtCrLastQtr') {
            return values.data[index].osAmtCrLastQtr;
        } else if (currentRowId === 'qtrOsPercent') {
            return values.data[index].qtrOsPercent;
        }
    }

    return (
        <>
            <div className="infos" style={{ display: "flex", alignItems: "flex-end" }}>
                <InfoIcon />
                <div className="infos_in" style={{ width: '220px' }}>100%- sum of all rows above incase of Percentage</div>
            </div>
            <div className="custome-form">
                <ConfirmationAlertDialog
                    id={applId as unknown as number}
                    type={4}
                    open={openConfirmation}
                    handleClose={handleCloseConfirmation}
                    handleDelete={handleSubmitConfirmation}
                    values={formData}
                />
                <div className="wrap-inner-table" style={{ overflow: 'auto' }}>
                    <Formik
                        initialValues={initialValues}
                        onSubmit={handleSubmit}
                        enableReinitialize
                    >
                        {({ values, setFieldValue }) => {
                            return (
                                <Form>
                                    <fieldset disabled={values?.data?.[0]?.saveStatus === "02"}>
                                        {values?.data?.[0]?.saveStatus !== "02" &&
                                            <AutoSave handleSubmit={handleSubmit} values={values} debounceMs={10000} autoStyle={true}/>
                                        }
                                        <FieldArray name="data">
                                            {() => (
                                                <Table sx={{ minWidth: 650 }} aria-label="simple table">
                                                    <TableHead>
                                                        <TableRow>
                                                            <TableCell><b>Sr. No.</b></TableCell>
                                                            <TableCell><b>Particulars</b></TableCell>
                                                            <TableCell><b>Outstanding Amount (in ₹ crore)-Last Fiscal</b></TableCell>
                                                            <TableCell align="center"><b>%</b></TableCell>
                                                            <TableCell><b>Outstanding Amount (in ₹ crore)-Latest Quarter</b></TableCell>
                                                            <TableCell align="center"><b>%</b></TableCell>
                                                        </TableRow>
                                                    </TableHead>
                                                    <TableBody>
                                                        {
                                                            values?.data?.map((item: any, index: any) => (
                                                                <TableRow key={item?.slNo}
                                                                    sx={item?.particulars === "Total" ? {
                                                                        backgroundColor: "gray.100",
                                                                        fontWeight: "bold"
                                                                    } : {}}>
                                                                    <TableCell>
                                                                        <p>{item?.slNo}</p>
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <p>{item?.particulars}</p>
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <AdvanceTextBoxField
                                                                            name={`data.${index}.osAmtCrLastFy`}
                                                                            label={index === 3 ? "" : "Enter only Number"}
                                                                            onCustomChange={(currentVal: any) =>
                                                                                calculation(setFieldValue, values, index,
                                                                                    currentVal, 'osAmtCrLastFy')}
                                                                            type={'number'}
                                                                            disabled={index === 3}
                                                                        />
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <AdvanceTextBoxField
                                                                            name={`data.${index}.fyOsPercent`}
                                                                            label={index === 3 ? "" : "Enter only Number"}
                                                                            onCustomChange={(currentVal: any) =>
                                                                                calculation(setFieldValue, values, index,
                                                                                    currentVal, 'fyOsPercent')}
                                                                            type={'number'}
                                                                            disabled={index === 3}
                                                                        />
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <AdvanceTextBoxField
                                                                            name={`data.${index}.osAmtCrLastQtr`}
                                                                            label={index === 3 ? "" : "Enter only Number"}
                                                                            onCustomChange={(currentVal: any) =>
                                                                                calculation(setFieldValue, values, index,
                                                                                    currentVal, 'osAmtCrLastQtr')}
                                                                            type={'number'}
                                                                            disabled={index === 3}
                                                                        />
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <AdvanceTextBoxField
                                                                            name={`data.${index}.qtrOsPercent`}
                                                                            label={index === 3 ? "" : "Enter only Number"}
                                                                            onCustomChange={(currentVal: any) =>
                                                                                calculation(setFieldValue, values, index,
                                                                                    currentVal, 'qtrOsPercent')}
                                                                            type={'number'}
                                                                            disabled={index === 3}
                                                                        />
                                                                    </TableCell>

                                                                </TableRow>
                                                            ))
                                                        }
                                                    </TableBody>
                                                </Table>
                                            )}
                                        </FieldArray>
                                    </fieldset>
                                    {values?.data?.[0]?.saveStatus !== "02" &&
                                        <Button className="sbmtBtn psn_btn mt-3 mb-3 ms-3" type='submit'
                                            onClick={() => handleClickSetAction('01')}
                                            variant="contained"> Save <CheckCircleOutlineIcon />
                                        </Button>
                                    }
                                    {values?.data?.[0]?.saveStatus !== "02" &&
                                        <Button className="sbmtBtn sbmtBtn_scn psn_btn mt-3 mb-3 ms-3" type='submit'
                                            onClick={() => handleClickSetAction('02')}
                                            variant="contained"> Submit <SaveAsIcon />
                                        </Button>
                                    }
                                </Form>
                            )
                        }}
                    </Formik>
                </div>
            </div>
            <OnlineSnackbar open={openSnackbar} msg={snackMsg} severity={severity}
                handleSnackClose={handleClose} />
        </>
    )
}

export default MFIActivityRegionWise;


import { createApi } from "@reduxjs/toolkit/query/react";
import { customBaseQuery } from "../../app/commonApi";

const BASE_PATH = 'appl';

export const portfolioApi = createApi({
    reducerPath: 'portfolioApi',
    baseQuery: customBaseQuery('refapi'),
    tagTypes: ['pFCutsAmtWise', 'pFCutsIntWise', 'pFCutsTenurWise', 'pFCutsStateWise', 'stateMaster','repsession'],
    endpoints: (builder) => ({
        getPFCutsAmtWiseFormData: builder.query<any, string>({
            query: (applId) => `${BASE_PATH}/PFCutsAmtWise/${applId}`,
            providesTags: ['pFCutsAmtWise']
        }),
        savePFCutsAmtWiseFormDetails: builder.mutation<any, any[]>({
            query: (data) => ({
                url: `${BASE_PATH}/PFCutsAmtWise/`,
                method: 'POST',
                body: data,
            }),
            invalidatesTags: ['pFCutsAmtWise'],
        }),

        getPFCutsIntWiseFormData: builder.query<any, string>({
            query: (applId) => `${BASE_PATH}/PFCutsIntWise/${applId}`,
            providesTags: ['pFCutsIntWise']
        }),

        savepFCutsIntWiseFormDetails: builder.mutation<any, any[]>({
            query: (data) => ({
                url: `${BASE_PATH}/PFCutsIntWise/`,
                method: 'POST',
                body: data,
            }),
            invalidatesTags: ['pFCutsIntWise'],
        }),

        getpFCutsTenurWiseFormData: builder.query<any, string>({
            query: (applId) => `${BASE_PATH}/PFCutsTenurWise/${applId}`,
            providesTags: ['pFCutsTenurWise']
        }),

        savepFCutsTenurWiseFormDetails: builder.mutation<any, any[]>({
            query: (data) => ({
                url: `${BASE_PATH}/PFCutsTenurWise/`,
                method: 'POST',
                body: data,
            }),
            invalidatesTags: ['pFCutsTenurWise'],
        }),


        getpFCutsStateWiseFormData: builder.query<any, string>({
            query: (applId) => `${BASE_PATH}/PFCutsStateWise/${applId}`,
            transformResponse: (response: any) => {
                return {
                    data: response
                }
            },
            providesTags: ['pFCutsStateWise']
        }),

        savepFCutsStateWiseFormDetails: builder.mutation<any, any[]>({
            query: (data) => ({
                url: `${BASE_PATH}/PFCutsStateWise/`,
                method: 'POST',
                body: data,
            }),
            invalidatesTags: ['pFCutsStateWise'],
        }),

        deletepFCutsStateWiseById: builder.mutation<any, any>({
            query: ({ applId, index }) => ({
                url: `${BASE_PATH}/PFCutsStateWise/${applId}/${index}`,
                method: 'DELETE',
            }),
            invalidatesTags: ["pFCutsStateWise"],
        }),

        getStateMaster: builder.query<any, string>({
            query: () => `/mstr/getStateMaster`,
            providesTags: ['stateMaster']
        }),

        getRepsessionDetail: builder.query<any, string>({
            query: (applId) => `${BASE_PATH}/getRepsessionDtl/${applId}`,
            providesTags: ['repsession']
        }),

        saveRepsessionDetails: builder.mutation<any, any[]>({
            query: (data) => ({
                url: `${BASE_PATH}/saveRepsessionDtl/`,
                method: 'POST',
                body: data,
            }),
            invalidatesTags: ['repsession'],
        }),


    }),
});

export const {
    useGetPFCutsAmtWiseFormDataQuery,
    useSavePFCutsAmtWiseFormDetailsMutation,
    useSavepFCutsIntWiseFormDetailsMutation,
    useGetPFCutsIntWiseFormDataQuery,
    useGetpFCutsTenurWiseFormDataQuery,
    useSavepFCutsTenurWiseFormDetailsMutation,
    useGetpFCutsStateWiseFormDataQuery,
    useSavepFCutsStateWiseFormDetailsMutation,
    useDeletepFCutsStateWiseByIdMutation,
    useGetStateMasterQuery,
    useGetRepsessionDetailQuery,
    useSaveRepsessionDetailsMutation
} = portfolioApi;


i want new component like MFIActivityRegionWise take reference same here also in last all total will come but api will be used here  useGetRepsessionDetailQuery,
 useSaveRepsessionDetailsMutation and already shared new payload and name will be as per payload so it will properly work give me complete and proper code 
