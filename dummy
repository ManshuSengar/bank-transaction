import React from 'react';
import {
  Table, TableBody, TableCell, TableHead, TableRow, Button, IconButton, Grid
} from "@mui/material";
import DeleteIcon from '@mui/icons-material/Delete';
import AddCircleIcon from '@mui/icons-material/AddCircle';
import { Formik, FieldArray, Form } from 'formik';
import * as Yup from 'yup';
import { useAppSelector } from '../../../app/hooks';
import {
  useGetExternalRatingSanctionQuery,
  useGetExternalRatingPresentQuery,
  useSaveExternalRatingMutation
} from '../../../features/appraisal/interestRateFixationApi';
import { TextBoxField } from '../../../components/framework/TextBoxField';
import { EnhancedDropDown } from '../../../components/framework/EnhancedDropDown';
import { AdvanceDatePickerField } from '../../../components/framework/EnhancedComponents';
import moment from 'moment';
import Cookies from 'js-cookie';
import NbfcSnackbar from '../../../components/shared/NbfcSnackbar';
import { useState } from 'react';

const RfExternalRating = () => {
  const { applId, currentModuleStatus } = useAppSelector((state) => state.userStore);
  const loginData: any = Cookies.get("user") || null;
  const loginCookiesData: any = loginData ? JSON.parse(loginData) : {};

  // Fetch sanction time ratings (read-only)
  const { data: sanctionRatings, isLoading: isLoadingSanction } = useGetExternalRatingSanctionQuery(applId, {
    skip: !applId,
    refetchOnMountOrArgChange: true,
  });

  // Fetch latest ratings (editable)
  const { data: presentRatings, isLoading: isLoadingPresent } = useGetExternalRatingPresentQuery(applId, {
    skip: !applId,
    refetchOnMountOrArgChange: true,
  });

  const [saveExternalRating] = useSaveExternalRatingMutation();

  // Snackbar state for feedback
  const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);
  const [snackMsg, setSnackMsg] = useState<string>("");
  const [severity, setSeverity] = useState<"success" | "error">("success");

  const initialValues = {
    ratings: presentRatings || [],
  };

  const validationSchema = Yup.object().shape({
    ratings: Yup.array().of(
      Yup.object().shape({
        agencyName: Yup.string().required("Required"),
        instrument: Yup.string().required("Required"),
        amtCr: Yup.number().typeError("Must be a number").required("Required"),
        ratingDesc: Yup.string().required("Required"),
        outLook: Yup.string().required("Required"),
        ratingDt: Yup.date().required("Required"),
      })
    ),
  });

  const handleSubmit = async (values: any) => {
    try {
      const finalValue = values.ratings.map((rating: any, index: number) => ({
        ...rating,
        applId,
        id: index + 1,
        saveStatus: '01', // Assuming '01' is for save, adjust as needed
      }));
      await saveExternalRating(finalValue).unwrap();
      setOpenSnackbar(true);
      setSeverity("success");
      setSnackMsg("Latest External Rating saved successfully");
    } catch (error) {
      console.error("Error saving latest external rating:", error);
      setOpenSnackbar(true);
      setSeverity("error");
      setSnackMsg("Failed to save Latest External Rating");
    }
  };

  const handleSnackClose = () => {
    setOpenSnackbar(false);
  };

  const isEditable = (currentModuleStatus?.appStatus === 'NW' || currentModuleStatus?.appStatus === 'SB') &&
    loginCookiesData?.regType === "Maker";

  return (
    <div className="wrap-inner-table mt-0">
      {/* Sanction Time External Rating (Read-Only) */}
      <h3>External Rating at the Time of Sanction</h3>
      {isLoadingSanction ? (
        <p>Loading...</p>
      ) : (
        <Table sx={{ minWidth: 650 }} aria-label="sanction external ratings table">
          <TableHead>
            <TableRow>
              <TableCell><b>Name of Rating Agency</b></TableCell>
              <TableCell><b>Instrument</b></TableCell>
              <TableCell><b>Amount (in ₹ crore)</b></TableCell>
              <TableCell><b>Rating</b></TableCell>
              <TableCell><b>Outlook</b></TableCell>
              <TableCell><b>Date of Rating</b></TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {sanctionRatings?.length > 0 ? (
              sanctionRatings.map((rating: any, index: number) => (
                <TableRow key={index}>
                  <TableCell>{rating.agencyName}</TableCell>
                  <TableCell>{rating.instrument}</TableCell>
                  <TableCell>{rating.amtCr}</TableCell>
                  <TableCell>{rating.ratingDesc}</TableCell>
                  <TableCell>{rating.outLook}</TableCell>
                  <TableCell>{moment(rating.ratingDt).format("DD-MM-YYYY")}</TableCell>
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell colSpan={6}>No data available</TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      )}

      {/* Latest External Rating (Editable) */}
      <h3>Latest External Rating</h3>
      {isLoadingPresent ? (
        <p>Loading...</p>
      ) : (
        <Formik
          initialValues={initialValues}
          validationSchema={validationSchema}
          onSubmit={handleSubmit}
          enableReinitialize={true}
        >
          {({ values, setFieldValue }) => (
            <Form>
              <FieldArray name="ratings">
                {({ push, remove }) => (
                  <>
                    {isEditable && (
                      <Button
                        type="button"
                        size="small"
                        variant="contained"
                        color="primary"
                        className="text-capitalize mt-1 mb-3"
                        onClick={() => push({
                          applId,
                          agencyName: "",
                          instrument: "",
                          amtCr: "",
                          ratingDesc: "",
                          outLook: "",
                          ratingDt: null,
                        })}
                      >
                        Add <AddCircleIcon />
                      </Button>
                    )}
                    <Table sx={{ minWidth: 650 }} aria-label="latest external ratings table">
                      <TableHead>
                        <TableRow>
                          <TableCell><b>Name of Rating Agency</b></TableCell>
                          <TableCell><b>Instrument</b></TableCell>
                          <TableCell><b>Amount (in ₹ crore)</b></TableCell>
                          <TableCell><b>Rating</b></TableCell>
                          <TableCell><b>Outlook</b></TableCell>
                          <TableCell><b>Date of Rating</b></TableCell>
                          {isEditable && <TableCell><b>Actions</b></TableCell>}
                        </TableRow>
                      </TableHead>
                      <TableBody>
                        {values.ratings.length > 0 ? (
                          values.ratings.map((rating: any, index: number) => (
                            <TableRow key={index}>
                              <TableCell>
                                <EnhancedDropDown
                                  label=""
                                  name={`ratings.${index}.agencyName`}
                                  domain="mstr/getRatingAgency"
                                  disabled={!isEditable}
                                />
                              </TableCell>
                              <TableCell>
                                <TextBoxField
                                  label=""
                                  name={`ratings.${index}.instrument`}
                                  disabled={!isEditable}
                                />
                              </TableCell>
                              <TableCell>
                                <TextBoxField
                                  label=""
                                  name={`ratings.${index}.amtCr`}
                                  type="number"
                                  disabled={!isEditable}
                                />
                              </TableCell>
                              <TableCell>
                                <EnhancedDropDown
                                  label=""
                                  name={`ratings.${index}.ratingDesc`}
                                  domain="mstr/getRatingCode"
                                  disabled={!isEditable}
                                />
                              </TableCell>
                              <TableCell>
                                <TextBoxField
                                  label=""
                                  name={`ratings.${index}.outLook`}
                                  disabled={!isEditable}
                                />
                              </TableCell>
                              <TableCell>
                                <AdvanceDatePickerField
                                  label=""
                                  name={`ratings.${index}.ratingDt`}
                                  onChange={(date: Date) => setFieldValue(`ratings.${index}.ratingDt`, date)}
                                  disableFuture={true}
                                  disabled={!isEditable}
                                />
                              </TableCell>
                              {isEditable && (
                                <TableCell>
                                  <IconButton
                                    aria-label="delete"
                                    color="error"
                                    onClick={() => remove(index)}
                                    disabled={values.ratings.length === 1}
                                  >
                                    <DeleteIcon />
                                  </IconButton>
                                </TableCell>
                              )}
                            </TableRow>
                          ))
                        ) : (
                          <TableRow>
                            <TableCell colSpan={isEditable ? 7 : 6}>No data available</TableCell>
                          </TableRow>
                        )}
                      </TableBody>
                    </Table>
                    {isEditable && (
                      <Grid item xs={12} sx={{ mt: 2 }}>
                        <Button type="submit" variant="contained" color="primary">
                          Save
                        </Button>
                      </Grid>
                    )}
                  </>
                )}
              </FieldArray>
            </Form>
          )}
        </Formik>
      )}

      <NbfcSnackbar
        open={openSnackbar}
        msg={snackMsg}
        severity={severity}
        handleSnackClose={handleSnackClose}
        submitCall={false}
      />
    </div>
  );
};

export default RfExternalRating;
