[
  {
    "id": 0,
    "irfId": "string",
    "slNo": 0,
    "intRatingFY": "string",
    "intRatingDate": "2025-06-24",
    "intRatingScore": "string",
    "intRating": "string",
    "saveStatus": "string",
    "ratingType": "SANCTION",
    "comments": "string"
  }
]

import React, { useState } from 'react';
import {
  Table, TableBody, TableCell, TableHead, TableRow, Button, IconButton, Grid
} from "@mui/material";
import DeleteIcon from '@mui/icons-material/Delete';
import AddCircleIcon from '@mui/icons-material/AddCircle';
import CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';
import { Formik, FieldArray, Form } from 'formik';
import * as Yup from 'yup';
import moment from 'moment';
import {
  useGetInternalRatingSanctionQuery,
  useGetInternalRatingPresentQuery,
  useSaveInternalRatingMutation
} from '../../../features/monitoring/interestRateFixationApi';
import { TextBoxField } from '../../../components/framework/TextBoxField';
import { AdvanceDatePickerField } from '../../../components/framework/EnhancedComponents';
import NbfcSnackbar from '../../../components/shared/NbfcSnackbar';
import AutoSave from '../../../components/framework/AutoSave';
import TextAreaAuto from '../../../components/framework/TextAreaAuto';

const RfInternalRating = ({ irfId }: any) => {
  const { data: sanctionRatings, isLoading: isLoadingSanction } = useGetInternalRatingSanctionQuery(irfId, {
    skip: !irfId,
    refetchOnMountOrArgChange: true,
  });

  const { data: presentRatings, isLoading: isLoadingPresent } = useGetInternalRatingPresentQuery(irfId, {
    skip: !irfId,
    refetchOnMountOrArgChange: true,
  });

  const [saveInternalRating] = useSaveInternalRatingMutation();

  const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);
  const [snackMsg, setSnackMsg] = useState<string>("");
  const [severity, setSeverity] = useState<"success" | "error">("success");

  const initialValues = {
    ratings: presentRatings || [],
  };

  // const validationSchema = Yup.object().shape({
  //   ratings: Yup.array().of(
  //     Yup.object().shape({
  //       intRatingFY: Yup.string().required("Required"),
  //       intRatingScore: Yup.string().required("Required"),
  //       comments: Yup.string().required("Required"),
  //     })
  //   ),
  // });

  const handleSubmit = async (values: any) => {
    try {
      const finalValue = values.ratings.map((rating: any, index: number) => ({
        ...rating,
        irfId,
        id: index + 1,
        slNo:index+1,
        saveStatus: '01',
        intRatingType: 'present',
      }));
      await saveInternalRating(finalValue).unwrap();
      setOpenSnackbar(true);
      setSeverity("success");
      setSnackMsg("Latest Internal Rating saved successfully");
    } catch (error) {
      console.error("Error saving latest internal rating:", error);
      setOpenSnackbar(true);
      setSeverity("error");
      setSnackMsg("Failed to save Latest Internal Rating");
    }
  };

  const handleSnackClose = () => {
    setOpenSnackbar(false);
  };

  return (
    <div className="wrap-inner-table mt-0">
      <Table sx={{ minWidth: 650 }} aria-label="internal ratings table">
        <TableHead>
          <TableRow>
            <TableCell style={{ width: '6%' }}><b>Sr. No.</b></TableCell>
            <TableCell style={{ width: '20%' }}><b>Particulars</b></TableCell>
            <TableCell><b>Remarks</b></TableCell>
          </TableRow>
        </TableHead>
        <TableBody>
          <TableRow>
            <TableCell>1</TableCell>
            <TableCell>Internal Score - At Sanction</TableCell>
            <TableCell>
              {isLoadingSanction ? (
                <p>Loading...</p>
              ) : (
                <Table sx={{ minWidth: 650 }} aria-label="sanction internal ratings table">
                  <TableHead>
                    <TableRow>
                      <TableCell><b>FY</b></TableCell>
                      <TableCell><b>Internal Score</b></TableCell>
                      <TableCell><b>Date of Rating</b></TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {sanctionRatings?.length > 0 ? (
                      sanctionRatings.map((rating: any, index: number) => (
                        <TableRow key={index}>
                          <TableCell>{rating.intRatingFY}</TableCell>
                          <TableCell>{rating.intRatingScore}</TableCell>
                          <TableCell>{moment(rating.intRatingDate).format("DD-MM-YYYY")}</TableCell>
                        </TableRow>
                      ))
                    ) : (
                      <TableRow>
                        <TableCell colSpan={3}>No data available</TableCell>
                      </TableRow>
                    )}
                  </TableBody>
                </Table>
              )}
            </TableCell>
          </TableRow>

          <TableRow>
            <TableCell>2</TableCell>
            <TableCell>Internal Score - at Last Review / Present</TableCell>
            <TableCell>
              {isLoadingPresent ? (
                <p>Loading...</p>
              ) : (
                <Formik
                  initialValues={initialValues}
                  // validationSchema={validationSchema}
                  onSubmit={handleSubmit}
                  enableReinitialize={true}
                >
                  {({ values, setFieldValue }) => (
                    <Form>
                      <AutoSave debounceMs={5000} values={values} handleSubmit={handleSubmit} />
                      <FieldArray name="ratings">
                        {({ push, remove }) => (
                          <>
                            <Button
                              type="button"
                              size='small'
                              className='text-capitalize mt-1 mb-3 saveBtn'
                              variant="contained"
                              color="primary"
                              style={{ display: 'block' }}
                              onClick={() => push({
                                irfId,
                                intRatingFY: "",
                                intRatingScore: "",
                                intRatingDate: null,
                              })}
                            >
                              Add <AddCircleIcon />
                            </Button>
                            <Table sx={{ minWidth: 650 }} aria-label="latest internal ratings table">
                              <TableHead>
                                <TableRow>
                                  <TableCell><b>FY</b></TableCell>
                                  <TableCell><b>Internal Score</b></TableCell>
                                  <TableCell><b>Date of Rating</b></TableCell>
                                  <TableCell><b>Actions</b></TableCell>
                                </TableRow>
                              </TableHead>
                              <TableBody>
                                {values.ratings.length > 0 ? (
                                  values.ratings.map((rating: any, index: number) => (
                                    <TableRow key={index}>
                                      <TableCell>
                                        <TextBoxField
                                          label=""
                                          name={`ratings.${index}.intRatingFY`}
                                        />
                                      </TableCell>
                                      <TableCell>
                                        <TextBoxField
                                          label=""
                                          name={`ratings.${index}.intRatingScore`}
                                        />
                                      </TableCell>
                                      <TableCell>
                                        <TextAreaAuto
                                          label=""
                                          name={`ratings.${index}.comments`}
                                        />
                                      </TableCell>
                                      <TableCell>
                                        <IconButton
                                          aria-label="delete"
                                          color="error"
                                          onClick={() => remove(index)}
                                          disabled={values.ratings.length === 1}
                                        >
                                          <DeleteIcon />
                                        </IconButton>
                                      </TableCell>
                                    </TableRow>
                                  ))
                                ) : (
                                  <TableRow>
                                    <TableCell colSpan={4}>No data available</TableCell>
                                  </TableRow>
                                )}
                              </TableBody>
                            </Table>
                            <Grid item xs={12} sx={{ mt: 2 }}>
                              <Button
                                className="sbmtBtn mt-0 mb-3 ms-2 me-2"
                                type='submit'
                                variant="contained"
                              >
                                Save <CheckCircleOutlineIcon />
                              </Button>
                            </Grid>
                          </>
                        )}
                      </FieldArray>
                    </Form>
                  )}
                </Formik>
              )}
            </TableCell>
          </TableRow>
        </TableBody>
      </Table>

      <NbfcSnackbar
        open={openSnackbar}
        msg={snackMsg}
        severity={severity}
        handleSnackClose={handleSnackClose}
        submitCall={false}
      />
    </div>
  );
};

export default RfInternalRating;


import React from 'react';
import {
  Table, TableBody, TableCell, TableHead, TableRow, Button, IconButton, Grid
} from "@mui/material";
import DeleteIcon from '@mui/icons-material/Delete';
import AddCircleIcon from '@mui/icons-material/AddCircle';
import { Formik, FieldArray, Form } from 'formik';
import * as Yup from 'yup';
import { useAppSelector } from '../../../app/hooks';
import {
  useGetExternalRatingSanctionQuery,
  useGetExternalRatingPresentQuery,
  useSaveExternalRatingMutation
} from '../../../features/monitoring/interestRateFixationApi';
import CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';
import { TextBoxField } from '../../../components/framework/TextBoxField';
import { EnhancedDropDown } from '../../../components/framework/EnhancedDropDown';
import { AdvanceDatePickerField } from '../../../components/framework/EnhancedComponents';
import moment from 'moment';
import NbfcSnackbar from '../../../components/shared/NbfcSnackbar';
import { useState } from 'react';
import AutoSave from '../../../components/framework/AutoSave';

const RfExternalRating = ({ irfId }: any) => {

  const { data: sanctionRatings, isLoading: isLoadingSanction } = useGetExternalRatingSanctionQuery(irfId, {
    skip: !irfId,
    refetchOnMountOrArgChange: true,
  });

  const { data: presentRatings, isLoading: isLoadingPresent } = useGetExternalRatingPresentQuery(irfId, {
    skip: !irfId,
    refetchOnMountOrArgChange: true,
  });

  const [saveExternalRating] = useSaveExternalRatingMutation();

  const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);
  const [snackMsg, setSnackMsg] = useState<string>("");
  const [severity, setSeverity] = useState<"success" | "error">("success");

  const initialValues = {
    ratings: presentRatings || [],
  };

  const validationSchema = Yup.object().shape({
    ratings: Yup.array().of(
      Yup.object().shape({
        agencyName: Yup.string().required("Required"),
        instrument: Yup.string().required("Required"),
        amount: Yup.number().typeError("Must be a number").required("Required"),
        prevRating: Yup.string().required("Required"),
        outlook: Yup.string().required("Required"),
        ratingDate: Yup.string().required("Required"),
      })
    ),
  });

  const handleSubmit = async (values: any) => {
    try {
      const finalValue = values.ratings.map((rating: any, index: number) => ({
        ...rating,
        irfId,
        id: index + 1,
        saveStatus: '01',
      }));
      await saveExternalRating(finalValue).unwrap();
      setOpenSnackbar(true);
      setSeverity("success");
      setSnackMsg("Latest External Rating saved successfully");
    } catch (error) {
      console.error("Error saving latest external rating:", error);
      setOpenSnackbar(true);
      setSeverity("error");
      setSnackMsg("Failed to save Latest External Rating");
    }
  };

  const handleSnackClose = () => {
    setOpenSnackbar(false);
  };

  return (
    <div className="wrap-inner-table mt-0">
      <Table sx={{ minWidth: 650 }} aria-label="external ratings table">
        <TableHead>
          <TableRow>
            <TableCell style={{ width: '6%' }}><b>Sr. No.</b></TableCell>
            <TableCell style={{ width: '20%' }}><b>Particulars</b></TableCell>
            <TableCell><b>Remarks</b></TableCell>
          </TableRow>
        </TableHead>
        <TableBody>
          <TableRow>
            <TableCell>1</TableCell>
            <TableCell>External rating at the time of sanction</TableCell>
            <TableCell>
              {isLoadingSanction ? (
                <p>Loading...</p>
              ) : (
                <Table sx={{ minWidth: 650 }} aria-label="sanction external ratings table">
                  <TableHead>
                    <TableRow>
                      <TableCell><b>Name of Rating Agency</b></TableCell>
                      <TableCell><b>Instrument</b></TableCell>
                      <TableCell><b>Amount (in ₹ crore)</b></TableCell>
                      <TableCell><b>Rating</b></TableCell>
                      <TableCell><b>Outlook</b></TableCell>
                      <TableCell><b>Date of Rating</b></TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {sanctionRatings?.length > 0 ? (
                      sanctionRatings.map((rating: any, index: number) => (
                        <TableRow key={index}>
                          <TableCell>{rating.agencyName}</TableCell>
                          <TableCell>{rating.instrument}</TableCell>
                          <TableCell>{rating.amount}</TableCell>
                          <TableCell>{rating.prevRating}</TableCell>
                          <TableCell>{rating.outlook}</TableCell>
                          <TableCell>{moment(rating.ratingDate).format("DD-MM-YYYY")}</TableCell>
                        </TableRow>
                      ))
                    ) : (
                      <TableRow>
                        <TableCell colSpan={6}>No data available</TableCell>
                      </TableRow>
                    )}
                  </TableBody>
                </Table>
              )}
            </TableCell>
          </TableRow>

          <TableRow>
            <TableCell>2</TableCell>
            <TableCell>Latest External Rating</TableCell>
            <TableCell>
              {isLoadingPresent ? (
                <p>Loading...</p>
              ) : (
                <Formik
                  initialValues={initialValues}
                  validationSchema={validationSchema}
                  onSubmit={handleSubmit}
                  enableReinitialize={true}
                >
                  {({ values, setFieldValue }) => (
                    <Form>
                      <AutoSave debounceMs={5000} values={values} handleSubmit={handleSubmit} />
                      <FieldArray name="ratings">
                        {({ push, remove }) => (
                          <>
                            <Button type="button" size='small' className='text-capitalize mt-1 mb-3  saveBtn'
                              variant="contained" color="primary" style={{ display: 'block' }}
                              onClick={() => push({
                                irfId,
                                agencyName: "",
                                instrument: "",
                                amount: "",
                                prevRating: "",
                                outlook: "",
                                ratingDate: null,
                              })}
                            >
                              Add <AddCircleIcon />
                            </Button>
                            <Table sx={{ minWidth: 650 }} aria-label="latest external ratings table">
                              <TableHead>
                                <TableRow>
                                  <TableCell><b>Name of Rating Agency</b></TableCell>
                                  <TableCell><b>Instrument</b></TableCell>
                                  <TableCell><b>Amount (in ₹ crore)</b></TableCell>
                                  <TableCell><b>Rating</b></TableCell>
                                  <TableCell><b>Outlook</b></TableCell>
                                  <TableCell><b>Date of Rating</b></TableCell>
                                  <TableCell><b>Actions</b></TableCell>
                                </TableRow>
                              </TableHead>
                              <TableBody>
                                {values.ratings.length > 0 ? (
                                  values.ratings.map((rating: any, index: number) => (
                                    <TableRow key={index}>
                                      <TableCell>
                                        <EnhancedDropDown
                                          label=""
                                          name={`ratings.${index}.agencyName`}
                                          domain="mstr/getRatingAgency"
                                        />
                                      </TableCell>
                                      <TableCell>
                                        <TextBoxField
                                          label=""
                                          name={`ratings.${index}.instrument`}
                                        />
                                      </TableCell>
                                      <TableCell>
                                        <TextBoxField
                                          label=""
                                          name={`ratings.${index}.amount`}
                                          type="number"
                                        />
                                      </TableCell>
                                      <TableCell>
                                        <EnhancedDropDown
                                          label=""
                                          name={`ratings.${index}.prevRating`}
                                          domain="mstr/getRatingCode"
                                        />
                                      </TableCell>
                                      <TableCell>
                                        <TextBoxField
                                          label=""
                                          name={`ratings.${index}.outlook`}
                                        />
                                      </TableCell>
                                      <TableCell>
                                        <AdvanceDatePickerField
                                          label=""
                                          name={`ratings.${index}.ratingDate`}
                                          disableFuture={true}
                                        />
                                      </TableCell>
                                      <TableCell>
                                        <IconButton
                                          aria-label="delete"
                                          color="error"
                                          onClick={() => remove(index)}
                                          disabled={values.ratings.length === 1}
                                        >
                                          <DeleteIcon />
                                        </IconButton>
                                      </TableCell>
                                    </TableRow>
                                  ))
                                ) : (
                                  <TableRow>
                                    <TableCell colSpan={7}>No data available</TableCell>
                                  </TableRow>
                                )}
                              </TableBody>
                            </Table>
                            <Grid item xs={12} sx={{ mt: 2 }}>
                              <Button
                                className="sbmtBtn mt-0 mb-3 ms-2 me-2"
                                type='submit'
                                variant="contained"> Save <CheckCircleOutlineIcon />
                              </Button>
                            </Grid>
                          </>
                        )}
                      </FieldArray>
                    </Form>
                  )}
                </Formik>
              )}
            </TableCell>
          </TableRow>
        </TableBody>
      </Table>

      <NbfcSnackbar
        open={openSnackbar}
        msg={snackMsg}
        severity={severity}
        handleSnackClose={handleSnackClose}
        submitCall={false}
      />
    </div>
  );
};

export default RfExternalRating;


in this now Internal score – At sanction will be also like Internal score – at last review  for get that present api will work but at time of save same api will work only ratingType we pass ratingType 

same do in [
  {
    "id": 0,
    "irfId": "string",
    "agencyName": "string",
    "instrument": "string",
    "amount": 0,
    "ratingDate": "2025-06-24",
    "ratingId": 0,
    "prevRating": "string",
    "prevRatingDate": "2025-06-24",
    "precPrevRating": "string",
    "precPrevDate": "2025-06-24",
    "saveStatus": "string",
    "ratingDesc": "string",
    "outlook": "string",
    "ratingType": "SANCTION"
  }
]
RfExternalRating 
same do in external rating also that External rating at the time of sanction that will be now dyanmic give me complete and proper code 


