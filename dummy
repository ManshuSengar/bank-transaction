import React, { useState } from 'react';
import {
    Table, TableBody, TableCell, TableHead, TableRow, Button, Grid, FormControl, InputLabel, Select, MenuItem, SelectChangeEvent
} from "@mui/material";
import CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';
import { Formik, Form } from 'formik';
import * as Yup from 'yup';
import {
    useGetRecommendationsQuery,
    useSaveRecommendationsMutation,
    useGetMemorandumTxtQuery,
    useSaveMemorandumTxtMutation
} from '../../../features/monitoring/interestRateFixationApi';
import NbfcSnackbar from '../../../components/shared/NbfcSnackbar';
import { TextBoxField } from '../../../components/framework/TextBoxField';
import { AdvanceDatePickerField } from '../../../components/framework/EnhancedComponents';
import AutoSave from '../../../components/framework/AutoSave';
import { EnhancedDropDown } from '../../../components/framework/EnhancedDropDown';
import { RichTextField } from '../../../components/framework/RichTextField';

const Recommendation = ({ irfId }: any) => {
    const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);
    const [snackMsg, setSnackMsg] = useState<string>("");
    const [severity, setSeverity] = useState<"success" | "error">("success");
    const [borrower, setBorrower] = useState('');

    const { data: recommendations, isLoading: isLoadingRecommendations } = useGetRecommendationsQuery(irfId, {
        skip: !irfId,
        refetchOnMountOrArgChange: true,
    });

    const { data: memorandumData, isLoading: isLoadingMemorandum } = useGetMemorandumTxtQuery(irfId, {
        skip: !irfId,
        refetchOnMountOrArgChange: true,
    });

    const [saveRecommendations] = useSaveRecommendationsMutation();
    const [saveMemorandumTxt] = useSaveMemorandumTxtMutation();

    const validationSchemaRecommendations = Yup.object().shape({
        recommendation: Yup.object().shape({
            scheme: Yup.string().required("Required"),
            amount: Yup.number().typeError("Must be a number").required("Required").positive("Must be positive"),
            tenure: Yup.number().typeError("Must be a number").required("Required").positive("Must be a number"),
            applicableIntRate: Yup.number().typeError("Must be a number").required("Required").positive("Must be positive"),
            discretion: Yup.number().typeError("Must be a number").required("Required"),
            roiRecommended: Yup.string().required("Required"),
            resetClause: Yup.string().required("Required"),
            nextResetDt: Yup.string().required("Required"),
        }),
    });

    // Validation schema for Validity, DoP, and Discretionary Powers
    const validationSchemaMemorandum = Yup.object().shape({
        irValidity: Yup.string().required("Required"),
        dop: Yup.string().required("Required"),
        dopComments: Yup.string().required("Required"),
        discPowers: Yup.string().required("Required"),
    });

    // Handle submit for Interest Rate table
    const handleSubmitRecommendations = async (values: any) => {
        try {
            const finalValue = [{
                ...values.recommendation,
                irfId,
                slNo: 1,
                saveStatus: '01',
            }];
            await saveRecommendations(finalValue).unwrap();
            setOpenSnackbar(true);
            setSeverity("success");
            setSnackMsg("Recommendation saved successfully");
        } catch (error) {
            console.error("Error saving recommendation:", error);
            setOpenSnackbar(true);
            setSeverity("error");
            setSnackMsg("Failed to save Recommendation");
        }
    };

    // Handle submit for Validity, DoP, and Discretionary Powers
    const handleSubmitMemorandum = async (values: any) => {
        try {
            const finalValue = {
                ...values,
                irfId,
                saveStatus: '01',
                verticalComments: values.verticalComments || "",
                recommendation: values.recommendation || "",
                preprosalComment: values.preprosalComment || "",
                rateReqComment: values.rateReqComment || ""
            };
            await saveMemorandumTxt(finalValue).unwrap();
            setOpenSnackbar(true);
            setSeverity("success");
            setSnackMsg("Memorandum saved successfully");
        } catch (error) {
            console.error("Error saving memorandum:", error);
            setOpenSnackbar(true);
            setSeverity("error");
            setSnackMsg("Failed to save Memorandum");
        }
    };

    const handleSnackClose = () => {
        setOpenSnackbar(false);
    };

    const handleChangeBrw = (event: SelectChangeEvent) => {
        setBorrower(event.target.value);
    };

    return (
        <div className="wrap-inner-table mt-4">
            {(isLoadingRecommendations || isLoadingMemorandum) ? (
                <p>Loading...</p>
            ) : (
                <>
                    {/* Form for Interest Rate Table */}
                    <Formik
                        initialValues={{
                            recommendation: recommendations?.[0] || {
                                irfId,
                                slNo: 1,
                                scheme: "",
                                amount: "",
                                tenure: "",
                                applicableIntRate: "",
                                discretion: "",
                                roiRecommended: "",
                                resetClause: "",
                                nextResetDt: null,
                                saveStatus: '01',
                            },
                        }}
                        validationSchema={validationSchemaRecommendations}
                        onSubmit={handleSubmitRecommendations}
                        enableReinitialize={true}
                    >
                        {({ values }) => (
                            <Form>
                                <AutoSave debounceMs={5000} values={values} handleSubmit={handleSubmitRecommendations} />
                                <Table sx={{ minWidth: 650 }} aria-label="recommendation table">
                                    <TableHead>
                                        <TableRow>
                                            <TableCell colSpan={8}><b>Interest Rate</b></TableCell>
                                        </TableRow>
                                        <TableRow>
                                            <TableCell><b>Scheme</b></TableCell>
                                            <TableCell><b>Amount (â‚¹crore)</b></TableCell>
                                            <TableCell><b>Tenure</b></TableCell>
                                            <TableCell><b>Applicable Rate</b></TableCell>
                                            <TableCell><b>Discretion (%)</b></TableCell>
                                            <TableCell><b>ROI Recommended</b></TableCell>
                                            <TableCell><b>Reset Clause</b></TableCell>
                                            <TableCell><b>Next Reset Date</b></TableCell>
                                        </TableRow>
                                    </TableHead>
                                    <TableBody>
                                        <TableRow>
                                            <TableCell>
                                                <TextBoxField
                                                    label=""
                                                    name="recommendation.scheme"
                                                />
                                            </TableCell>
                                            <TableCell>
                                                <TextBoxField
                                                    label=""
                                                    name="recommendation.amount"
                                                    type="number"
                                                />
                                            </TableCell>
                                            <TableCell>
                                                <TextBoxField
                                                    label=""
                                                    name="recommendation.tenure"
                                                    type="number"
                                                />
                                            </TableCell>
                                            <TableCell>
                                                <TextBoxField
                                                    label=""
                                                    name="recommendation.applicableIntRate"
                                                    type="number"
                                                />
                                            </TableCell>
                                            <TableCell>
                                                <TextBoxField
                                                    label=""
                                                    name="recommendation.discretion"
                                                    type="number"
                                                />
                                            </TableCell>
                                            <TableCell>
                                                <TextBoxField
                                                    label=""
                                                    name="recommendation.roiRecommended"
                                                />
                                            </TableCell>
                                            <TableCell>
                                                <EnhancedDropDown
                                                    label=""
                                                    name="recommendation.resetClause"
                                                    domain="mstr/getResetClauseMstr"
                                                    basePath="mon"
                                                />
                                                 <EnhancedDropDown
                                                    label=""
                                                    basePath="mon"
                                                    name="recommendation.resetClause"
                                                    domain="mstr/getResetClauseMstr"
                                                />
                                            </TableCell>
                                            <TableCell>
                                                <AdvanceDatePickerField
                                                    label=""
                                                    name="recommendation.nextResetDt"
                                                />
                                            </TableCell>
                                        </TableRow>
                                    </TableBody>
                                </Table>
                                <Grid item xs={12} sx={{ mt: 2 }}>
                                    <Button
                                        className="sbmtBtn mt-0 mb-3 ms-2 me-2"
                                        type='submit'
                                        variant="contained"
                                    >
                                        Save <CheckCircleOutlineIcon />
                                    </Button>
                                </Grid>
                            </Form>
                        )}
                    </Formik>

                    <Formik
                        initialValues={{
                            irValidity: memorandumData?.irValidity || null,
                            dop: memorandumData?.dop || "",
                            dopComments: memorandumData?.dopComments || "",
                            discPowers: memorandumData?.discPowers || "",
                            verticalComments: memorandumData?.verticalComments || "",
                            recommendation: memorandumData?.recommendation || "",
                            preprosalComment: memorandumData?.preprosalComment || "",
                            rateReqComment: memorandumData?.rateReqComment || "",
                            committeName: memorandumData?.committeName || ""
                        }}
                        // validationSchema={validationSchemaMemorandum}
                        onSubmit={handleSubmitMemorandum}
                        enableReinitialize={true}
                        validateOnChange={false}
                        validateOnBlur={true}
                    >
                        {({ values }) => (
                            <Form>
                                <AutoSave debounceMs={5000} values={values} handleSubmit={handleSubmitMemorandum} />
                                <Grid container spacing={2} padding={4} className='form-grid p-0'>
                                    <Grid item xs={12}>
                                        <h6>Validity of Interest Rate</h6>
                                        <Table sx={{ minWidth: 650 }} aria-label="validity table">
                                            <TableBody>
                                                <TableRow>
                                                    <TableCell>
                                                        <AdvanceDatePickerField
                                                            label="Date"
                                                            name="irValidity"
                                                        />
                                                    </TableCell>
                                                </TableRow>
                                            </TableBody>
                                        </Table>
                                    </Grid>

                                    <Grid item xs={12}>
                                        <h6>DoP</h6>
                                        <Table sx={{ minWidth: 650 }} aria-label="dop table">
                                            <TableBody>
                                                <TableRow>
                                                    <TableCell>
                                                        <EnhancedDropDown
                                                            label="Committees"
                                                            name="committeName"
                                                            domain="committee/getAllCommitteeMasters"
                                                        />
                                                    </TableCell>
                                                </TableRow>
                                                <TableRow>
                                                    <TableCell>
                                                        <RichTextField
                                                            label="Comments"
                                                            name="dop"
                                                        />
                                                    </TableCell>
                                                </TableRow>
                                            </TableBody>
                                        </Table>
                                    </Grid>

                                    <Grid item xs={12}>
                                        {/* <h6>Discretionary Powers</h6> */}
                                        <Table sx={{ minWidth: 650 }} aria-label="discretionary powers table">
                                            <TableBody>
                                                <TableRow>
                                                    <TableCell>
                                                        <RichTextField
                                                            label="Discretionary Powers"
                                                            name="discPowers"
                                                        />
                                                    </TableCell>
                                                </TableRow>
                                            </TableBody>
                                        </Table>
                                    </Grid>

                                    <Grid item xs={12} sx={{ mt: 2 }}>
                                        <Button
                                            className="sbmtBtn mt-0 mb-3 ms-2 me-2"
                                            type='submit'
                                            variant="contained"
                                        >
                                            Save <CheckCircleOutlineIcon />
                                        </Button>
                                    </Grid>
                                </Grid>
                            </Form>
                        )}
                    </Formik>
                </>
            )}

            <NbfcSnackbar
                open={openSnackbar}
                msg={snackMsg}
                severity={severity}
                handleSnackClose={handleSnackClose}
                submitCall={false}
            />
        </div>
    );
};

export default Recommendation;

import React from 'react';
import Grid from "@mui/material/Grid";
import { KeyValuePair } from "./KeyValuePair";
import { getIn, useFormikContext } from "formik";
import Typography from "@mui/material/Typography";
import { removeRestrictedCharacters } from '../../utlis/input';
import { InputAdornment, Tooltip, IconButton } from '@mui/material';
import HelpOutlineIcon from '@mui/icons-material/HelpOutline';
import RedditTextField from './RedditTextField';


interface AdvanceTextBoxFieldProps {
  id?: number;
  label?: string;
  name: string;
  disabled?: boolean;
  type?: string;
  value?: string;
  readonly?: boolean;
  restrictedCharacters?: string;
  placeholder?: string;
  tooltip?: string;
  required?: boolean;
  maxLength?: number;
  minLength?: number;
  startAdornment?: React.ReactNode;
  endAdornment?: React.ReactNode;
  multiline?: boolean;
  rows?: number;
  maxRows?: number;
  validation?: {
    pattern?: RegExp;
    customValidation?: (value: string) => string | undefined;
  };
  transformValue?: (value: string) => string;
  onCustomChange?: any;
  fullWidth?: boolean;
  className?: string;
  style?: React.CSSProperties;
  InputProps?: any;
  allowNegative?: boolean;
  allowDecimal?: boolean;
  decimalPlaces?: number;
}

export const AdvanceTextBoxField: React.FC<AdvanceTextBoxFieldProps> = ({
  label = "",
  name,
  disabled = false,
  type = 'text',
  readonly = false,
  restrictedCharacters = "<>{}",
  placeholder,
  tooltip,
  required = false,
  maxLength,
  minLength,
  startAdornment,
  endAdornment,
  multiline = false,
  rows,
  maxRows,
  validation,
  transformValue,
  onCustomChange,
  fullWidth = true,
  className,
  style,
  allowNegative = false,
  allowDecimal = true,
  decimalPlaces = 2,
  ...props
}) => {
  const { handleChange, handleBlur, values, touched, errors, setFieldValue } =
    useFormikContext<KeyValuePair>() || {};

  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    let { value } = event.target;

    if (restrictedCharacters) {
      value = removeRestrictedCharacters(value, restrictedCharacters);
    }

    if (transformValue) {
      value = transformValue(value);
    }

    if (type === 'number') {
      let regex = allowNegative ? /^-?\d*\.?\d{0,2}$/ : /^\d*\.?\d{0,2}$/;
      if (!allowDecimal) {
        regex = /^\d*$/;
      }
      if (allowNegative && !allowDecimal) {
        regex = /^-?\d*$/;
      }
      if (!regex.test(value) && value !== '') {
        return;
      }
      if (value !== '' && value !== '-' && allowDecimal && value.includes('.')) {
        const parts = value.split('.');
        if (parts[1] && parts[1].length > decimalPlaces) {
          const rounded = Number(parseFloat(value).toFixed(decimalPlaces));
          value = rounded.toString();
        }
      }
    }

    if (validation?.pattern && !validation.pattern.test(value)) {
      return;
    }
    setFieldValue(name, value);
    if (onCustomChange) {
      onCustomChange(value);
    }
  };
  const labelStyles = {
    '& .MuiInputLabel-shrink': {
      background: '#fff',
      padding: '0 8px',
    },
  };

  const getErrorMessage = () => {
    if (getIn(touched, name) && getIn(errors, name)) {
      return JSON.stringify(getIn(errors, name)).replaceAll('"', "");
    }
    return "";
  };

  return (
    <Grid item xs={12} style={style}>
      <Grid item xs={12}>
        <RedditTextField
          label={label}
          className={`${name} ${className || ''}`}
          onChange={handleInputChange}
          onBlur={handleBlur}
          value={getIn(values, name)}
          name={name}
          size="small"
          disabled={disabled}
          type={type}
          placeholder={placeholder}
          required={required}
          sx={labelStyles}
          inputProps={{
            readOnly: readonly,
            maxLength: maxLength,
            minLength: minLength,
            inputMode: type === 'number' ? 'decimal' : 'text',
            pattern: type === 'number' ? undefined : undefined
          }}
          multiline={multiline}
          rows={rows}
          maxRows={maxRows}
          fullWidth={fullWidth}
          InputProps={{
            startAdornment: startAdornment && (
              <InputAdornment position="start">{startAdornment}</InputAdornment>
            ),
            endAdornment: (
              <InputAdornment position="end">
                {tooltip && (
                  <Tooltip title={tooltip}>
                    <IconButton size="small">
                      <HelpOutlineIcon />
                    </IconButton>
                  </Tooltip>
                )}
                {endAdornment}
              </InputAdornment>
            ),
          }}
          {...props}
        />
      </Grid>
      <Grid item xs={12}>
        <Typography
          color="error"
          variant="subtitle2"
          gutterBottom
          component="span"
          className="mybooking_error"
        >
          {getErrorMessage()}
        </Typography>
      </Grid>
    </Grid>
  );
};




