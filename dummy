// Install: npm install luckyexcel
// This library is free and works with Webpack 5+

import LuckyExcel from 'luckyexcel';

const handleExcelUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    try {
        setExcelUploadError(null);
        setIsUploading(true);

        const file = event.target.files?.[0];
        if (!file) return;

        if (!file.name.endsWith(".xlsx") && !file.name.endsWith(".xls")) {
            setExcelUploadError("Please upload a valid Excel file (.xlsx or .xls)");
            return;
        }

        if (file.size > MAX_FILE_SIZE_BYTES) {
            setExcelUploadError(`File size should not exceed ${MAX_FILE_SIZE_MB} MB`);
            return;
        }

        const buffer = await file.arrayBuffer();
        
        // LuckyExcel can handle some password-protected files
        try {
            const luckysheetData = await new Promise((resolve, reject) => {
                LuckyExcel.transformExcelToLucky(
                    file,
                    {
                        password: 'abc' // Password option
                    },
                    (exportJson: any, luckysheetfile: any) => {
                        if (exportJson.sheets && exportJson.sheets.length > 0) {
                            resolve(exportJson);
                        } else {
                            reject(new Error('No sheets found in Excel file'));
                        }
                    }
                );
            });

            const sheets = (luckysheetData as any).sheets;
            
            if (sheets.length < 3) {
                throw new Error("Excel file must contain at least 3 sheets");
            }
            
            // Extract data from sheets (index 1 and 2)
            const lenderTlSheet = sheets[1];
            const lenderOdSheet = sheets[2];
            
            const extractSheetData = (sheet: any) => {
                if (!sheet.celldata || !Array.isArray(sheet.celldata)) {
                    return [];
                }
                
                // Convert LuckyExcel format to array format
                const rows: any[] = [];
                sheet.celldata.forEach((cell: any) => {
                    const rowIndex = cell.r;
                    const colIndex = cell.c;
                    const value = cell.v?.v || cell.v || '';
                    
                    if (!rows[rowIndex]) {
                        rows[rowIndex] = [];
                    }
                    rows[rowIndex][colIndex] = value;
                });
                
                // Skip first 2 rows and return data
                return rows.slice(2).filter(row => row && row.length > 0);
            };
            
            const lenderTlData = extractSheetData(lenderTlSheet);
            const lenderOdData = extractSheetData(lenderOdSheet);
            
            setExcelData({
                lenderTl: lenderTlData,
                lenderOd: lenderOdData,
            });
            
            setOpenSnackbar(true);
            setSeverity("success");
            setSnackMsg("Excel file uploaded successfully");
            
        } catch (luckyError: any) {
            // Fallback to regular XLSX if LuckyExcel fails
            console.warn('LuckyExcel failed, trying XLSX:', luckyError);
            
            const workbook = XLSX.read(buffer, { type: 'array' });
            const sheetNames = workbook.SheetNames;
            
            if (sheetNames.length < 3) {
                throw new Error("Excel file must contain at least 3 sheets");
            }
            
            const lenderTlSheet = workbook.Sheets[sheetNames[1]];
            const lenderOdSheet = workbook.Sheets[sheetNames[2]];
            
            const lenderTlData = XLSX.utils.sheet_to_json(lenderTlSheet, { 
                header: 1,
                defval: null 
            }).slice(2);
            
            const lenderOdData = XLSX.utils.sheet_to_json(lenderOdSheet, { 
                header: 1,
                defval: null 
            }).slice(2);
            
            setExcelData({
                lenderTl: lenderTlData,
                lenderOd: lenderOdData,
            });
            
            setOpenSnackbar(true);
            setSeverity("success");
            setSnackMsg("Excel file uploaded successfully");
        }
        
    } catch (error: any) {
        console.error("Excel upload error:", error);
        setExcelUploadError(error.message || "Error parsing Excel file");
        setOpenSnackbar(true);
        setSeverity("error");
        setSnackMsg("Error processing Excel file. Please check the format and password.");
    } finally {
        setIsUploading(false);
        if (event.target) event.target.value = "";
    }
};









// First, install the required package:
// npm install xlsx-populate

import XlsxPopulate from 'xlsx-populate';

const handleExcelUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    try {
        setExcelUploadError(null);
        setIsUploading(true);

        const file = event.target.files?.[0];
        if (!file) return;

        if (!file.name.endsWith(".xlsx") && !file.name.endsWith(".xls")) {
            setExcelUploadError("Please upload a valid Excel file (.xlsx or .xls)");
            return;
        }

        // Check file size
        if (file.size > MAX_FILE_SIZE_BYTES) {
            setExcelUploadError(`File size should not exceed ${MAX_FILE_SIZE_MB} MB`);
            return;
        }

        const buffer = await file.arrayBuffer();
        
        // Use xlsx-populate for password-protected files
        let workbook;
        try {
            workbook = await XlsxPopulate.fromDataAsync(buffer, { password: 'abc' });
        } catch (passwordError) {
            // If password fails, try without password
            try {
                workbook = await XlsxPopulate.fromDataAsync(buffer);
            } catch (loadError) {
                throw new Error("Failed to open Excel file. Please check if the file is password-protected or corrupted.");
            }
        }

        // Get sheets by index (0-based indexing)
        const lenderTlSheet = workbook.sheet(1); // Second sheet
        const lenderOdSheet = workbook.sheet(2); // Third sheet
        
        if (!lenderTlSheet) {
            throw new Error("Lender TL sheet not found in the Excel file.");
        }
        if (!lenderOdSheet) {
            throw new Error("Lender OD sheet not found in the Excel file.");
        }

        const parseSheetData = (sheet: any) => {
            const jsonData: any[] = [];
            const usedRange = sheet.usedRange();
            
            if (usedRange) {
                const values = usedRange.value();
                // Skip first 2 rows (headers) and return the rest
                return values.slice(2);
            }
            return [];
        };

        const lenderTlData = parseSheetData(lenderTlSheet);
        const lenderOdData = parseSheetData(lenderOdSheet);
        
        setExcelData({
            lenderTl: lenderTlData,
            lenderOd: lenderOdData,
        });
        
        setOpenSnackbar(true);
        setSeverity("success");
        setSnackMsg("Excel file uploaded successfully");
        
    } catch (error: any) {
        console.error("Excel upload error:", error);
        setExcelUploadError(error.message || "Error parsing Excel file");
        setOpenSnackbar(true);
        setSeverity("error");
        setSnackMsg("Error processing Excel file. Please check the format and password.");
    } finally {
        setIsUploading(false);
        if (event.target) event.target.value = "";
    }
};





const handleExcelUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    try {
        setExcelUploadError(null);
        setIsUploading(true);

        const file = event.target.files?.[0];
        if (!file) return;

        if (!file.name.endsWith(".xlsx") && !file.name.endsWith(".xls")) {
            setExcelUploadError("Please upload a valid Excel file (.xlsx or .xls)");
            return;
        }

        // Check file size
        if (file.size > MAX_FILE_SIZE_BYTES) {
            setExcelUploadError(`File size should not exceed ${MAX_FILE_SIZE_MB} MB`);
            return;
        }

        const buffer = await file.arrayBuffer();
        const workbookExcelJS = new ExcelJS.Workbook();
        
        // Load the password-protected Excel file
        try {
            await workbookExcelJS.xlsx.load(buffer, {
                password: 'abc' // Your password here
            });
        } catch (passwordError) {
            // If password fails, try without password (for backward compatibility)
            try {
                await workbookExcelJS.xlsx.load(buffer);
            } catch (loadError) {
                throw new Error("Failed to open Excel file. Please check if the file is password-protected or corrupted.");
            }
        }

        const lenderTlSheet = workbookExcelJS.worksheets[1];
        const lenderOdSheet = workbookExcelJS.worksheets[2];
        
        if (!lenderTlSheet) {
            throw new Error("Lender TL sheet not found in the Excel file.");
        }
        if (!lenderOdSheet) {
            throw new Error("Lender OD sheet not found in the Excel file.");
        }

        const parseSheetDataExcelJS = (worksheet: ExcelJS.Worksheet) => {
            const jsonData: any[] = [];
            worksheet.eachRow({ includeEmpty: false }, (row: any, rowNumber: number) => {
                jsonData.push(row.values);
            });
            return jsonData.slice(2); // Skip header rows
        };

        const lenderTlData = parseSheetDataExcelJS(lenderTlSheet);
        const lenderOdData = parseSheetDataExcelJS(lenderOdSheet);
        
        setExcelData({
            lenderTl: lenderTlData,
            lenderOd: lenderOdData,
        });
        
        setOpenSnackbar(true);
        setSeverity("success");
        setSnackMsg("Excel file uploaded successfully");
        
    } catch (error: any) {
        console.error("Excel upload error:", error);
        setExcelUploadError(error.message || "Error parsing Excel file");
        setOpenSnackbar(true);
        setSeverity("error");
        setSnackMsg("Error processing Excel file. Please check the format and password.");
    } finally {
        setIsUploading(false);
        if (event.target) event.target.value = "";
    }
};












import React, { FC, memo, useState } from "react"
import Grid from '@mui/material/Grid';
import { Button, CircularProgress, Typography } from "@mui/material";
import { Link, useNavigate } from "react-router-dom";
import { AiOutlineArrowLeft } from "react-icons/ai";
import Accordion from '@mui/material/Accordion';
import AccordionSummary from '@mui/material/AccordionSummary';
import AccordionDetails from '@mui/material/AccordionDetails';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import BorrowingForm from "../application-form/capitalResourceProfile/BorrowingForm";
import EquityReserveForm from "../application-form/capitalResourceProfile/EquityReserveForm";
import EquityInfusionForm from "../application-form/capitalResourceProfile/EquityInfusionForm";
import LenderLimitOdForm from "../application-form/capitalResourceProfile/LenderLimitOdForm";
import LenderTermLoanForm from "../application-form/capitalResourceProfile/LenderTermLoanForm";
import { setApplId } from "../../features/user/userSlice";
import { useAppDispatch } from "../../app/hooks";
import UploadFileIcon from '@mui/icons-material/UploadFile';
import SimCardDownloadIcon from '@mui/icons-material/SimCardDownload';
import ExcelJS from 'exceljs';
import * as XLSX from 'xlsx';
import { DocumentAPI } from "../../features/application-form/documentUpload";
import { OnlineSnackbar } from "../../components/shared/OnlineSnackbar";
import { MAX_FILE_SIZE_BYTES, MAX_FILE_SIZE_MB, UPLOADINGTEXT } from "../../utlis/constants";
import FullScreenLoader from "../../components/common/FullScreenLoader";

const CapitalResourceProfile: FC = () => {
    const [expanded, setExpanded] = React.useState("");
    const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);
    const [snackMsg, setSnackMsg] = useState<any>("");
    const [severity, setSeverity] = useState<string | any>("success");
    const [isUploading, setIsUploading] = useState<boolean>(false);

    const [excelData, setExcelData] = useState<any>({
        lenderTl: [],
        lenderOd: [],
    });
    const [excelUploadError, setExcelUploadError] = useState<string | null>(null);
    const onOpenChange =
        (panel: any) => (event: React.SyntheticEvent, isExpanded: any) => {
            setExpanded(isExpanded ? panel : false);
        };


    const dispatch = useAppDispatch();
    const navigate = useNavigate();

    const handleNavigate = (e: any) => {
        e.preventDefault();

        if (window.location.pathname === "/refinance/online-dashboard") {
            localStorage.removeItem('applId');
        }
        dispatch(setApplId(""));
        navigate("/refinance/online-dashboard");
    };

    const handleExcelUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
        try {
            setExcelUploadError(null);
            setIsUploading(true);

            const file = event.target.files?.[0];
            if (!file) return;

            if (!file.name.endsWith(".xlsx") && !file.name.endsWith(".xls")) {
                setExcelUploadError("Please upload a valid Excel file (.xlsx or .xls)");
                return;
            }
            //Check file size
            if (file.size > MAX_FILE_SIZE_BYTES) {
                setExcelUploadError(`File size should not exceed ${MAX_FILE_SIZE_MB} MB`);
                return;
            }

            const buffer = await file.arrayBuffer();
            const workbookExcelJS = new ExcelJS.Workbook();
            await workbookExcelJS.xlsx.load(buffer);

            const lenderTlSheet = workbookExcelJS.worksheets[1];
            const lenderOdSheet = workbookExcelJS.worksheets[2];
            if (!lenderTlSheet) {
                throw new Error("Lender TL sheet not found in the Excel file.");
            }
            if (!lenderOdSheet) {
                throw new Error("Lender OD sheet not found in the Excel file.");
            }

            const parseSheetDataExcelJS = (worksheet: ExcelJS.Worksheet) => {
                const jsonData: any[] = [];
                worksheet.eachRow({ includeEmpty: false }, (row: any, rowNumber: number) => {
                    jsonData.push(row.values);
                });
                return jsonData.slice(2);
            };
            const lenderTlData = parseSheetDataExcelJS(lenderTlSheet);
            const lenderOdData = parseSheetDataExcelJS(lenderOdSheet);
            setExcelData({
                lenderTl: lenderTlData,
                lenderOd: lenderOdData,
            });
            setOpenSnackbar(true);
            setSeverity("success");
            setIsUploading(false);
            setSnackMsg("Excel file uploaded successfully");
        } catch (error: any) {
            console.error("Excel upload error:", error);
            setExcelUploadError(error.message || "Error parsing Excel file");
            setOpenSnackbar(true);
            setIsUploading(false);
            setSeverity("error");
            setSnackMsg("Error processing Excel file. Please check the format.");
        }
        finally {
            setIsUploading(false); // Always turn off the loader
            if (event.target) event.target.value = "";
        }
    };

    const handleExternalDownload = async () => {
        try {
            const response = await DocumentAPI.downloadExternalTemplate('09');
            const downloadLink = document.createElement('a');
            downloadLink.href = URL.createObjectURL(new Blob([response.data]));
            downloadLink.download = 'Capital_Resource_Template.xlsx';
            downloadLink.target = '_blank';
            downloadLink.click();
        } catch (error: any) {
            setOpenSnackbar(true);
            setSeverity("error");
            setSnackMsg('Failed to download template document.');
        }
    };
    // if (isUploading) return <div className="CrclProg"><CircularProgress /></div>;
if (isUploading) return <FullScreenLoader open={isUploading} setOpenModal={setIsUploading} text={UPLOADINGTEXT} />;

    return (
        <div className="wrap-appraisal-area">
            <div className="wrap-accordian">
                <div className="wrap-tabs">

                    <Grid className="top-header-container" container spacing={1} style={{ zIndex: '9', position: 'relative' }}>
                        <Grid className="pb-2" item xs={7}>
                            <Typography
                                className="wrap-bold"
                                noWrap
                                variant="subtitle1"
                                component="div"
                            >
                                <h6 className="title">Capital & Resource Profile</h6>
                            </Typography>
                        </Grid>
                        <Grid
                            className="pb-2"
                            item
                            xs={5}
                            display="flex"
                            justifyContent="end"
                        >
                            <Link className="in-clickable text-capitalize" to="/refinance/online-dashboard">
                                <Button
                                    color="inherit"
                                    className="text-capitalize"
                                    variant="outlined"
                                    size="small"
                                    onClick={handleNavigate}
                                >
                                    <AiOutlineArrowLeft className="me-2" /> Back
                                </Button>
                            </Link>
                        </Grid>
                    </Grid>

                    <div className="up_btns">
                        <input
                            accept=".xlsx, .xls"
                            id="excel-upload-button"
                            type="file"
                            onChange={handleExcelUpload}
                            style={{ display: 'none' }}
                        />
                        <label htmlFor="excel-upload-button">
                            <Button
                                variant="contained"
                                color="primary"
                                component="span"
                                disabled={isUploading} // <-- Disable button while uploading
                                style={{ marginLeft: '0px', padding: '4px 10px', textTransform: 'capitalize' }}
                                startIcon={isUploading ? <CircularProgress size={18} color="inherit" /> : <UploadFileIcon style={{ fontSize: '20px' }} />}
                            >
                                {isUploading ? "Uploading..." : "Upload Excel"}
                            </Button>
                        </label>

                        <Button
                            variant="contained"
                            color="primary"
                            className="sbmtBtn dwldBtn"
                            style={{ marginLeft: '10px' }}
                            onClick={handleExternalDownload}
                        >
                            Download Sample <SimCardDownloadIcon />
                        </Button>
                    </div>
                    {excelUploadError && (
                        <div className="error-message mt-1 text-danger">
                            {excelUploadError}
                        </div>
                    )}

                    <div className="form-container mt-1">
                        <Accordion className='custome-accordian' expanded={expanded === 'panel1'} onChange={onOpenChange('panel1')}>
                            <AccordionSummary
                                expandIcon={<ExpandMoreIcon />}
                                aria-controls="panel1-content"
                                id="panel1-header"
                            >
                                Borrowing Cost details
                            </AccordionSummary>
                            <AccordionDetails>
                                <div className="form-container">
                                    <BorrowingForm />
                                </div>
                            </AccordionDetails>
                        </Accordion>
                        <Accordion className='custome-accordian' expanded={expanded === 'panel2'} onChange={onOpenChange('panel2')}>
                            <AccordionSummary
                                expandIcon={<ExpandMoreIcon />}
                                aria-controls="panel2-content"
                                id="panel1-header"
                            >
                                Details of Lenders - TL
                            </AccordionSummary>
                            <AccordionDetails>
                                <div className="form-container">
                                    <LenderTermLoanForm excelData={excelData?.lenderTl} />
                                </div>
                            </AccordionDetails>
                        </Accordion>
                        <Accordion className='custome-accordian' expanded={expanded === 'panel3'} onChange={onOpenChange('panel3')}>
                            <AccordionSummary
                                expandIcon={<ExpandMoreIcon />}
                                aria-controls="panel3-content"
                                id="panel1-header"
                            >
                                Details of Lenders -  CC/WC/OD
                            </AccordionSummary>
                            <AccordionDetails>
                                <div className="form-container">
                                    <LenderLimitOdForm excelData={excelData?.lenderOd} />
                                </div>
                            </AccordionDetails>
                        </Accordion>
                        <Accordion className='custome-accordian' expanded={expanded === 'panel4'} onChange={onOpenChange('panel4')}>
                            <AccordionSummary
                                expandIcon={<ExpandMoreIcon />}
                                aria-controls="panel4-content"
                                id="panel1-header"
                            >
                                Details of Equity and reserves
                            </AccordionSummary>
                            <AccordionDetails>
                                <div className="form-container">
                                    <EquityReserveForm />
                                </div>
                            </AccordionDetails>
                        </Accordion>
                        <Accordion className='custome-accordian' expanded={expanded === 'panel5'} onChange={onOpenChange('panel5')}>
                            <AccordionSummary
                                expandIcon={<ExpandMoreIcon />}
                                aria-controls="panel5-content"
                                id="panel1-header"
                            >
                                Equity Infusion Details
                            </AccordionSummary>
                            <AccordionDetails>
                                <div className="form-container">
                                    <EquityInfusionForm />
                                </div>
                            </AccordionDetails>
                        </Accordion>
                    </div>
                </div>
            </div>
        </div>
    )
}

export default CapitalResourceProfile;

