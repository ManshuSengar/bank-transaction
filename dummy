import { FieldArray, Form, Formik } from "formik";
import { useEffect, useRef, useState } from "react";
import { Table, TableCell, TableHead, TableRow, TableBody, Button } from '@mui/material';
import { connect } from 'react-redux';
import CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';
import FormLoader from "../../../loader/FormLoader";
import ErrorMessageGlobal from "../../../components/framework/ErrorMessageGlobal";
import AutoSave from "../../../components/framework/AutoSave";
import { useGetLabelHeaderFormDataQuery, useGetMarketDetailPortfolioFormDataQuery, useSaveMarketDetailPortfolioFormDataMutation }
    from "../../../features/application-form/marketPositionForm";
import { AdvanceTextBoxField } from "../../../components/framework/AdvanceTextBoxField";
import { OnlineSnackbar } from "../../../components/shared/OnlineSnackbar";
import ConfirmationAlertDialog from "../../../models/application-form/ConfirmationAlertDialog";
import SaveAsIcon from '@mui/icons-material/SaveAs';

const PortfolioDetailsForm = ({ applId, excelData }: any) => {
    const [addPortfolioDetails] = useSaveMarketDetailPortfolioFormDataMutation();
    const { data: portfolioDetails, isLoading, isError } = useGetMarketDetailPortfolioFormDataQuery(applId);
    const { data: labelHeader } = useGetLabelHeaderFormDataQuery(applId);
    const [initialValues, setInitialValues] = useState<any>({ data: [] });
    const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);
    const [snackMsg, setSnackMsg] = useState<any>("");
    const [severity, setSeverity] = useState<string | any>("success");
    const [openConfirmation, setOpenConfirmation] = useState(false);
    const [formData, setFormData] = useState<any>("");
    const [actionVal, setActionVal] = useState<any>("");
    const formikRef = useRef<any>(null);
    const setFieldValueRef = useRef<any>(null);

    const [isUploading, setIsUploading] = useState<boolean>(false);
    const [snackMsgList, setSnackMsgList] = useState<any>("");

    const [snackOpen, setSnackOpen] = useState(false);
    const [snackSeverity, setSnackSeverity] = useState<'error' | 'success' | 'info'>('error');
    const [snackMessages, setSnackMessages] = useState<string[]>([]);

    useEffect(() => {
        if (portfolioDetails) {
            const dataWithApplId = portfolioDetails.map((item: any) => ({
                ...item,
                applId,
            }));
            setInitialValues({ data: dataWithApplId });
        }
    }, [portfolioDetails, applId]);

    const parseExcelValue = (value: any): number => {
        if (value === undefined || value === null || value === '' || value === '#DIV/0!') return 0;
        if (typeof value === 'string') value = value.replace(/,/g, '');
        return parseFloat(value) || 0;
    };

    const findMatchingExcelRow = (jsonData: any[], particulars: string): any[] | null => {
        for (let i = 0; i < jsonData.length; i++) {
            const row = jsonData[i];
            if (row && row[0] && row[0].toString().trim() === particulars.trim()) {
                return row;
            }
        }
        return null;
    };

    const processExcelData = (excelData: any[], formData: any[]) => {
        let totalOffBookAUM = 0;
        const mappedData = formData.map((row: any, index: number) => {
            const excelRow = findMatchingExcelRow(excelData, row.particulars);
            let newRow = { ...row, applId };

            if (excelRow) {
                const lastAuditedQuarterVal = parseExcelValue(excelRow[1]);
                const prev2ndQuarterVal = parseExcelValue(excelRow[2]);
                const prevQuarterVal = parseExcelValue(excelRow[3]);

                newRow = {
                    ...newRow,
                    lastAuditedQuarterVal,
                    prev2ndQuarterVal,
                    prevQuarterVal,
                    yoyGrowth: calculateYoY(lastAuditedQuarterVal, prevQuarterVal).toFixed(2),
                    qoqGrowth: calculateQoQ(prev2ndQuarterVal, prevQuarterVal).toFixed(2),
                };

                // Updated logic for new index structure (index 5-9 instead of 4-8)
                if (index >= 5 && index <= 9) {
                    totalOffBookAUM += prevQuarterVal;
                }
            }

            return newRow;
        });

        // Updated calculation for index 0 - sum of indices 1,2,3,4,5
        const totalSum = (mappedData[1]?.prevQuarterVal || 0) + 
                        (mappedData[2]?.prevQuarterVal || 0) + 
                        (mappedData[3]?.prevQuarterVal || 0) + 
                        (mappedData[4]?.prevQuarterVal || 0) + 
                        (mappedData[5]?.prevQuarterVal || 0);

        mappedData[0] = {
            ...mappedData[0],
            prevQuarterVal: totalSum.toFixed(2),
            yoyGrowth: calculateYoY(mappedData[0].lastAuditedQuarterVal, totalSum).toFixed(2),
            qoqGrowth: calculateQoQ(mappedData[0].prev2ndQuarterVal, totalSum).toFixed(2),
        };

        // Updated calculation for index 1 - sum of indices 2,3
        const onBookSum = (mappedData[2]?.prevQuarterVal || 0) + (mappedData[3]?.prevQuarterVal || 0);
        mappedData[1] = {
            ...mappedData[1],
            prevQuarterVal: onBookSum.toFixed(2),
            yoyGrowth: calculateYoY(mappedData[1].lastAuditedQuarterVal, onBookSum).toFixed(2),
            qoqGrowth: calculateQoQ(mappedData[1].prev2ndQuarterVal, onBookSum).toFixed(2),
        };

        // Updated calculation for index 4 - sum of indices 5-9
        mappedData[4] = {
            ...mappedData[4],
            prevQuarterVal: totalOffBookAUM.toFixed(2),
            yoyGrowth: calculateYoY(mappedData[4].lastAuditedQuarterVal, totalOffBookAUM).toFixed(2),
            qoqGrowth: calculateQoQ(mappedData[4].prev2ndQuarterVal, totalOffBookAUM).toFixed(2),
        };

        return mappedData;
    };

    useEffect(() => {
        if (excelData && excelData.length > 0 && portfolioDetails) {
            const processedData = processExcelData(excelData, portfolioDetails);
            setFieldValueRef.current('data', processedData);
            setOpenSnackbar(true);
            setSeverity("success");
            setSnackMsg("Portfolio Details data imported successfully");
        }
    }, [excelData]);

    const calculateYoY = (lastAuditedQuarterVal: number, prevQuarterVal: number): number => {
        return ((prevQuarterVal - lastAuditedQuarterVal) / (lastAuditedQuarterVal === 0 ? 1 : lastAuditedQuarterVal)) * 100;
    };

    const calculateQoQ = (prev2ndQuarterVal: number, prevQuarterVal: number): number => {
        return ((prevQuarterVal - prev2ndQuarterVal) / (prev2ndQuarterVal === 0 ? 1 : prev2ndQuarterVal)) * 100;
    };

    const handleSubmitApis = async (values: any) => {
        try {
            setIsUploading(true);
            let requestBody = values.data;
            if (!requestBody) {
                requestBody = values;
            }
            if (await addPortfolioDetails(requestBody).unwrap()) {
                if (requestBody?.[0]?.saveStatus === '02' || requestBody?.[0]?.saveStatus === '01') {
                    setOpenSnackbar(true);
                    setSeverity("success");
                    if (requestBody?.[0]?.saveStatus === '02') {
                        setSnackMsg("Section submitted successfully");
                    } else if (requestBody?.[0]?.saveStatus === '01') {
                        setSnackMsg("Record saved successfully");
                    }
                }
                setActionVal(null);
                return true;
            }
            return false;
        } catch (error: any) {
            console.error(error);
            setOpenSnackbar(true);
            setSeverity("error");
            setSnackMsg("Failed to save: " + error?.message);
            return false;
        }
    };

    const calculation = (setFieldValue: any, values: any, currentIndex: number, currentVal: number, currentRowId: string) => {
        // Updated calculation logic based on new requirements
        if (currentIndex === 2 || currentIndex === 3) {
            // When index 2 or 3 changes, update index 1 (sum of 2,3)
            calculationOnBook(setFieldValue, values, currentIndex, currentVal, currentRowId);
            // Also update index 0 since it depends on index 1
            calculationTotalAUM(setFieldValue, values, 1, getUpdatedValue(values, 1, currentIndex, currentVal, currentRowId), currentRowId);
        }
        
        if (currentIndex >= 5 && currentIndex <= 9) {
            // When indices 5-9 change, update index 4 (sum of 5-9)
            const updatedIndex4Value = calculationOffBookAUM(setFieldValue, values, currentIndex, currentVal, currentRowId);
            // Also update index 0 since it depends on index 4
            calculationTotalAUM(setFieldValue, values, 4, updatedIndex4Value, currentRowId);
        }
        
        // Update index 0 when any of indices 1-5 change directly (not through cascading)
        if (currentIndex >= 1 && currentIndex <= 5) {
            calculationTotalAUM(setFieldValue, values, currentIndex, currentVal, currentRowId);
        }
        
        calculationYoY(setFieldValue, values, currentIndex, currentVal, currentRowId);
        calculationQoQ(setFieldValue, values, currentIndex, currentVal, currentRowId);
    };

    const calculationYoY = (setFieldValue: any, values: any, currentIndex: number, currentVal: number, currentRowId: string) => {
        const currentRow = values.data[currentIndex];
        const lastAuditedQuarterVal = currentRowId === 'lastAuditedQuarterVal' ? currentVal : currentRow.lastAuditedQuarterVal;
        const prevQuarterVal = currentRowId === 'prevQuarterVal' ? currentVal : currentRow.prevQuarterVal;
        const calculate = ((+prevQuarterVal - +lastAuditedQuarterVal) / (+(Number(lastAuditedQuarterVal) === 0 ? 1 : lastAuditedQuarterVal))) * 100;
        const totalPrefix = 'data.' + currentIndex + '.yoyGrowth';
        setFieldValue(`${totalPrefix}`, calculate.toFixed(2));
    };

    const calculationQoQ = (setFieldValue: any, values: any, currentIndex: number, currentVal: number, currentRowId: string) => {
        const currentRow = values.data[currentIndex];
        const prev2ndQuarterVal = currentRowId === 'prev2ndQuarterVal' ? currentVal : currentRow.prev2ndQuarterVal;
        const prevQuarterVal = currentRowId === 'prevQuarterVal' ? currentVal : currentRow.prevQuarterVal;
        const calculate = ((+prevQuarterVal - +prev2ndQuarterVal) / (+(Number(prev2ndQuarterVal) === 0 ? 1 : prev2ndQuarterVal))) * 100;
        const totalPrefix = 'data.' + currentIndex + '.qoqGrowth';
        setFieldValue(`${totalPrefix}`, calculate.toFixed(2));
    };

    // Helper function to get updated value for cascading calculations
    const getUpdatedValue = (values: any, targetIndex: number, currentIndex: number, currentVal: number, currentRowId: string) => {
        if (targetIndex === 1) {
            // Calculate sum of indices 2,3
            let total = 0;
            for (let i = 2; i <= 3; i++) {
                if (i !== currentIndex) {
                    total += +getRowValue(values, i, currentRowId);
                } else {
                    total += +currentVal;
                }
            }
            return total;
        }
        return 0;
    };

    // New function for calculating total AUM (index 0 = sum of indices 1,2,3,4,5)
    const calculationTotalAUM = (setFieldValue: any, values: any, currentIndex: number, currentVal: number, currentRowId: string) => {
        let total = 0;
        for (let i = 1; i <= 5; i++) {
            if (i !== currentIndex) {
                total += +getRowValue(values, i, currentRowId);
            } else {
                total += +currentVal;
            }
        }
        const totalPrefix = 'data.0.' + currentRowId;
        setFieldValue(`${totalPrefix}`, total.toFixed(2));

        calculationYoY(setFieldValue, values, 0, total, currentRowId);
        calculationQoQ(setFieldValue, values, 0, total, currentRowId);
        
        return Number(total.toFixed(2));
    };

    // New function for calculating on-book AUM (index 1 = sum of indices 2,3)
    const calculationOnBook = (setFieldValue: any, values: any, currentIndex: number, currentVal: number, currentRowId: string) => {
        let total = 0;
        for (let i = 2; i <= 3; i++) {
            if (i !== currentIndex) {
                total += +getRowValue(values, i, currentRowId);
            } else {
                total += +currentVal;
            }
        }
        const totalPrefix = 'data.1.' + currentRowId;
        setFieldValue(`${totalPrefix}`, total.toFixed(2));

        calculationYoY(setFieldValue, values, 1, total, currentRowId);
        calculationQoQ(setFieldValue, values, 1, total, currentRowId);

        return Number(total.toFixed(2));
    };

    // Updated function for calculating off-book AUM (index 4 = sum of indices 5-9)
    const calculationOffBookAUM = (setFieldValue: any, values: any, currentIndex: number, currentVal: number, currentRowId: string) => {
        let total = 0;
        for (let i = 5; i <= 9; i++) {
            if (i !== currentIndex) {
                total += +getRowValue(values, i, currentRowId);
            } else {
                total += +currentVal;
            }
        }
        const totalPrefix = 'data.4.' + currentRowId;
        setFieldValue(`${totalPrefix}`, total.toFixed(2));

        calculationYoY(setFieldValue, values, 4, total, currentRowId);
        calculationQoQ(setFieldValue, values, 4, total, currentRowId);

        return Number(total.toFixed(2));
    };

    const getRowValue = (values: any, index: number, currentRowId: string) => {
        if (currentRowId === 'lastAuditedQuarterVal') {
            return values.data[index].lastAuditedQuarterVal;
        } else if (currentRowId === 'prev2ndQuarterVal') {
            return values.data[index].prev2ndQuarterVal;
        } else if (currentRowId === 'prevQuarterVal') {
            return values.data[index].prevQuarterVal;
        } else if (currentRowId === 'yoyGrowth') {
            return values.data[index].yoyGrowth;
        } else if (currentRowId === 'qoqGrowth') {
            return values.data[index].qoqGrowth;
        }
        return 0;
    };

    const handleClosePop = () => {
        setOpenSnackbar(false);
    };

    const handleCloseConfirmation = () => {
        setActionVal(null);
        setOpenConfirmation(false);
    };

    const handleSubmitConfirmation = (values: any) => {
        setOpenConfirmation(false);
        handleSubmitApis(values);
    };

    const handleSubmit = async (values: any) => {
        const finalValue = values?.data?.map((listData: any) => ({
            ...listData,
            saveStatus: actionVal,
        }));
        if (actionVal === '02') {
            setFormData(finalValue);
            setOpenConfirmation(true);
        } else {
            handleSubmitApis(finalValue);
        }
        setActionVal(null);
    };

    const handleClickSetAction = (action: any) => {
        setActionVal(action);
    };

    if (isLoading) return <FormLoader />;
    if (isError) return <ErrorMessageGlobal status={isError} />;

    return (
        <div className="custome-form">
            <ConfirmationAlertDialog
                id={applId}
                type={4}
                open={openConfirmation}
                handleClose={handleCloseConfirmation}
                handleDelete={handleSubmitConfirmation}
                values={formData}
            />
            <div className="wrap-inner-table mt-0">
                <Formik
                    initialValues={initialValues}
                    onSubmit={handleSubmit}
                    enableReinitialize={true}
                    innerRef={formikRef}
                >
                    {({ values, setFieldValue }) => {
                        setFieldValueRef.current = setFieldValue;
                        return (
                            <Form>
                                <fieldset disabled={values?.data?.[0]?.saveStatus === "02"}>
                                    {values?.data?.[0]?.saveStatus !== "02" && (
                                        <AutoSave handleSubmit={handleSubmit} values={values} debounceMs={10000} autoStyle={true} />
                                    )}
                                    <FieldArray name="data">
                                        {() => (
                                            <Table sx={{ minWidth: 650 }} aria-label="simple table">
                                                <TableHead>
                                                    <TableRow>
                                                        <TableCell><b>Sr.No</b></TableCell>
                                                        <TableCell><b>Particulars</b></TableCell>
                                                        <TableCell><b>{labelHeader?.head1}</b></TableCell>
                                                        <TableCell><b>{labelHeader?.head2}</b></TableCell>
                                                        <TableCell><b>{labelHeader?.head3}</b></TableCell>
                                                        <TableCell><b>Y-o-Y Growth (%)</b></TableCell>
                                                        <TableCell><b>Q-o-Q Growth (%)</b></TableCell>
                                                    </TableRow>
                                                </TableHead>
                                                <TableBody>
                                                    {values?.data?.map((item: any, index: any) => (
                                                        <TableRow key={index + 1}>
                                                            <TableCell>
                                                                <p>{index + 1}</p>
                                                            </TableCell>
                                                            <TableCell>
                                                                <p>{item?.particulars}</p>
                                                            </TableCell>
                                                            <TableCell>
                                                                <AdvanceTextBoxField
                                                                    name={`data.${index}.lastAuditedQuarterVal`}
                                                                    label={""}
                                                                    onCustomChange={(currentVal: any) =>
                                                                        calculation(setFieldValue, values, index, currentVal, 'lastAuditedQuarterVal')}
                                                                    type={'number'}
                                                                    disabled={index === 0 || index === 1 || index === 4}
                                                                />
                                                            </TableCell>
                                                            <TableCell>
                                                                <AdvanceTextBoxField
                                                                    name={`data.${index}.prev2ndQuarterVal`}
                                                                    label={""}
                                                                    onCustomChange={(currentVal: any) =>
                                                                        calculation(setFieldValue, values, index, currentVal, 'prev2ndQuarterVal')}
                                                                    type={'number'}
                                                                    disabled={index === 0 || index === 1 || index === 4}
                                                                />
                                                            </TableCell>
                                                            <TableCell>
                                                                <AdvanceTextBoxField
                                                                    name={`data.${index}.prevQuarterVal`}
                                                                    label={""}
                                                                    onCustomChange={(currentVal: any) =>
                                                                        calculation(setFieldValue, values, index, currentVal, 'prevQuarterVal')}
                                                                    type={'number'}
                                                                    disabled={index === 0 || index === 1 || index === 4}
                                                                />
                                                            </TableCell>
                                                            <TableCell>
                                                                <AdvanceTextBoxField
                                                                    name={`data.${index}.yoyGrowth`}
                                                                    label={""}
                                                                    onCustomChange={(currentVal: any) =>
                                                                        calculation(setFieldValue, values, index, currentVal, 'yoyGrowth')}
                                                                    type={'number'}
                                                                    disabled={true}
                                                                />
                                                            </TableCell>
                                                            <TableCell>
                                                                <AdvanceTextBoxField
                                                                    name={`data.${index}.qoqGrowth`}
                                                                    label={""}
                                                                    onCustomChange={(currentVal: any) =>
                                                                        calculation(setFieldValue, values, index, currentVal, 'qoqGrowth')}
                                                                    type={'number'}
                                                                    disabled={true}
                                                                />
                                                            </TableCell>
                                                        </TableRow>
                                                    ))}
                                                </TableBody>
                                            </Table>
                                        )}
                                    </FieldArray>
                                </fieldset>
                                {values?.data?.[0]?.saveStatus !== "02" && (
                                    <>
                                        <Button
                                            className="sbmtBtn psn_btn mt-3 mb-3 ms-3"
                                            type='submit'
                                            onClick={() => handleClickSetAction('01')}
                                            variant="contained"
                                        >
                                            Save <CheckCircleOutlineIcon />
                                        </Button>
                                        <Button
                                            className="sbmtBtn sbmtBtn_scn psn_btn mt-3 mb-3 ms-3"
                                            type='submit'
                                            onClick={() => handleClickSetAction('02')}
                                            variant="contained"
                                        >
                                            Submit <SaveAsIcon />
                                        </Button>
                                    </>
                                )}
                            </Form>
                        )
                    }}
                </Formik>
            </div>
            <OnlineSnackbar open={openSnackbar} msg={snackMsg} severity={severity} handleSnackClose={handleClosePop} />
        </div>
    );
};

export default connect((state: any) => ({
    applId: state.userStore.applId,
}))(PortfolioDetailsForm);








import { FieldArray, Form, Formik } from "formik";
import { useEffect, useRef, useState } from "react";
import { Table, TableCell, TableHead, TableRow, TableBody, Button } from '@mui/material';
import { connect } from 'react-redux';
import CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';
import FormLoader from "../../../loader/FormLoader";
import ErrorMessageGlobal from "../../../components/framework/ErrorMessageGlobal";
import AutoSave from "../../../components/framework/AutoSave";
import { useGetLabelHeaderFormDataQuery, useGetMarketDetailPortfolioFormDataQuery, useSaveMarketDetailPortfolioFormDataMutation }
    from "../../../features/application-form/marketPositionForm";
import { AdvanceTextBoxField } from "../../../components/framework/AdvanceTextBoxField";
import { OnlineSnackbar } from "../../../components/shared/OnlineSnackbar";
import ConfirmationAlertDialog from "../../../models/application-form/ConfirmationAlertDialog";
import SaveAsIcon from '@mui/icons-material/SaveAs';

const PortfolioDetailsForm = ({ applId, excelData }: any) => {
    const [addPortfolioDetails] = useSaveMarketDetailPortfolioFormDataMutation();
    const { data: portfolioDetails, isLoading, isError } = useGetMarketDetailPortfolioFormDataQuery(applId);
    const { data: labelHeader } = useGetLabelHeaderFormDataQuery(applId);
    const [initialValues, setInitialValues] = useState<any>({ data: [] });
    const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);
    const [snackMsg, setSnackMsg] = useState<any>("");
    const [severity, setSeverity] = useState<string | any>("success");
    const [openConfirmation, setOpenConfirmation] = useState(false);
    const [formData, setFormData] = useState<any>("");
    const [actionVal, setActionVal] = useState<any>("");
    const formikRef = useRef<any>(null);
    const setFieldValueRef = useRef<any>(null);

    const [isUploading, setIsUploading] = useState<boolean>(false);
    const [snackMsgList, setSnackMsgList] = useState<any>("");

    const [snackOpen, setSnackOpen] = useState(false);
    const [snackSeverity, setSnackSeverity] = useState<'error' | 'success' | 'info'>('error');
    const [snackMessages, setSnackMessages] = useState<string[]>([]);

    useEffect(() => {
        if (portfolioDetails) {
            const dataWithApplId = portfolioDetails.map((item: any) => ({
                ...item,
                applId,
            }));
            setInitialValues({ data: dataWithApplId });
        }
    }, [portfolioDetails, applId]);

    const parseExcelValue = (value: any): number => {
        if (value === undefined || value === null || value === '' || value === '#DIV/0!') return 0;
        if (typeof value === 'string') value = value.replace(/,/g, '');
        return parseFloat(value) || 0;
    };

    const findMatchingExcelRow = (jsonData: any[], particulars: string): any[] | null => {
        for (let i = 0; i < jsonData.length; i++) {
            const row = jsonData[i];
            if (row && row[0] && row[0].toString().trim() === particulars.trim()) {
                return row;
            }
        }
        return null;
    };

    const processExcelData = (excelData: any[], formData: any[]) => {
        let totalOffBookAUM = 0;
        const mappedData = formData.map((row: any, index: number) => {
            const excelRow = findMatchingExcelRow(excelData, row.particulars);
            let newRow = { ...row, applId };

            if (excelRow) {
                const lastAuditedQuarterVal = parseExcelValue(excelRow[1]);
                const prev2ndQuarterVal = parseExcelValue(excelRow[2]);
                const prevQuarterVal = parseExcelValue(excelRow[3]);

                newRow = {
                    ...newRow,
                    lastAuditedQuarterVal,
                    prev2ndQuarterVal,
                    prevQuarterVal,
                    yoyGrowth: calculateYoY(lastAuditedQuarterVal, prevQuarterVal).toFixed(2),
                    qoqGrowth: calculateQoQ(prev2ndQuarterVal, prevQuarterVal).toFixed(2),
                };

                // Updated logic for new index structure (index 5-9 instead of 4-8)
                if (index >= 5 && index <= 9) {
                    totalOffBookAUM += prevQuarterVal;
                }
            }

            return newRow;
        });

        // Updated calculation for index 0 - sum of indices 1,2,3,4,5
        const totalSum = (mappedData[1]?.prevQuarterVal || 0) + 
                        (mappedData[2]?.prevQuarterVal || 0) + 
                        (mappedData[3]?.prevQuarterVal || 0) + 
                        (mappedData[4]?.prevQuarterVal || 0) + 
                        (mappedData[5]?.prevQuarterVal || 0);

        mappedData[0] = {
            ...mappedData[0],
            prevQuarterVal: totalSum.toFixed(2),
            yoyGrowth: calculateYoY(mappedData[0].lastAuditedQuarterVal, totalSum).toFixed(2),
            qoqGrowth: calculateQoQ(mappedData[0].prev2ndQuarterVal, totalSum).toFixed(2),
        };

        // Updated calculation for index 1 - sum of indices 2,3
        const onBookSum = (mappedData[2]?.prevQuarterVal || 0) + (mappedData[3]?.prevQuarterVal || 0);
        mappedData[1] = {
            ...mappedData[1],
            prevQuarterVal: onBookSum.toFixed(2),
            yoyGrowth: calculateYoY(mappedData[1].lastAuditedQuarterVal, onBookSum).toFixed(2),
            qoqGrowth: calculateQoQ(mappedData[1].prev2ndQuarterVal, onBookSum).toFixed(2),
        };

        // Updated calculation for index 4 - sum of indices 5-9
        mappedData[4] = {
            ...mappedData[4],
            prevQuarterVal: totalOffBookAUM.toFixed(2),
            yoyGrowth: calculateYoY(mappedData[4].lastAuditedQuarterVal, totalOffBookAUM).toFixed(2),
            qoqGrowth: calculateQoQ(mappedData[4].prev2ndQuarterVal, totalOffBookAUM).toFixed(2),
        };

        return mappedData;
    };

    useEffect(() => {
        if (excelData && excelData.length > 0 && portfolioDetails) {
            const processedData = processExcelData(excelData, portfolioDetails);
            setFieldValueRef.current('data', processedData);
            setOpenSnackbar(true);
            setSeverity("success");
            setSnackMsg("Portfolio Details data imported successfully");
        }
    }, [excelData]);

    const calculateYoY = (lastAuditedQuarterVal: number, prevQuarterVal: number): number => {
        return ((prevQuarterVal - lastAuditedQuarterVal) / (lastAuditedQuarterVal === 0 ? 1 : lastAuditedQuarterVal)) * 100;
    };

    const calculateQoQ = (prev2ndQuarterVal: number, prevQuarterVal: number): number => {
        return ((prevQuarterVal - prev2ndQuarterVal) / (prev2ndQuarterVal === 0 ? 1 : prev2ndQuarterVal)) * 100;
    };

    const handleSubmitApis = async (values: any) => {
        try {
            setIsUploading(true);
            let requestBody = values.data;
            if (!requestBody) {
                requestBody = values;
            }
            if (await addPortfolioDetails(requestBody).unwrap()) {
                if (requestBody?.[0]?.saveStatus === '02' || requestBody?.[0]?.saveStatus === '01') {
                    setOpenSnackbar(true);
                    setSeverity("success");
                    if (requestBody?.[0]?.saveStatus === '02') {
                        setSnackMsg("Section submitted successfully");
                    } else if (requestBody?.[0]?.saveStatus === '01') {
                        setSnackMsg("Record saved successfully");
                    }
                }
                setActionVal(null);
                return true;
            }
            return false;
        } catch (error: any) {
            console.error(error);
            setOpenSnackbar(true);
            setSeverity("error");
            setSnackMsg("Failed to save: " + error?.message);
            return false;
        }
    };

    const calculation = (setFieldValue: any, values: any, currentIndex: number, currentVal: number, currentRowId: string) => {
        // Updated calculation logic based on new requirements
        if (currentIndex === 2 || currentIndex === 3) {
            // When index 2 or 3 changes, update index 1 (sum of 2,3)
            calculationOnBook(setFieldValue, values, currentIndex, currentVal, currentRowId);
        }
        
        if (currentIndex >= 5 && currentIndex <= 9) {
            // When indices 5-9 change, update index 4 (sum of 5-9)
            calculationOffBookAUM(setFieldValue, values, currentIndex, currentVal, currentRowId);
        }
        
        // Always update index 0 when any of indices 1-5 change
        if (currentIndex >= 1 && currentIndex <= 5) {
            calculationTotalAUM(setFieldValue, values, currentIndex, currentVal, currentRowId);
        }
        
        calculationYoY(setFieldValue, values, currentIndex, currentVal, currentRowId);
        calculationQoQ(setFieldValue, values, currentIndex, currentVal, currentRowId);
    };

    const calculationYoY = (setFieldValue: any, values: any, currentIndex: number, currentVal: number, currentRowId: string) => {
        const currentRow = values.data[currentIndex];
        const lastAuditedQuarterVal = currentRowId === 'lastAuditedQuarterVal' ? currentVal : currentRow.lastAuditedQuarterVal;
        const prevQuarterVal = currentRowId === 'prevQuarterVal' ? currentVal : currentRow.prevQuarterVal;
        const calculate = ((+prevQuarterVal - +lastAuditedQuarterVal) / (+(Number(lastAuditedQuarterVal) === 0 ? 1 : lastAuditedQuarterVal))) * 100;
        const totalPrefix = 'data.' + currentIndex + '.yoyGrowth';
        setFieldValue(`${totalPrefix}`, calculate.toFixed(2));
    };

    const calculationQoQ = (setFieldValue: any, values: any, currentIndex: number, currentVal: number, currentRowId: string) => {
        const currentRow = values.data[currentIndex];
        const prev2ndQuarterVal = currentRowId === 'prev2ndQuarterVal' ? currentVal : currentRow.prev2ndQuarterVal;
        const prevQuarterVal = currentRowId === 'prevQuarterVal' ? currentVal : currentRow.prevQuarterVal;
        const calculate = ((+prevQuarterVal - +prev2ndQuarterVal) / (+(Number(prev2ndQuarterVal) === 0 ? 1 : prev2ndQuarterVal))) * 100;
        const totalPrefix = 'data.' + currentIndex + '.qoqGrowth';
        setFieldValue(`${totalPrefix}`, calculate.toFixed(2));
    };

    // New function for calculating total AUM (index 0 = sum of indices 1,2,3,4,5)
    const calculationTotalAUM = (setFieldValue: any, values: any, currentIndex: number, currentVal: number, currentRowId: string) => {
        let total = 0;
        for (let i = 1; i <= 5; i++) {
            if (i !== currentIndex) {
                total += +getRowValue(values, i, currentRowId);
            } else {
                total += +currentVal;
            }
        }
        const totalPrefix = 'data.0.' + currentRowId;
        setFieldValue(`${totalPrefix}`, total.toFixed(2));

        calculationYoY(setFieldValue, values, 0, total, currentRowId);
        calculationQoQ(setFieldValue, values, 0, total, currentRowId);
    };

    // New function for calculating on-book AUM (index 1 = sum of indices 2,3)
    const calculationOnBook = (setFieldValue: any, values: any, currentIndex: number, currentVal: number, currentRowId: string) => {
        let total = 0;
        for (let i = 2; i <= 3; i++) {
            if (i !== currentIndex) {
                total += +getRowValue(values, i, currentRowId);
            } else {
                total += +currentVal;
            }
        }
        const totalPrefix = 'data.1.' + currentRowId;
        setFieldValue(`${totalPrefix}`, total.toFixed(2));

        calculationYoY(setFieldValue, values, 1, total, currentRowId);
        calculationQoQ(setFieldValue, values, 1, total, currentRowId);

        return Number(total.toFixed(2));
    };

    // Updated function for calculating off-book AUM (index 4 = sum of indices 5-9)
    const calculationOffBookAUM = (setFieldValue: any, values: any, currentIndex: number, currentVal: number, currentRowId: string) => {
        let total = 0;
        for (let i = 5; i <= 9; i++) {
            if (i !== currentIndex) {
                total += +getRowValue(values, i, currentRowId);
            } else {
                total += +currentVal;
            }
        }
        const totalPrefix = 'data.4.' + currentRowId;
        setFieldValue(`${totalPrefix}`, total.toFixed(2));

        calculationYoY(setFieldValue, values, 4, total, currentRowId);
        calculationQoQ(setFieldValue, values, 4, total, currentRowId);

        return Number(total.toFixed(2));
    };

    const getRowValue = (values: any, index: number, currentRowId: string) => {
        if (currentRowId === 'lastAuditedQuarterVal') {
            return values.data[index].lastAuditedQuarterVal;
        } else if (currentRowId === 'prev2ndQuarterVal') {
            return values.data[index].prev2ndQuarterVal;
        } else if (currentRowId === 'prevQuarterVal') {
            return values.data[index].prevQuarterVal;
        } else if (currentRowId === 'yoyGrowth') {
            return values.data[index].yoyGrowth;
        } else if (currentRowId === 'qoqGrowth') {
            return values.data[index].qoqGrowth;
        }
        return 0;
    };

    const handleClosePop = () => {
        setOpenSnackbar(false);
    };

    const handleCloseConfirmation = () => {
        setActionVal(null);
        setOpenConfirmation(false);
    };

    const handleSubmitConfirmation = (values: any) => {
        setOpenConfirmation(false);
        handleSubmitApis(values);
    };

    const handleSubmit = async (values: any) => {
        const finalValue = values?.data?.map((listData: any) => ({
            ...listData,
            saveStatus: actionVal,
        }));
        if (actionVal === '02') {
            setFormData(finalValue);
            setOpenConfirmation(true);
        } else {
            handleSubmitApis(finalValue);
        }
        setActionVal(null);
    };

    const handleClickSetAction = (action: any) => {
        setActionVal(action);
    };

    if (isLoading) return <FormLoader />;
    if (isError) return <ErrorMessageGlobal status={isError} />;

    return (
        <div className="custome-form">
            <ConfirmationAlertDialog
                id={applId}
                type={4}
                open={openConfirmation}
                handleClose={handleCloseConfirmation}
                handleDelete={handleSubmitConfirmation}
                values={formData}
            />
            <div className="wrap-inner-table mt-0">
                <Formik
                    initialValues={initialValues}
                    onSubmit={handleSubmit}
                    enableReinitialize={true}
                    innerRef={formikRef}
                >
                    {({ values, setFieldValue }) => {
                        setFieldValueRef.current = setFieldValue;
                        return (
                            <Form>
                                <fieldset disabled={values?.data?.[0]?.saveStatus === "02"}>
                                    {values?.data?.[0]?.saveStatus !== "02" && (
                                        <AutoSave handleSubmit={handleSubmit} values={values} debounceMs={10000} autoStyle={true} />
                                    )}
                                    <FieldArray name="data">
                                        {() => (
                                            <Table sx={{ minWidth: 650 }} aria-label="simple table">
                                                <TableHead>
                                                    <TableRow>
                                                        <TableCell><b>Sr.No</b></TableCell>
                                                        <TableCell><b>Particulars</b></TableCell>
                                                        <TableCell><b>{labelHeader?.head1}</b></TableCell>
                                                        <TableCell><b>{labelHeader?.head2}</b></TableCell>
                                                        <TableCell><b>{labelHeader?.head3}</b></TableCell>
                                                        <TableCell><b>Y-o-Y Growth (%)</b></TableCell>
                                                        <TableCell><b>Q-o-Q Growth (%)</b></TableCell>
                                                    </TableRow>
                                                </TableHead>
                                                <TableBody>
                                                    {values?.data?.map((item: any, index: any) => (
                                                        <TableRow key={index + 1}>
                                                            <TableCell>
                                                                <p>{index + 1}</p>
                                                            </TableCell>
                                                            <TableCell>
                                                                <p>{item?.particulars}</p>
                                                            </TableCell>
                                                            <TableCell>
                                                                <AdvanceTextBoxField
                                                                    name={`data.${index}.lastAuditedQuarterVal`}
                                                                    label={""}
                                                                    onCustomChange={(currentVal: any) =>
                                                                        calculation(setFieldValue, values, index, currentVal, 'lastAuditedQuarterVal')}
                                                                    type={'number'}
                                                                    disabled={index === 0 || index === 1 || index === 4}
                                                                />
                                                            </TableCell>
                                                            <TableCell>
                                                                <AdvanceTextBoxField
                                                                    name={`data.${index}.prev2ndQuarterVal`}
                                                                    label={""}
                                                                    onCustomChange={(currentVal: any) =>
                                                                        calculation(setFieldValue, values, index, currentVal, 'prev2ndQuarterVal')}
                                                                    type={'number'}
                                                                    disabled={index === 0 || index === 1 || index === 4}
                                                                />
                                                            </TableCell>
                                                            <TableCell>
                                                                <AdvanceTextBoxField
                                                                    name={`data.${index}.prevQuarterVal`}
                                                                    label={""}
                                                                    onCustomChange={(currentVal: any) =>
                                                                        calculation(setFieldValue, values, index, currentVal, 'prevQuarterVal')}
                                                                    type={'number'}
                                                                    disabled={index === 0 || index === 1 || index === 4}
                                                                />
                                                            </TableCell>
                                                            <TableCell>
                                                                <AdvanceTextBoxField
                                                                    name={`data.${index}.yoyGrowth`}
                                                                    label={""}
                                                                    onCustomChange={(currentVal: any) =>
                                                                        calculation(setFieldValue, values, index, currentVal, 'yoyGrowth')}
                                                                    type={'number'}
                                                                    disabled={true}
                                                                />
                                                            </TableCell>
                                                            <TableCell>
                                                                <AdvanceTextBoxField
                                                                    name={`data.${index}.qoqGrowth`}
                                                                    label={""}
                                                                    onCustomChange={(currentVal: any) =>
                                                                        calculation(setFieldValue, values, index, currentVal, 'qoqGrowth')}
                                                                    type={'number'}
                                                                    disabled={true}
                                                                />
                                                            </TableCell>
                                                        </TableRow>
                                                    ))}
                                                </TableBody>
                                            </Table>
                                        )}
                                    </FieldArray>
                                </fieldset>
                                {values?.data?.[0]?.saveStatus !== "02" && (
                                    <>
                                        <Button
                                            className="sbmtBtn psn_btn mt-3 mb-3 ms-3"
                                            type='submit'
                                            onClick={() => handleClickSetAction('01')}
                                            variant="contained"
                                        >
                                            Save <CheckCircleOutlineIcon />
                                        </Button>
                                        <Button
                                            className="sbmtBtn sbmtBtn_scn psn_btn mt-3 mb-3 ms-3"
                                            type='submit'
                                            onClick={() => handleClickSetAction('02')}
                                            variant="contained"
                                        >
                                            Submit <SaveAsIcon />
                                        </Button>
                                    </>
                                )}
                            </Form>
                        )
                    }}
                </Formik>
            </div>
            <OnlineSnackbar open={openSnackbar} msg={snackMsg} severity={severity} handleSnackClose={handleClosePop} />
        </div>
    );
};

export default connect((state: any) => ({
    applId: state.userStore.applId,
}))(PortfolioDetailsForm);








import { FieldArray, Form, Formik } from "formik";
import { useEffect, useRef, useState } from "react";
import { Table, TableCell, TableHead, TableRow, TableBody, Button } from '@mui/material';
import { connect } from 'react-redux';
import CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';
import FormLoader from "../../../loader/FormLoader";
import ErrorMessageGlobal from "../../../components/framework/ErrorMessageGlobal";
import AutoSave from "../../../components/framework/AutoSave";
import { useGetLabelHeaderFormDataQuery, useGetMarketDetailPortfolioFormDataQuery, useSaveMarketDetailPortfolioFormDataMutation }
    from "../../../features/application-form/marketPositionForm";
import { AdvanceTextBoxField } from "../../../components/framework/AdvanceTextBoxField";
import { OnlineSnackbar } from "../../../components/shared/OnlineSnackbar";
import ConfirmationAlertDialog from "../../../models/application-form/ConfirmationAlertDialog";
import SaveAsIcon from '@mui/icons-material/SaveAs';

const PortfolioDetailsForm = ({ applId, excelData }: any) => {
    const [addPortfolioDetails] = useSaveMarketDetailPortfolioFormDataMutation();
    const { data: portfolioDetails, isLoading, isError } = useGetMarketDetailPortfolioFormDataQuery(applId);
    const { data: labelHeader } = useGetLabelHeaderFormDataQuery(applId);
    const [initialValues, setInitialValues] = useState<any>({ data: [] });
    const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);
    const [snackMsg, setSnackMsg] = useState<any>("");
    const [severity, setSeverity] = useState<string | any>("success");
    const [openConfirmation, setOpenConfirmation] = useState(false);
    const [formData, setFormData] = useState<any>("");
    const [actionVal, setActionVal] = useState<any>("");
    const formikRef = useRef<any>(null);
    const setFieldValueRef = useRef<any>(null);

    const calculatedIndices = [0, 1, 4];
    const calculatedRowsDependencies = {
        1: [2, 3],          // Index 1 is sum of indices 2 and 3
        4: [5, 6, 7, 8],    // Index 4 is sum of indices 5 to 8 (shifted from index 3)
        0: [1, 2, 3, 4, 5]  // Index 0 is sum of indices 1, 2, 3, 4, and 5
    };

    useEffect(() => {
        if (portfolioDetails) {
            const dataWithApplId = portfolioDetails.map((item: any) => ({
                ...item,
                applId,
            }));
            setInitialValues({ data: dataWithApplId });
        }
    }, [portfolioDetails, applId]);

    const parseExcelValue = (value: any): number => {
        if (value === undefined || value === null || value === '' || value === '#DIV/0!') return 0;
        if (typeof value === 'string') value = value.replace(/,/g, '');
        return parseFloat(value) || 0;
    };

    const findMatchingExcelRow = (jsonData: any[], particulars: string): any[] | null => {
        for (let i = 0; i < jsonData.length; i++) {
            const row = jsonData[i];
            if (row && row[0] && row[0].toString().trim()    return row;
        }
        return null;
    };

    const processExcelData = (excelData: any[], formData: any[]) => {
        let mappedData = formData.map((row: any, index: number) => {
            const excelRow = findMatchingExcelRow(excelData, row.particulars);
            if (excelRow) {
                return {
                    ...row,
                    lastAuditedQuarterVal: parseExcelValue(excelRow[1]),
                    prev2ndQuarterVal: parseExcelValue(excelRow[2]),
                    prevQuarterVal: parseExcelValue(excelRow[3]),
                };
            }
            return row;
        });

        // Recalculate calculated rows
        ['lastAuditedQuarterVal', 'prev2ndQuarterVal', 'prevQuarterVal'].forEach(col => {
            const sum1 = calculatedRowsDependencies[1].reduce((acc, i) => acc + Number(mappedData[i][col] || 0), 0);
            mappedData[1] = { ...mappedData[1], [col]: sum1.toFixed(2) };

            const sum4 = calculatedRowsDependencies[4].reduce((acc, i) => acc + Number(mappedData[i][col] || 0), 0);
            mappedData[4] = { ...mappedData[4], [col]: sum4.toFixed(2) };

            const sum0 = calculatedRowsDependencies[0].reduce((acc, i) => acc + Number(mappedData[i][col] || 0), 0);
            mappedData[0] = { ...mappedData[0], [col]: sum0.to OBSOLETEFixed(2) };
        });

        // Calculate growth for all rows
        mappedData = mappedData.map(row => {
            const lastAuditedQuarterVal = Number(row.lastAuditedQuarterVal) || 0;
            const prev2ndQuarterVal = Number(row.prev2ndQuarterVal) || 0;
            const prevQuarterVal = Number(row.prevQuarterVal) || 0;
            const yoyGrowth = ((prevQuarterVal - lastAuditedQuarterVal) / (lastAuditedQuarterVal === 0 ? 1 : lastAuditedQuarterVal) * 100).toFixed(2);
            const qoqGrowth = ((prevQuarterVal - prev2ndQuarterVal) / (prev2ndQuarterVal === 0 ? 1 : prev2ndQuarterVal) * 100).toFixed(2);
            return { ...row, yoyGrowth, qoqGrowth };
        });

        return mappedData;
    };

    useEffect(() => {
        if (excelData && excelData.length > 0 && portfolioDetails) {
            const processedData = processExcelData(excelData, portfolioDetails);
            setFieldValueRef.current('data', processedData);
            setOpenSnackbar(true);
            setSeverity("success");
            setSnackMsg("Portfolio Details data imported successfully");
        }
    }, [excelData]);

    const handleSubmitApis = async (values: any) => {
        try {
            let requestBody = values.data || values;
            if (await addPortfolioDetails(requestBody).unwrap()) {
                if (requestBody?.[0]?.saveStatus === '02' || requestBody?.[0]?.saveStatus === '01') {
                    setOpenSnackbar(true);
                    setSeverity("success");
                    setSnackMsg(requestBody?.[0]?.saveStatus === '02' ? "Section submitted successfully" : "Record saved successfully");
                }
                setActionVal(null);
                return true;
            }
            return false;
        } catch (error: any) {
            console.error(error);
            setOpenSnackbar(true);
            setSeverity("error");
            setSnackMsg("Failed to save: " + error?.message);
            return false;
        }
    };

    const updateCalculatedRow = (calcIndex: number, col: string, setFieldValue: any, values: any) => {
        const deps = calculatedRowsDependencies[calcIndex];
        if (deps) {
            const sum = deps.reduce((acc, depIndex) => acc + Number(values.data[depIndex][col] || 0), 0);
            setFieldValue(`data.${calcIndex}.${col}`, sum.toFixed(2));
        }
    };

    const handleFieldChange = (index: number, col: string, value: any, setFieldValue: any, values: any) => {
        setFieldValue(`data.${index}.${col}`, value);

        Object.keys(calculatedRowsDependencies).forEach(calcIndex => {
            if (calculatedRowsDependencies[calcIndex].includes(index)) {
                updateCalculatedRow(Number(calcIndex), col, setFieldValue, values);
                Object.keys(calculatedRowsDependencies).forEach(parentCalcIndex => {
                    if (calculatedRowsDependencies[parentCalcIndex].includes(Number(calcIndex))) {
                        updateCalculatedRow(Number(parentCalcIndex), col, setFieldValue, values);
                    }
                });
            }
        });

        values.data.forEach((_: any, idx: number) => {
            const row = values.data[idx];
            const lastAuditedQuarterVal = Number(row.lastAuditedQuarterVal) || 0;
            const prev2ndQuarterVal = Number(row.prev2ndQuarterVal) || 0;
            const prevQuarterVal = Number(row.prevQuarterVal) || 0;
            setFieldValue(`data.${idx}.yoyGrowth`, ((prevQuarterVal - lastAuditedQuarterVal) / (lastAuditedQuarterVal === 0 ? 1 : lastAuditedQuarterVal) * 100).toFixed(2));
            setFieldValue(`data.${idx}.qoqGrowth`, ((prevQuarterVal - prev2ndQuarterVal) / (prev2ndQuarterVal === 0 ? 1 : prev2ndQuarterVal) * 100).toFixed(2));
        });
    };

    const handleClosePop = () => setOpenSnackbar(false);
    const handleCloseConfirmation = () => {
        setActionVal(null);
        setOpenConfirmation(false);
    };
    const handleSubmitConfirmation = (values: any) => {
        setOpenConfirmation(false);
        handleSubmitApis(values);
    };
    const handleSubmit = async (values: any) => {
        const finalValue = values.data.map((listData: any) => ({
            ...listData,
            saveStatus: actionVal,
        }));
        if (actionVal === '02') {
            setFormData(finalValue);
            setOpenConfirmation(true);
        } else {
            handleSubmitApis(finalValue);
        }
        setActionVal(null);
    };
    const handleClickSetAction = (action: any) => setActionVal(action);

    if (isLoading) return <FormLoader />;
    if (isError) return <ErrorMessageGlobal status={isError} />;

    return (
        <div className="custome-form">
            <ConfirmationAlertDialog
                id={applId}
                type={4}
                open={openConfirmation}
                handleClose={handleCloseConfirmation}
                handleDelete={handleSubmitConfirmation}
                values={formData}
            />
            <div className="wrap-inner-table mt-0">
                <Formik
                    initialValues={initialValues}
                    onSubmit={handleSubmit}
                    enableReinitialize={true}
                    innerRef={formikRef}
                >
                    {({ values, setFieldValue }) => {
                        setFieldValueRef.current = setFieldValue;
                        return (
                            <Form>
                                <fieldset disabled={values?.data?.[0]?.saveStatus === "02"}>
                                    {values?.data?.[0]?.saveStatus !== "02" && (
                                        <AutoSave handleSubmit={handleSubmit} values={values} debounceMs={10000} autoStyle={true} />
                                    )}
                                    <FieldArray name="data">
                                        {() => (
                                            <Table sx={{ minWidth: 650 }} aria-label="simple table">
                                                <TableHead>
                                                    <TableRow>
                                                        <TableCell><b>Sr.No</b></TableCell>
                                                        <TableCell><b>Particulars</b></TableCell>
                                                        <TableCell><b>{labelHeader?.head1}</b></TableCell>
                                                        <TableCell><b>{labelHeader?.head2}</b></TableCell>
                                                        <TableCell><b>{labelHeader?.head3}</b></TableCell>
                                                        <TableCell><b>Y-o-Y Growth (%)</b></TableCell>
                                                        <TableCell><b>Q-o-Q Growth (%)</b></TableCell>
                                                    </TableRow>
                                                </TableHead>
                                                <TableBody>
                                                    {values?.data?.map((item: any, index: any) => (
                                                        <TableRow key={index + 1}>
                                                            <TableCell>{index + 1}</TableCell>
                                                            <TableCell>{item?.particulars}</TableCell>
                                                            <TableCell>
                                                                <AdvanceTextBoxField
                                                                    name={`data.${index}.lastAuditedQuarterVal`}
                                                                    label={""}
                                                                    onCustomChange={(currentVal: any) =>
                                                                        handleFieldChange(index, 'lastAuditedQuarterVal', currentVal, setFieldValue, values)}
                                                                    type={'number'}
                                                                    disabled={calculatedIndices.includes(index)}
                                                                />
                                                            </TableCell>
                                                            <TableCell>
                                                                <AdvanceTextBoxField
                                                                    name={`data.${index}.prev2ndQuarterVal`}
                                                                    label={""}
                                                                    onCustomChange={(currentVal: any) =>
                                                                        handleFieldChange(index, 'prev2ndQuarterVal', currentVal, setFieldValue, values)}
                                                                    type={'number'}
                                                                    disabled={calculatedIndices.includes(index)}
                                                                />
                                                            </TableCell>
                                                            <TableCell>
                                                                <AdvanceTextBoxField
                                                                    name={`data.${index}.prevQuarterVal`}
                                                                    label={""}
                                                                    onCustomChange={(currentVal: any) =>
                                                                        handleFieldChange(index, 'prevQuarterVal', currentVal, setFieldValue, values)}
                                                                    type={'number'}
                                                                    disabled={calculatedIndices.includes(index)}
                                                                />
                                                            </TableCell>
                                                            <TableCell>
                                                                <AdvanceTextBoxField
                                                                    name={`data.${index}.yoyGrowth`}
                                                                    label={""}
                                                                    type={'number'}
                                                                    disabled={true}
                                                                />
                                                            </TableCell>
                                                            <TableCell>
                                                                <AdvanceTextBoxField
                                                                    name={`data.${index}.qoqGrowth`}
                                                                    label={""}
                                                                    type={'number'}
                                                                    disabled={true}
                                                                />
                                                            </TableCell>
                                                        </TableRow>
                                                    ))}
                                                </TableBody>
                                            </Table>
                                        )}
                                    </FieldArray>
                                </fieldset>
                                {values?.data?.[0]?.saveStatus !== "02" && (
                                    <>
                                        <Button
                                            className="sbmtBtn psn_btn mt-3 mb-3 ms-3"
                                            type='submit'
                                            onClick={() => handleClickSetAction('01')}
                                            variant="contained"
                                        >
                                            Save <CheckCircleOutlineIcon />
                                        </Button>
                                        <Button
                                            className="sbmtBtn sbmtBtn_scn psn_btn mt-3 mb-3 ms-3"
                                            type='submit'
                                            onClick={() => handleClickSetAction('02')}
                                            variant="contained"
                                        >
                                            Submit <SaveAsIcon />
                                        </Button>
                                    </>
                                )}
                            </Form>
                        );
                    }}
                </Formik>
            </div>
            <OnlineSnackbar open={openSnackbar} msg={snackMsg} severity={severity} handleSnackClose={handleClosePop} />
        </div>
    );
};

export default connect((state: any) => ({
    applId: state.userStore.applId,
}))(PortfolioDetailsForm);




import { FieldArray, Form, Formik } from "formik";
import { useEffect, useRef, useState } from "react";
import { Table, TableCell, TableHead, TableRow, TableBody, Button } from '@mui/material';
import { connect } from 'react-redux';
import CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';
import FormLoader from "../../../loader/FormLoader";
import ErrorMessageGlobal from "../../../components/framework/ErrorMessageGlobal";
import AutoSave from "../../../components/framework/AutoSave";
import { useGetLabelHeaderFormDataQuery, useGetMarketDetailPortfolioFormDataQuery, useSaveMarketDetailPortfolioFormDataMutation }
    from "../../../features/application-form/marketPositionForm";
import { AdvanceTextBoxField } from "../../../components/framework/AdvanceTextBoxField";
import { OnlineSnackbar } from "../../../components/shared/OnlineSnackbar";
import ConfirmationAlertDialog from "../../../models/application-form/ConfirmationAlertDialog";
import SaveAsIcon from '@mui/icons-material/SaveAs';

const PortfolioDetailsForm = ({ applId, excelData }: any) => {
    const [addPortfolioDetails] = useSaveMarketDetailPortfolioFormDataMutation();
    const { data: portfolioDetails, isLoading, isError } = useGetMarketDetailPortfolioFormDataQuery(applId);
    const { data: labelHeader } = useGetLabelHeaderFormDataQuery(applId);
    const [initialValues, setInitialValues] = useState<any>({ data: [] });
    const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);
    const [snackMsg, setSnackMsg] = useState<any>("");
    const [severity, setSeverity] = useState<string | any>("success");
    const [openConfirmation, setOpenConfirmation] = useState(false);
    const [formData, setFormData] = useState<any>("");
    const [actionVal, setActionVal] = useState<any>("");
    const formikRef = useRef<any>(null);
    const setFieldValueRef = useRef<any>(null);

    const [isUploading, setIsUploading] = useState<boolean>(false);
    const [snackMsgList, setSnackMsgList] = useState<any>("");

    const [snackOpen, setSnackOpen] = useState(false);
    const [snackSeverity, setSnackSeverity] = useState<'error' | 'success' | 'info'>('error');
    const [snackMessages, setSnackMessages] = useState<string[]>([]);



    useEffect(() => {
        if (portfolioDetails) {
            const dataWithApplId = portfolioDetails.map((item: any) => ({
                ...item,
                applId,
            }));
            setInitialValues({ data: dataWithApplId });
        }
    }, [portfolioDetails, applId]);

    const parseExcelValue = (value: any): number => {
        if (value === undefined || value === null || value === '' || value === '#DIV/0!') return 0;
        if (typeof value === 'string') value = value.replace(/,/g, '');
        return parseFloat(value) || 0;
    };

    const findMatchingExcelRow = (jsonData: any[], particulars: string): any[] | null => {
        for (let i = 0; i < jsonData.length; i++) {
            const row = jsonData[i];
            if (row && row[0] && row[0].toString().trim() === particulars.trim()) {
                return row;
            }
        }
        return null;
    };

    const processExcelData = (excelData: any[], formData: any[]) => {
        let totalOffBookAUM = 0;
        const mappedData = formData.map((row: any, index: number) => {
            const excelRow = findMatchingExcelRow(excelData, row.particulars);
            let newRow = { ...row, applId };

            if (excelRow) {
                const lastAuditedQuarterVal = parseExcelValue(excelRow[1]);
                const prev2ndQuarterVal = parseExcelValue(excelRow[2]);
                const prevQuarterVal = parseExcelValue(excelRow[3]);

                newRow = {
                    ...newRow,
                    lastAuditedQuarterVal,
                    prev2ndQuarterVal,
                    prevQuarterVal,
                    yoyGrowth: calculateYoY(lastAuditedQuarterVal, prevQuarterVal).toFixed(2),
                    qoqGrowth: calculateQoQ(prev2ndQuarterVal, prevQuarterVal).toFixed(2),
                };


                if (index >= 4 && index <= 8) {
                    totalOffBookAUM += prevQuarterVal;
                }
            }

            return newRow;
        });

        const onBookAUM = mappedData[1]?.prevQuarterVal || 0;
        mappedData[0] = {
            ...mappedData[0],
            prevQuarterVal: (onBookAUM + totalOffBookAUM).toFixed(2),
            yoyGrowth: calculateYoY(mappedData[0].lastAuditedQuarterVal, (onBookAUM + totalOffBookAUM)).toFixed(2),
            qoqGrowth: calculateQoQ(mappedData[0].prev2ndQuarterVal, (onBookAUM + totalOffBookAUM)).toFixed(2),
        };

        mappedData[3] = {
            ...mappedData[3],
            prevQuarterVal: totalOffBookAUM.toFixed(2),
            yoyGrowth: calculateYoY(mappedData[3].lastAuditedQuarterVal, totalOffBookAUM).toFixed(2),
            qoqGrowth: calculateQoQ(mappedData[3].prev2ndQuarterVal, totalOffBookAUM).toFixed(2),
        };

        return mappedData;
    };
    useEffect(() => {
        if (excelData && excelData.length > 0 && portfolioDetails) {
            const processedData = processExcelData(excelData, portfolioDetails);
            setFieldValueRef.current('data', processedData);
            setOpenSnackbar(true);
            setSeverity("success");
            setSnackMsg("Portfolio Details data imported successfully");
        }
    }, [excelData]);
    const calculateYoY = (lastAuditedQuarterVal: number, prevQuarterVal: number): number => {
        return ((prevQuarterVal - lastAuditedQuarterVal) / (lastAuditedQuarterVal === 0 ? 1 : lastAuditedQuarterVal)) * 100;
    };

    const calculateQoQ = (prev2ndQuarterVal: number, prevQuarterVal: number): number => {
        return ((prevQuarterVal - prev2ndQuarterVal) / (prev2ndQuarterVal === 0 ? 1 : prev2ndQuarterVal)) * 100;
    };




    const handleSubmitApis = async (values: any) => {
        try {
            setIsUploading(true);
            let requestBody = values.data;
            if (!requestBody) {
                requestBody = values;
            }
            if (await addPortfolioDetails(requestBody).unwrap()) {
                if (requestBody?.[0]?.saveStatus === '02' || requestBody?.[0]?.saveStatus === '01') {
                    setOpenSnackbar(true);
                    setSeverity("success");
                    if (requestBody?.[0]?.saveStatus === '02') {
                        setSnackMsg("Section submitted successfully");
                    } else if (requestBody?.[0]?.saveStatus === '01') {
                        setSnackMsg("Record saved successfully");
                    }
                }
                setActionVal(null);
                return true;
            }
            return false;
        } catch (error: any) {
            console.error(error);
            setOpenSnackbar(true);
            setSeverity("error");
            setSnackMsg("Failed to save: " + error?.message);
            return false;
        }
    };

    const calculation = (setFieldValue: any, values: any, currentIndex: number, currentVal: number, currentRowId: string) => {
        let totaloffbook = 0;
        if (currentIndex === 5 || currentIndex === 6 || currentIndex === 7 || currentIndex === 8 || currentIndex === 9 ) {
            totaloffbook = calculationOffBookAUM(setFieldValue, values, currentIndex, currentVal, currentRowId);
        }
        if (currentIndex !== 2) {
            calculationAUM(setFieldValue, values, currentIndex, currentVal, currentRowId, totaloffbook);
        }
        calculationYoY(setFieldValue, values, currentIndex, currentVal, currentRowId);
        calculationQoQ(setFieldValue, values, currentIndex, currentVal, currentRowId);
    };

    const calculationYoY = (setFieldValue: any, values: any, currentIndex: number, currentVal: number, currentRowId: string) => {
        const currentRow = values.data[currentIndex];
        const lastAuditedQuarterVal = currentRowId === 'lastAuditedQuarterVal' ? currentVal : currentRow.lastAuditedQuarterVal;
        const prevQuarterVal = currentRowId === 'prevQuarterVal' ? currentVal : currentRow.prevQuarterVal;
        const calculate = ((+prevQuarterVal - +lastAuditedQuarterVal) / (+(Number(lastAuditedQuarterVal) === 0 ? 1 : lastAuditedQuarterVal))) * 100;
        const totalPrefix = 'data.' + currentIndex + '.yoyGrowth';
        setFieldValue(`${totalPrefix}`, calculate.toFixed(2));
    };

    const calculationQoQ = (setFieldValue: any, values: any, currentIndex: number, currentVal: number, currentRowId: string) => {
        const currentRow = values.data[currentIndex];
        const prev2ndQuarterVal = currentRowId === 'prev2ndQuarterVal' ? currentVal : currentRow.prev2ndQuarterVal;
        const prevQuarterVal = currentRowId === 'prevQuarterVal' ? currentVal : currentRow.prevQuarterVal;
        const calculate = ((+prevQuarterVal - +prev2ndQuarterVal) / (+(Number(prev2ndQuarterVal) === 0 ? 1 : prev2ndQuarterVal))) * 100;
        const totalPrefix = 'data.' + currentIndex + '.qoqGrowth';
        setFieldValue(`${totalPrefix}`, calculate.toFixed(2));
    };

    const calculationAUM = (setFieldValue: any, values: any, currentIndex: number, currentVal: number, currentRowId: string, totaloffbook: number) => {
        let onBook = currentVal;
        if (currentIndex !== 1) {
            onBook = getRowValue(values, 1, currentRowId);
        } else {
            totaloffbook = getRowValue(values, 4, currentRowId);
        }
        const total = (+onBook + +totaloffbook);
        const totalPrefix = 'data.0.' + currentRowId;
        setFieldValue(`${totalPrefix}`, total.toFixed(2));

        calculationYoY(setFieldValue, values, 0, total, currentRowId);
        calculationQoQ(setFieldValue, values, 0, total, currentRowId);
    };

    const calculationOffBookAUM = (setFieldValue: any, values: any, currentIndex: number, currentVal: number, currentRowId: string) => {
        let total = 0;
        for (let i = 4; i < 9; i++) {
            if (i !== currentIndex) {
                total = (+total + +getRowValue(values, i, currentRowId));
            }
        }
        total = (+currentVal + +total);
        const totalPrefix = 'data.4.' + currentRowId;
        setFieldValue(`${totalPrefix}`, total.toFixed(2));

        calculationYoY(setFieldValue, values, 4, total, currentRowId);
        calculationQoQ(setFieldValue, values, 4, total, currentRowId);

        return Number(total.toFixed(2));
    };

    const getRowValue = (values: any, index: number, currentRowId: string) => {
        if (currentRowId === 'lastAuditedQuarterVal') {
            return values.data[index].lastAuditedQuarterVal;
        } else if (currentRowId === 'prev2ndQuarterVal') {
            return values.data[index].prev2ndQuarterVal;
        } else if (currentRowId === 'prevQuarterVal') {
            return values.data[index].prevQuarterVal;
        } else if (currentRowId === 'yoyGrowth') {
            return values.data[index].yoyGrowth;
        } else if (currentRowId === 'qoqGrowth') {
            return values.data[index].qoqGrowth;
        }
    };

    const handleClosePop = () => {
        setOpenSnackbar(false);
    };

    const handleCloseConfirmation = () => {
        setActionVal(null);
        setOpenConfirmation(false);
    };

    const handleSubmitConfirmation = (values: any) => {
        setOpenConfirmation(false);
        handleSubmitApis(values);
    };

    const handleSubmit = async (values: any) => {
        const finalValue = values?.data?.map((listData: any) => ({
            ...listData,
            saveStatus: actionVal,
        }));
        if (actionVal === '02') {
            setFormData(finalValue);
            setOpenConfirmation(true);
        } else {
            handleSubmitApis(finalValue);
        }
        setActionVal(null);
    };

    const handleClickSetAction = (action: any) => {
        setActionVal(action);
    };

    if (isLoading) return <FormLoader />;
    if (isError) return <ErrorMessageGlobal status={isError} />;
    

    return (
        <div className="custome-form">
            <ConfirmationAlertDialog
                id={applId}
                type={4}
                open={openConfirmation}
                handleClose={handleCloseConfirmation}
                handleDelete={handleSubmitConfirmation}
                values={formData}
            />
            <div className="wrap-inner-table mt-0">
                <Formik
                    initialValues={initialValues}
                    onSubmit={handleSubmit}
                    enableReinitialize={true}
                    innerRef={formikRef}
                >
                    {({ values, setFieldValue }) => {
                        setFieldValueRef.current = setFieldValue;
                        return (
                            <Form>
                                <fieldset disabled={values?.data?.[0]?.saveStatus === "02"}>
                                    {values?.data?.[0]?.saveStatus !== "02" && (
                                        <AutoSave handleSubmit={handleSubmit} values={values} debounceMs={10000} autoStyle={true} />
                                    )}
                                    <FieldArray name="data">
                                        {() => (
                                            <Table sx={{ minWidth: 650 }} aria-label="simple table">
                                                <TableHead>
                                                    <TableRow>
                                                        <TableCell><b>Sr.No</b></TableCell>
                                                        <TableCell><b>Particulars</b></TableCell>
                                                        <TableCell><b>{labelHeader?.head1}</b></TableCell>
                                                        <TableCell><b>{labelHeader?.head2}</b></TableCell>
                                                        <TableCell><b>{labelHeader?.head3}</b></TableCell>
                                                        <TableCell><b>Y-o-Y Growth (%)</b></TableCell>
                                                        <TableCell><b>Q-o-Q Growth (%)</b></TableCell>
                                                    </TableRow>
                                                </TableHead>
                                                <TableBody>
                                                    {values?.data?.map((item: any, index: any) => (
                                                        <TableRow key={index + 1}>
                                                            <TableCell>
                                                                <p>{index + 1}</p>
                                                            </TableCell>
                                                            <TableCell>
                                                                <p>{item?.particulars}</p>
                                                            </TableCell>
                                                            <TableCell>
                                                                <AdvanceTextBoxField
                                                                    name={`data.${index}.lastAuditedQuarterVal`}
                                                                    label={""}
                                                                    onCustomChange={(currentVal: any) =>
                                                                        calculation(setFieldValue, values, index, currentVal, 'lastAuditedQuarterVal')}
                                                                    type={'number'}
                                                                    disabled={index === 0 || index === 4}
                                                                />
                                                            </TableCell>
                                                            <TableCell>
                                                                <AdvanceTextBoxField
                                                                    name={`data.${index}.prev2ndQuarterVal`}
                                                                    label={""}
                                                                    onCustomChange={(currentVal: any) =>
                                                                        calculation(setFieldValue, values, index, currentVal, 'prev2ndQuarterVal')}
                                                                    type={'number'}
                                                                    disabled={index === 0 || index === 4}
                                                                />
                                                            </TableCell>
                                                            <TableCell>
                                                                <AdvanceTextBoxField
                                                                    name={`data.${index}.prevQuarterVal`}
                                                                    label={""}
                                                                    onCustomChange={(currentVal: any) =>
                                                                        calculation(setFieldValue, values, index, currentVal, 'prevQuarterVal')}
                                                                    type={'number'}
                                                                    disabled={index === 0 || index === 4}
                                                                />
                                                            </TableCell>
                                                            <TableCell>
                                                                <AdvanceTextBoxField
                                                                    name={`data.${index}.yoyGrowth`}
                                                                    label={""}
                                                                    onCustomChange={(currentVal: any) =>
                                                                        calculation(setFieldValue, values, index, currentVal, 'yoyGrowth')}
                                                                    type={'number'}
                                                                    disabled={true}
                                                                />
                                                            </TableCell>
                                                            <TableCell>
                                                                <AdvanceTextBoxField
                                                                    name={`data.${index}.qoqGrowth`}
                                                                    label={""}
                                                                    onCustomChange={(currentVal: any) =>
                                                                        calculation(setFieldValue, values, index, currentVal, 'qoqGrowth')}
                                                                    type={'number'}
                                                                    disabled={true}
                                                                />
                                                            </TableCell>
                                                        </TableRow>
                                                    ))}
                                                </TableBody>
                                            </Table>
                                        )}
                                    </FieldArray>
                                </fieldset>
                                {values?.data?.[0]?.saveStatus !== "02" && (
                                    <>
                                        <Button
                                            className="sbmtBtn psn_btn mt-3 mb-3 ms-3"
                                            type='submit'
                                            onClick={() => handleClickSetAction('01')}
                                            variant="contained"
                                        >
                                            Save <CheckCircleOutlineIcon />
                                        </Button>
                                        <Button
                                            className="sbmtBtn sbmtBtn_scn psn_btn mt-3 mb-3 ms-3"
                                            type='submit'
                                            onClick={() => handleClickSetAction('02')}
                                            variant="contained"
                                        >
                                            Submit <SaveAsIcon />
                                        </Button>
                                    </>
                                )}
                            </Form>
                        )
                    }}
                </Formik>
            </div>
            <OnlineSnackbar open={openSnackbar} msg={snackMsg} severity={severity} handleSnackClose={handleClosePop} />
        </div>
    );
};

export default connect((state: any) => ({
    applId: state.userStore.applId,
}))(PortfolioDetailsForm);
