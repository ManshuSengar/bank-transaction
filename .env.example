import {
    Button,
    FormControl,
    Table,
    TableBody,
    TableCell,
    TableRow,
    TextField,
    Grid
} from "@mui/material";
import { Formik, Form, FieldArray, useFormikContext } from "formik";
import * as Yup from "yup";
import Cookies from "js-cookie";
import { useEffect, useState } from "react";
import CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';
import AutoSave from "../../../../components/framework/AutoSave";
import { TextBoxField } from "../../../../components/framework/TextBoxField";
import NbfcSnackbar from "../../../../components/shared/NbfcSnackbar";
import { useAppSelector } from "../../../../app/hooks";
import {
    useSaveFundingMutation,
    useFundingGapByIdQuery
} from "../../../../features/appraisal/cashFlowProjectionsApi";
import SaveAsIcon from '@mui/icons-material/SaveAs'
import ConfirmationAlertDialog from "../../../../models/application-form/ConfirmationAlertDialog";
import { AdvanceTextBoxField } from "../../../../components/framework/AdvanceTextBoxField";
import { useUpdateCommentByNIdMutation } from "../../../../features/application-form/applicationForm";
import NotificationSectionWiseButton from "../../../../components/DrawerComponent/NotificationSectionWiseButton";
import DrawerResponseComponent from "../../../../components/DrawerComponent/DrawerResponseComponent";
import React from "react";
import Notification from "../../../../components/shared/Notification";


const validationSchema = Yup.object().shape({
    rows: Yup.array().of(
        Yup.object().shape({
            tplus1Proj: Yup.string().required("Required"),
            tplus2Proj: Yup.string().required("Required"),
        })
    ),
});

const FundingGap = ({ userData, openSectionsData }: any) => {
    const { applId, transactionData } = useAppSelector((state: any) => state.userStore);
    const [updateFundingGap] = useSaveFundingMutation();
    const { data: fundingGapData } = useFundingGapByIdQuery(applId);
    const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);
    const [snackMsg, setSnackMsg] = useState<any>("");
    const [severity, setSeverity] = useState<string | any>("success");
    const [actionVal, setActionVal] = useState<any>("");
    const [formData, setFormData] = useState<any>("");
    const [openConfirmation, setOpenConfirmation] = useState(false);

    const handleSnackClose = () => {
        setOpenSnackbar(false);
    };

    const handleClickSetAction = (action: any) => {
        setActionVal(action);
        if (action === '02') {
            setOpenConfirmation(true);
        }
    };

    const handleSubmitConfirmation = () => {
        setOpenConfirmation(false);
        setFormData((prev: any) => ({ ...prev, key: "02" }));
    };

    const [initialValues, setInitialValues] = useState<any>({
    });

    useEffect(() => {
        if (fundingGapData && fundingGapData?.length > 0) {
            const dataWithApplId = fundingGapData.map((item: any) => ({
                ...item,
                applId
            }))
            setInitialValues({ rows: dataWithApplId })
        }
    }, [fundingGapData, applId])

    const handleSubmit = async (values: any) => {
        try {
            const requestBody = values?.rows?.map((row: any, index: number) => ({
                slNo: index + 1,
                applId: applId,
                particulars: row?.particulars || "",
                tplus1Proj: row.tplus1Proj || "",
                tplus2Proj: row.tplus2Proj || "",
                saveStatus: actionVal
            }));
            const response = await updateFundingGap(requestBody).unwrap();
            if (response && actionVal === '01') {
                setOpenSnackbar(true);
                setSeverity("success");
                setSnackMsg("Record saved successfully");
                return false;
            }
            setActionVal(null);
            return true;
        } catch (err) {
            console.error("Error saving data:", err);
        }
    };

    const handleCloseConfirmation = () => {
        setActionVal(null);
        setOpenConfirmation(false);
    };

    const calculateSubtotal = (items: any[]) => {
        return items.reduce(
            (total, item) => {
                const plusOne = parseFloat(item.tplus1Proj) || 0;
                const plusTwo = parseFloat(item.tplus2Proj) || 0;
                return {
                    tplus1Proj: total.tplus1Proj + plusOne,
                    tplus2Proj: total.tplus2Proj + plusTwo,
                };
            },
            { tplus1Proj: 0, tplus2Proj: 0 }
        );
    };

    const calculateGap = (subTotalA: any, subTotalB: any) => {
        return {
            tplus1Proj:
                (parseFloat(subTotalA.tplus1Proj) || 0) -
                (parseFloat(subTotalB.tplus1Proj) || 0),
            tplus2Proj:
                (parseFloat(subTotalA.tplus2Proj) || 0) -
                (parseFloat(subTotalB.tplus2Proj) || 0),
        };
    };

    const loginData: any = Cookies.get("user") || null;
    const loginCookiesData: any = JSON.parse(loginData);


    const [updateCommentByNId] = useUpdateCommentByNIdMutation();
    const { opensections } = useAppSelector((state) => state.userStore);
    const [getOpenSectionsData, setOpenSections] = useState<any[]>([]);
    const [open, setOpen] = React.useState<any>(false);
    const [getNotiId, setNotiId] = React.useState<any>('');

    const toggleDrawer = (newOpen: boolean) => () => {
        setOpen(true);
    };
    const handleButtonClick = (notfId: any) => {
        setOpen(true);
        setNotiId(notfId);
    };
    useEffect(() => {
        if (opensections && opensections.length > 0) {
            setOpenSections(opensections);
        }
    }, [opensections]);

    const CalculationsAndNegativeCheck = () => {
        const { values, setFieldValue } = useFormikContext<any>();

        useEffect(() => {
            let subTotalA = { tplus1Proj: 0, tplus2Proj: 0 };
            let subTotalB = { tplus1Proj: 0, tplus2Proj: 0 };

            values?.rows?.forEach((row: any, index: number) => {
                const isDisabled = 
                    row.particulars.includes("Total Fund required:") ||
                    row.particulars.includes("Sub Total [A]") ||
                    row.particulars.includes("Sub-total [B]") ||
                    row.particulars.includes("Fund required [Gap]");

                if (!isDisabled) {
                    const tplus1 = parseFloat(row.tplus1Proj);
                    const tplus2 = parseFloat(row.tplus2Proj);

                    if (!isNaN(tplus1) && tplus1 < 0 && row.tplus1Proj !== "") {
                        setFieldValue(`rows.${index}.tplus1Proj`, "0");
                    }
                    if (!isNaN(tplus2) && tplus2 < 0 && row.tplus2Proj !== "") {
                        setFieldValue(`rows.${index}.tplus2Proj`, "0");
                    }
                }

                if (row.particulars.includes("Sub Total [A]")) {
                    const rowsAboveA = values.rows.slice(1, index);
                    subTotalA = calculateSubtotal(rowsAboveA);
                    const newTplus1 = subTotalA.tplus1Proj.toString();
                    const newTplus2 = subTotalA.tplus2Proj.toString();
                    if (values.rows[index].tplus1Proj !== newTplus1) {
                        setFieldValue(`rows.${index}.tplus1Proj`, newTplus1);
                    }
                    if (values.rows[index].tplus2Proj !== newTplus2) {
                        setFieldValue(`rows.${index}.tplus2Proj`, newTplus2);
                    }
                } else if (row.particulars.includes("Sub-total [B]")) {
                    const rowsAboveB = values.rows.slice(5, index);
                    subTotalB = calculateSubtotal(rowsAboveB);
                    const newTplus1 = subTotalB.tplus1Proj.toString();
                    const newTplus2 = subTotalB.tplus2Proj.toString();
                    if (values.rows[index].tplus1Proj !== newTplus1) {
                        setFieldValue(`rows.${index}.tplus1Proj`, newTplus1);
                    }
                    if (values.rows[index].tplus2Proj !== newTplus2) {
                        setFieldValue(`rows.${index}.tplus2Proj`, newTplus2);
                    }
                } else if (row.particulars.includes("Fund required [Gap]")) {
                    const rowsAboveA = values.rows.slice(1, 4);
                    subTotalA = calculateSubtotal(rowsAboveA);
                    const rowsAboveB = values.rows.slice(5, 8);
                    subTotalB = calculateSubtotal(rowsAboveB);
                    const { tplus1Proj, tplus2Proj } = calculateGap(subTotalA, subTotalB);
                    const newTplus1 = tplus1Proj.toString();
                    const newTplus2 = tplus2Proj.toString();
                    if (values.rows[index].tplus1Proj !== newTplus1) {
                        setFieldValue(`rows.${index}.tplus1Proj`, newTplus1);
                    }
                    if (values.rows[index].tplus2Proj !== newTplus2) {
                        setFieldValue(`rows.${index}.tplus2Proj`, newTplus2);
                    }
                } else if (row.particulars.includes("Total Fund required:")) {
                    const subTotalARow = values.rows.find((r: { particulars: string | string[]; }) => r.particulars.includes("Sub Total [A]"));
                    const subTotalBRow = values.rows.find((r: { particulars: string | string[]; }) => r.particulars.includes("Sub-total [B]"));

                    const tplus1ProjVal = (parseFloat(subTotalARow?.tplus1Proj || "0") + parseFloat(subTotalBRow?.tplus1Proj || "0")).toString();
                    const tplus2ProjVal = (parseFloat(subTotalARow?.tplus2Proj || "0") + parseFloat(subTotalBRow?.tplus2Proj || "0")).toString();

                    if (values.rows[index].tplus1Proj !== tplus1ProjVal) {
                        setFieldValue(`rows.${index}.tplus1Proj`, tplus1ProjVal);
                    }
                    if (values.rows[index].tplus2Proj !== tplus2ProjVal) {
                        setFieldValue(`rows.${index}.tplus2Proj`, tplus2ProjVal);
                    }
                }
            });
        }, [values, setFieldValue]);

        return null;
    };

    return (
        <>
            {
                !transactionData ? <Notification /> :
                    <>
                        <Grid item xs={12} className="opensections-sticky-css">
                            <Grid
                                className="pb-0"
                                item
                                xs={12}
                                display="flex"
                                justifyContent="end">
                                {getOpenSectionsData && getOpenSectionsData.length > 0 && (() => {
                                    const matchedItem = getOpenSectionsData.find(
                                        (item: any) => item?.sectionId === "15" && item?.subSectionId === "04"
                                    );
                                    return matchedItem ? (
                                        <div className="openSection-item">
                                            <NotificationSectionWiseButton
                                                label="Respond"
                                                handleClick={() => handleButtonClick(matchedItem?.notfId)}
                                                className="btn-primary-css--"
                                                notfId={matchedItem?.notfId}
                                                getOpenSectionsData={getOpenSectionsData}

                                            />
                                        </div>
                                    ) : null;
                                })()}
                                <DrawerResponseComponent
                                    open={open}
                                    toggleDrawer={toggleDrawer}
                                    notfId={getNotiId}
                                    detailsData={''}
                                    postDataTrigger={updateCommentByNId}
                                    setOpen={setOpen}
                                />
                            </Grid>
                        </Grid>
                        <div className="wrap-accordian custome-form">
                            <ConfirmationAlertDialog
                                id={applId}
                                type={4}
                                open={openConfirmation}
                                handleClose={handleCloseConfirmation}
                                values={formData}
                                handleDelete={handleSubmitConfirmation} />

                            <Formik
                                initialValues={initialValues}
                                onSubmit={handleSubmit}
                                validateOnChange={true}
                                validationSchema={validationSchema}
                                validateOnBlur={false}
                                enableReinitialize={true}
                            >
                                {({ values }) => (
                                    <Form>
                                        <CalculationsAndNegativeCheck />
                                        <fieldset disabled={values?.rows?.[0]?.saveStatus === "02"}>
                                            {values?.rows?.[0]?.saveStatus !== "02" && (
                                                <AutoSave debounceMs={5000} values={values} onSubmit={handleSubmit} />
                                            )}
                                            <div className="wrap-inner-table">
                                                <Table>
                                                    <TableBody>
                                                        {/* Static Header Row */}
                                                        <TableRow sx={{ backgroundColor: "rgb(244, 244, 244)" }}>
                                                            <TableCell>
                                                                <strong>Particulars</strong>
                                                            </TableCell>
                                                            <TableCell sx={{ minWidth: 300 }}>
                                                                <strong>Projections for FY {transactionData?.lstAudYrTp1 || "FY-T+1"}</strong>
                                                            </TableCell>
                                                            <TableCell sx={{ minWidth: 400 }}>
                                                                <strong>Projections for FY  {transactionData?.lstAudYrTp2 || "FY-T+2"}</strong>
                                                            </TableCell>
                                                        </TableRow>

                                                        {/* Dynamic Rows */}
                                                        <FieldArray name="rows">
                                                            {() =>
                                                                values?.rows?.map((row: any, index: number) => (
                                                                    <TableRow key={`row-${index}`}>
                                                                        <TableCell>{row.particulars}</TableCell>
                                                                        <TableCell sx={{ minWidth: 300 }}>
                                                                            <FormControl fullWidth>
                                                                                <AdvanceTextBoxField
                                                                                    label=''
                                                                                    name={`rows.${index}.tplus1Proj`}
                                                                                    type="number"
                                                                                    allowNegative={false}
                                                                                    allowDecimal
                                                                                    disabled={
                                                                                        row.particulars.includes("Total Fund required:") ||
                                                                                        row.particulars.includes("Sub Total [A]") ||
                                                                                        row.particulars.includes("Sub-total [B]") ||
                                                                                        row.particulars.includes("Fund required [Gap]")
                                                                                    }
                                                                                />
                                                                            </FormControl>
                                                                        </TableCell>
                                                                        <TableCell sx={{ minWidth: 300 }}>
                                                                            <FormControl fullWidth>
                                                                                <AdvanceTextBoxField
                                                                                    label=''
                                                                                    name={`rows.${index}.tplus2Proj`}
                                                                                    type="number"
                                                                                    allowNegative={false}
                                                                                    allowDecimal
                                                                                    disabled={
                                                                                        row.particulars.includes("Total Fund required:") ||
                                                                                        row.particulars.includes("Sub Total [A]") ||
                                                                                        row.particulars.includes("Sub-total [B]") ||
                                                                                        row.particulars.includes("Fund required [Gap]")
                                                                                    }
                                                                                />
                                                                            </FormControl>
                                                                        </TableCell>
                                                                    </TableRow>
                                                                ))
                                                            }
                                                        </FieldArray>
                                                    </TableBody>
                                                </Table>

                                            </div>
                                            {values?.rows?.[0]?.saveStatus !== "02" &&
                                                <Button className="sbmtBtn psn_btn mt-3 mb-3 ms-3" type='submit'
                                                    onClick={() => handleClickSetAction('01')}
                                                    variant="contained"> Save <CheckCircleOutlineIcon />
                                                </Button>
                                            }
                                            {values?.rows?.[0]?.saveStatus !== "02" &&
                                                <Button className="sbmtBtn sbmtBtn_scn psn_btn mt-3 mb-3 ms-3" type='submit'
                                                    onClick={() => handleClickSetAction('02')}
                                                    variant="contained"> Submit <SaveAsIcon />
                                                </Button>
                                            }
                                        </fieldset>
                                    </Form>
                                )}
                            </Formik>
                        </div>
                        <NbfcSnackbar open={openSnackbar} msg={snackMsg} severity={severity}
                            handleSnackClose={handleSnackClose} submitCall={false} />
                    </>
            }
        </>
    );
};

export default FundingGap;



import {
    Button,
    FormControl,
    Table,
    TableBody,
    TableCell,
    TableRow,
    TextField,
    Grid
} from "@mui/material";
import { Formik, Form, FieldArray } from "formik";
import * as Yup from "yup";
import Cookies from "js-cookie";
import { useEffect, useState } from "react";
import CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';
import AutoSave from "../../../../components/framework/AutoSave";
import { TextBoxField } from "../../../../components/framework/TextBoxField";
import NbfcSnackbar from "../../../../components/shared/NbfcSnackbar";
import { useAppSelector } from "../../../../app/hooks";
import {
    useSaveFundingMutation,
    useFundingGapByIdQuery
} from "../../../../features/appraisal/cashFlowProjectionsApi";
import SaveAsIcon from '@mui/icons-material/SaveAs';
import ConfirmationAlertDialog from "../../../../models/application-form/ConfirmationAlertDialog";
import { AdvanceTextBoxField } from "../../../../components/framework/AdvanceTextBoxField";
import { useUpdateCommentByNIdMutation } from "../../../../features/application-form/applicationForm";
import NotificationSectionWiseButton from "../../../../components/DrawerComponent/NotificationSectionWiseButton";
import DrawerResponseComponent from "../../../../components/DrawerComponent/DrawerResponseComponent";
import React from "react";
import Notification from "../../../../components/shared/Notification";

const validationSchema = Yup.object().shape({
    rows: Yup.array().of(
        Yup.object().shape({
            tplus1Proj: Yup.string()
                .required("Required")
                .matches(/^\d*\.?\d{0,2}$/, "Must be a valid number with up to 2 decimal places")
                .test("non-negative", "Value cannot be negative", (value) => parseFloat(value) >= 0),
            tplus2Proj: Yup.string()
                .required("Required")
                .matches(/^\d*\.?\d{0,2}$/, "Must be a valid number with up to 2 decimal places")
                .test("non-negative", "Value cannot be negative", (value) => parseFloat(value) >= 0),
        })
    ),
});

const FundingGap = ({ userData, openSectionsData }: any) => {
    const { applId, transactionData } = useAppSelector((state: any) => state.userStore);
    const [updateFundingGap] = useSaveFundingMutation();
    const { data: fundingGapData } = useFundingGapByIdQuery(applId);
    const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);
    const [snackMsg, setSnackMsg] = useState<any>("");
    const [severity, setSeverity] = useState<string | any>("success");
    const [actionVal, setActionVal] = useState<any>("");
    const [formData, setFormData] = useState<any>("");
    const [openConfirmation, setOpenConfirmation] = useState(false);

    const handleSnackClose = () => {
        setOpenSnackbar(false);
    };

    const handleClickSetAction = (action: any) => {
        setActionVal(action);
        if (action === '02') {
            setOpenConfirmation(true);
        }
    };

    const handleSubmitConfirmation = () => {
        setOpenConfirmation(false);
        setFormData((prev: any) => ({ ...prev, key: "02" }));
    };

    const [initialValues, setInitialValues] = useState<any>({});

    useEffect(() => {
        if (fundingGapData && fundingGapData?.length > 0) {
            const dataWithApplId = fundingGapData.map((item: any) => ({
                ...item,
                applId
            }));
            setInitialValues({ rows: dataWithApplId });
        }
    }, [fundingGapData, applId]);

    const handleSubmit = async (values: any) => {
        try {
            const requestBody = values?.rows?.map((row: any, index: number) => ({
                slNo: index + 1,
                applId: applId,
                particulars: row?.particulars || "",
                tplus1Proj: row.tplus1Proj || "",
                tplus2Proj: row.tplus2Proj || "",
                saveStatus: actionVal
            }));
            const response = await updateFundingGap(requestBody).unwrap();
            if (response && actionVal === '01') {
                setOpenSnackbar(true);
                setSeverity("success");
                setSnackMsg("Record saved successfully");
                return false;
            }
            setActionVal(null);
            return true;
        } catch (err) {
            console.error("Error saving data:", err);
        }
    };

    const handleCloseConfirmation = () => {
        setActionVal(null);
        setOpenConfirmation(false);
    };

    const calculateSubtotal = (items: any[]) => {
        return items.reduce(
            (total, item) => {
                const plusOne = parseFloat(item.tplus1Proj) || 0;
                const plusTwo = parseFloat(item.tplus2Proj) || 0;
                return {
                    tplus1Proj: total.tplus1Proj + plusOne,
                    tplus2Proj: total.tplus2Proj + plusTwo,
                };
            },
            { tplus1Proj: 0, tplus2Proj: 0 }
        );
    };

    const calculateGap = (subTotalA: any, subTotalB: any) => {
        return {
            tplus1Proj:
                (parseFloat(subTotalA.tplus1Proj) || 0) -
                (parseFloat(subTotalB.tplus1Proj) || 0),
            tplus2Proj:
                (parseFloat(subTotalA.tplus2Proj) || 0) -
                (parseFloat(subTotalB.tplus2Proj) || 0),
        };
    };

    const loginData: any = Cookies.get("user") || null;
    const loginCookiesData: any = JSON.parse(loginData);

    const [updateCommentByNId] = useUpdateCommentByNIdMutation();
    const { opensections } = useAppSelector((state) => state.userStore);
    const [getOpenSectionsData, setOpenSections] = useState<any[]>([]);
    const [open, setOpen] = React.useState<any>(false);
    const [getNotiId, setNotiId] = React.useState<any>('');

    const toggleDrawer = (newOpen: boolean) => () => {
        setOpen(true);
    };
    const handleButtonClick = (notfId: any) => {
        setOpen(true);
        setNotiId(notfId);
    };
    useEffect(() => {
        if (opensections && opensections.length > 0) {
            setOpenSections(opensections);
        }
    }, [opensections]);

    return (
        <>
            {
                !transactionData ? <Notification /> :
                    <>
                        <Grid item xs={12} className="opensections-sticky-css">
                            <Grid
                                className="pb-0"
                                item
                                xs={12}
                                display="flex"
                                justifyContent="end">
                                {getOpenSectionsData && getOpenSectionsData.length > 0 && (() => {
                                    const matchedItem = getOpenSectionsData.find(
                                        (item: any) => item?.sectionId === "15" && item?.subSectionId === "04"
                                    );
                                    return matchedItem ? (
                                        <div className="openSection-item">
                                            <NotificationSectionWiseButton
                                                label="Respond"
                                                handleClick={() => handleButtonClick(matchedItem?.notfId)}
                                                className="btn-primary-css--"
                                                notfId={matchedItem?.notfId}
                                                getOpenSectionsData={getOpenSectionsData}
                                            />
                                        </div>
                                    ) : null;
                                })()}
                                <DrawerResponseComponent
                                    open={open}
                                    toggleDrawer={toggleDrawer}
                                    notfId={getNotiId}
                                    detailsData={''}
                                    postDataTrigger={updateCommentByNId}
                                    setOpen={setOpen}
                                />
                            </Grid>
                        </Grid>
                        <div className="wrap-accordian custome-form">
                            <ConfirmationAlertDialog
                                id={applId}
                                type={4}
                                open={openConfirmation}
                                handleClose={handleCloseConfirmation}
                                values={formData}
                                handleDelete={handleSubmitConfirmation} />

                            <Formik
                                initialValues={initialValues}
                                onSubmit={handleSubmit}
                                validateOnChange={true}
                                validationSchema={validationSchema}
                                validate={(values) => {
                                    const newValues = { ...values };
                                    let subTotalA = { tplus1Proj: "0", tplus2Proj: "0" };
                                    let subTotalB = { tplus1Proj: "0", tplus2Proj: "0" };

                                    const errors: any = { rows: [] };

                                    values?.rows?.forEach((row: any, index: any) => {
                                        // Initialize error object for this row
                                        errors.rows[index] = {};

                                        // Check for negative values
                                        if (parseFloat(row.tplus1Proj) < 0) {
                                            errors.rows[index].tplus1Proj = "Value cannot be negative";
                                        }
                                        if (parseFloat(row.tplus2Proj) < 0) {
                                            errors.rows[index].tplus2Proj = "Value cannot be negative";
                                        }

                                        // Transform negative values to 0 (optional, if you prefer to transform instead of reject)
                                        if (parseFloat(row.tplus1Proj) < 0) {
                                            newValues.rows[index].tplus1Proj = "0";
                                        }
                                        if (parseFloat(row.tplus2Proj) < 0) {
                                            newValues.rows[index].tplus2Proj = "0";
                                        }

                                        // Existing subtotal and gap calculations
                                        if (row.particulars.includes("Sub Total [A]")) {
                                            const rowsAboveA = values.rows.slice(1, index);
                                            subTotalA = calculateSubtotal(rowsAboveA);
                                            newValues.rows[index].tplus1Proj = subTotalA.tplus1Proj.toString();
                                            newValues.rows[index].tplus2Proj = subTotalA.tplus2Proj.toString();
                                        } else if (row.particulars.includes("Sub-total [B]")) {
                                            const rowsAboveB = values.rows.slice(5, index);
                                            subTotalB = calculateSubtotal(rowsAboveB);
                                            newValues.rows[index].tplus1Proj = subTotalB.tplus1Proj.toString();
                                            newValues.rows[index].tplus2Proj = subTotalB.tplus2Proj.toString();
                                        } else if (row.particulars.includes("Fund required [Gap]")) {
                                            const rowsAboveA = values.rows.slice(1, 4);
                                            subTotalA = calculateSubtotal(rowsAboveA);
                                            const rowsAboveB = values.rows.slice(5, 8);
                                            subTotalB = calculateSubtotal(rowsAboveB);
                                            const { tplus1Proj, tplus2Proj } = calculateGap(subTotalA, subTotalB);
                                            newValues.rows[index].tplus1Proj = tplus1Proj.toString();
                                            newValues.rows[index].tplus2Proj = tplus2Proj.toString();
                                        } else if (row.particulars.includes("Total Fund required:")) {
                                            const subTotalARow = values.rows.find((r: { particulars: string | string[]; }) => r.particulars.includes("Sub Total [A]"));
                                            const subTotalBRow = values.rows.find((r: { particulars: string | string[]; }) => r.particulars.includes("Sub-total [B]"));

                                            const tplus1Proj =
                                                (parseFloat(subTotalARow?.tplus1Proj || "0") + parseFloat(subTotalBRow?.tplus1Proj || "0")).toString();
                                            const tplus2Proj =
                                                (parseFloat(subTotalARow?.tplus2Proj || "0") + parseFloat(subTotalBRow?.tplus2Proj || "0")).toString();

                                            newValues.rows[index].tplus1Proj = tplus1Proj;
                                            newValues.rows[index].tplus2Proj = tplus2Proj;
                                        }
                                    });

                                    // Return errors if any, otherwise return empty object
                                    return Object.keys(errors.rows).length > 0 ? errors : {};
                                }}
                                validateOnBlur={false}
                                enableReinitialize={true}
                            >
                                {({ values }) => (
                                    <Form>
                                        <fieldset disabled={values?.rows?.[0]?.saveStatus === "02"}>
                                            {values?.rows?.[0]?.saveStatus !== "02" && (
                                                <AutoSave debounceMs={5000} values={values} onSubmit={handleSubmit} />
                                            )}
                                            <div className="wrap-inner-table">
                                                <Table>
                                                    <TableBody>
                                                        {/* Static Header Row */}
                                                        <TableRow sx={{ backgroundColor: "rgb(244, 244, 244)" }}>
                                                            <TableCell>
                                                                <strong>Particulars</strong>
                                                            </TableCell>
                                                            <TableCell sx={{ minWidth: 300 }}>
                                                                <strong>Projections for FY {transactionData?.lstAudYrTp1 || "FY-T+1"}</strong>
                                                            </TableCell>
                                                            <TableCell sx={{ minWidth: 400 }}>
                                                                <strong>Projections for FY  {transactionData?.lstAudYrTp2 || "FY-T+2"}</strong>
                                                            </TableCell>
                                                        </TableRow>

                                                        {/* Dynamic Rows */}
                                                        <FieldArray name="rows">
                                                            {() =>
                                                                values?.rows?.map((row: any, index: number) => (
                                                                    <TableRow key={`row-${index}`}>
                                                                        <TableCell>{row.particulars}</TableCell>
                                                                        <TableCell sx={{ minWidth: 300 }}>
                                                                            <FormControl fullWidth>
                                                                                <AdvanceTextBoxField
                                                                                    label=''
                                                                                    name={`rows.${index}.tplus1Proj`}
                                                                                    type="number"
                                                                                    allowNegative={false}
                                                                                    allowDecimal
                                                                                    disabled={
                                                                                        row.particulars.includes("Total Fund required:") ||
                                                                                        row.particulars.includes("Sub Total [A]") ||
                                                                                        row.particulars.includes("Sub-total [B]") ||
                                                                                        row.particulars.includes("Fund required [Gap]")
                                                                                    }
                                                                                />
                                                                            </FormControl>
                                                                        </TableCell>
                                                                        <TableCell sx={{ minWidth: 300 }}>
                                                                            <FormControl fullWidth>
                                                                                <AdvanceTextBoxField
                                                                                    label=''
                                                                                    name={`rows.${index}.tplus2Proj`}
                                                                                    type="number"
                                                                                    allowNegative={false}
                                                                                    allowDecimal
                                                                                    disabled={
                                                                                        row.particulars.includes("Total Fund required:") ||
                                                                                        row.particulars.includes("Sub Total [A]") ||
                                                                                        row.particulars.includes("Sub-total [B]") ||
                                                                                        row.particulars.includes("Fund required [Gap]")
                                                                                    }
                                                                                />
                                                                            </FormControl>
                                                                        </TableCell>
                                                                    </TableRow>
                                                                ))
                                                            }
                                                        </FieldArray>
                                                    </TableBody>
                                                </Table>
                                            </div>
                                            {values?.rows?.[0]?.saveStatus !== "02" &&
                                                <Button className="sbmtBtn psn_btn mt-3 mb-3 ms-3" type='submit'
                                                    onClick={() => handleClickSetAction('01')}
                                                    variant="contained"> Save <CheckCircleOutlineIcon />
                                                </Button>
                                            }
                                            {values?.rows?.[0]?.saveStatus !== "02" &&
                                                <Button className="sbmtBtn sbmtBtn_scn psn_btn mt-3 mb-3 ms-3" type='submit'
                                                    onClick={() => handleClickSetAction('02')}
                                                    variant="contained"> Submit <SaveAsIcon />
                                                </Button>
                                            }
                                        </fieldset>
                                    </Form>
                                )}
                            </Formik>
                        </div>
                        <NbfcSnackbar open={openSnackbar} msg={snackMsg} severity={severity}
                            handleSnackClose={handleSnackClose} submitCall={false} />
                    </>
            }
        </>
    );
};

export default FundingGap;





const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
  let { value } = event.target;

  // Handle restricted characters
  if (restrictedCharacters) {
    value = removeRestrictedCharacters(value, restrictedCharacters);
  }

  // Apply transformValue if provided
  if (transformValue) {
    value = transformValue(value);
  }

  // Handle number type validation
  if (type === 'number') {
    // Explicitly block negative values if allowNegative is false
    if (!allowNegative && value.includes('-')) {
      return;
    }

    // Define regex based on allowNegative and allowDecimal
    let regex = allowNegative ? /^-?\d*\.?\d{0,2}$/ : /^\d*\.?\d{0,2}$/;
    if (!allowDecimal) {
      regex = allowNegative ? /^-?\d*$/ : /^\d*$/;
    }

    // Validate input against regex
    if (!regex.test(value) && value !== '') {
      return;
    }

    // Handle decimal places for numbers
    if (value !== '' && value !== '-' && allowDecimal && value.includes('.')) {
      const parts = value.split('.');
      if (parts[1] && parts[1].length > decimalPlaces) {
        const rounded = Number(parseFloat(value).toFixed(decimalPlaces));
        value = rounded.toString();
      }
    }
  }

  // Validate against custom pattern if provided
  if (validation?.pattern && !validation.pattern.test(value)) {
    return;
  }

  // Set the field value and trigger custom change handler
  setFieldValue(name, value);
  if (onCustomChange) {
    onCustomChange(value);
  }
};








import {
        Button,
        FormControl,
        Table,
        TableBody,
        TableCell,
        TableRow,
        TextField,
        Grid
    } from "@mui/material";
    import { Formik, Form, FieldArray } from "formik";
    import * as Yup from "yup";
    import Cookies from "js-cookie";
    import { useEffect, useState } from "react";
    import CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';
    import AutoSave from "../../../../components/framework/AutoSave";
    import { TextBoxField } from "../../../../components/framework/TextBoxField";
    import NbfcSnackbar from "../../../../components/shared/NbfcSnackbar";
    import { useAppSelector } from "../../../../app/hooks";
    import {
        useSaveFundingMutation,
        useFundingGapByIdQuery
    } from "../../../../features/appraisal/cashFlowProjectionsApi";
    import SaveAsIcon from '@mui/icons-material/SaveAs'
    import ConfirmationAlertDialog from "../../../../models/application-form/ConfirmationAlertDialog";
    import { AdvanceTextBoxField } from "../../../../components/framework/AdvanceTextBoxField";
    import { useUpdateCommentByNIdMutation } from "../../../../features/application-form/applicationForm";
    import NotificationSectionWiseButton from "../../../../components/DrawerComponent/NotificationSectionWiseButton";
    import DrawerResponseComponent from "../../../../components/DrawerComponent/DrawerResponseComponent";
    import React from "react";
    import Notification from "../../../../components/shared/Notification";


    const validationSchema = Yup.object().shape({
        rows: Yup.array().of(
            Yup.object().shape({
                tplus1Proj: Yup.string().required("Required"),
                tplus2Proj: Yup.string().required("Required"),
            })
        ),
    });

    const FundingGap = ({ userData, openSectionsData }: any) => {
        const { applId, transactionData } = useAppSelector((state: any) => state.userStore);
        const [updateFundingGap] = useSaveFundingMutation();
        const { data: fundingGapData } = useFundingGapByIdQuery(applId);
        const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);
        const [snackMsg, setSnackMsg] = useState<any>("");
        const [severity, setSeverity] = useState<string | any>("success");
        const [actionVal, setActionVal] = useState<any>("");
        const [formData, setFormData] = useState<any>("");
        const [openConfirmation, setOpenConfirmation] = useState(false);

        const handleSnackClose = () => {
            setOpenSnackbar(false);
        };

        const handleClickSetAction = (action: any) => {
            setActionVal(action);
            if (action === '02') {
                setOpenConfirmation(true);
            }
        };

        const handleSubmitConfirmation = () => {
            setOpenConfirmation(false);
            setFormData((prev: any) => ({ ...prev, key: "02" }));
        };

        const [initialValues, setInitialValues] = useState<any>({
        });

        useEffect(() => {
            if (fundingGapData && fundingGapData?.length > 0) {
                const dataWithApplId = fundingGapData.map((item: any) => ({
                    ...item,
                    applId
                }))
                setInitialValues({ rows: dataWithApplId })
            }
        }, [fundingGapData, applId])

        const handleSubmit = async (values: any) => {
            try {
                const requestBody = values?.rows?.map((row: any, index: number) => ({
                    slNo: index + 1,
                    applId: applId,
                    particulars: row?.particulars || "",
                    tplus1Proj: row.tplus2Proj || "",
                    tplus2Proj: row.tplus2Proj || "",
                    saveStatus: actionVal
                }));
                const response = await updateFundingGap(requestBody).unwrap();
                if (response && actionVal === '01') {
                    setOpenSnackbar(true);
                    setSeverity("success");
                    setSnackMsg("Record saved successfully");
                    return false;
                }
                setActionVal(null);
                return true;
            } catch (err) {
                console.error("Error saving data:", err);
            }
        };

        const handleCloseConfirmation = () => {
            setActionVal(null);
            setOpenConfirmation(false);
        };

        const calculateSubtotal = (items: any[]) => {
            return items.reduce(
                (total, item) => {
                    const plusOne = parseFloat(item.tplus1Proj) || 0;
                    const plusTwo = parseFloat(item.tplus2Proj) || 0;
                    return {
                        tplus1Proj: total.tplus1Proj + plusOne,
                        tplus2Proj: total.tplus2Proj + plusTwo,
                    };
                },
                { tplus1Proj: 0, tplus2Proj: 0 }
            );
        };

        const calculateGap = (subTotalA: any, subTotalB: any) => {
            return {
                tplus1Proj:
                    (parseFloat(subTotalA.tplus1Proj) || 0) -
                    (parseFloat(subTotalB.tplus1Proj) || 0),
                tplus2Proj:
                    (parseFloat(subTotalA.tplus2Proj) || 0) -
                    (parseFloat(subTotalB.tplus2Proj) || 0),
            };
        };

        const loginData: any = Cookies.get("user") || null;
        const loginCookiesData: any = JSON.parse(loginData);


        const [updateCommentByNId] = useUpdateCommentByNIdMutation();
        const { opensections } = useAppSelector((state) => state.userStore);
        const [getOpenSectionsData, setOpenSections] = useState<any[]>([]);
        const [open, setOpen] = React.useState<any>(false);
        const [getNotiId, setNotiId] = React.useState<any>('');

        const toggleDrawer = (newOpen: boolean) => () => {
            setOpen(true);
        };
        const handleButtonClick = (notfId: any) => {
            setOpen(true);
            setNotiId(notfId);
        };
        useEffect(() => {
            if (opensections && opensections.length > 0) {
                setOpenSections(opensections);
            }
        }, [opensections]);

        return (
            <>
                {
                    !transactionData ? <Notification /> :
                        <>
                            <Grid item xs={12} className="opensections-sticky-css">
                                <Grid
                                    className="pb-0"
                                    item
                                    xs={12}
                                    display="flex"
                                    justifyContent="end">
                                    {getOpenSectionsData && getOpenSectionsData.length > 0 && (() => {
                                        const matchedItem = getOpenSectionsData.find(
                                            (item: any) => item?.sectionId === "15" && item?.subSectionId === "04"
                                        );
                                        return matchedItem ? (
                                            <div className="openSection-item">
                                                <NotificationSectionWiseButton
                                                    label="Respond"
                                                    handleClick={() => handleButtonClick(matchedItem?.notfId)}
                                                    className="btn-primary-css--"
                                                    notfId={matchedItem?.notfId}
                                                    getOpenSectionsData={getOpenSectionsData}

                                                />
                                            </div>
                                        ) : null;
                                    })()}
                                    <DrawerResponseComponent
                                        open={open}
                                        toggleDrawer={toggleDrawer}
                                        notfId={getNotiId}
                                        detailsData={''}
                                        postDataTrigger={updateCommentByNId}
                                        setOpen={setOpen}
                                    />
                                </Grid>
                            </Grid>
                            <div className="wrap-accordian custome-form">
                                <ConfirmationAlertDialog
                                    id={applId}
                                    type={4}
                                    open={openConfirmation}
                                    handleClose={handleCloseConfirmation}
                                    values={formData}
                                    handleDelete={handleSubmitConfirmation} />

                                <Formik
                                    initialValues={initialValues}
                                    onSubmit={handleSubmit}
                                    validateOnChange={true}
                                    // validationSchema={validationSchema}
                                    validate={(values) => {
                                        const newValues = { ...values };
                                        let subTotalA = { tplus1Proj: "0", tplus2Proj: "0" };
                                        let subTotalB = { tplus1Proj: "0", tplus2Proj: "0" };

                                        values?.rows?.forEach((row: any, index: any) => {
                                            if (row.particulars.includes("Sub Total [A]")) {
                                                const rowsAboveA = values.rows.slice(1, index);
                                                subTotalA = calculateSubtotal(rowsAboveA);
                                                newValues.rows[index].tplus1Proj = subTotalA.tplus1Proj.toString();
                                                newValues.rows[index].tplus2Proj = subTotalA.tplus2Proj.toString();
                                            } else if (row.particulars.includes("Sub-total [B]")) {
                                                const rowsAboveB = values.rows.slice(5, index);
                                                subTotalB = calculateSubtotal(rowsAboveB);
                                                newValues.rows[index].tplus1Proj = subTotalB.tplus1Proj.toString();
                                                newValues.rows[index].tplus2Proj = subTotalB.tplus2Proj.toString();
                                            }
                                            else if (row.particulars.includes("Fund required [Gap]")) {
                                                const rowsAboveA = values.rows.slice(1, 4);
                                                subTotalA = calculateSubtotal(rowsAboveA);
                                                const rowsAboveB = values.rows.slice(5, 8);
                                                subTotalB = calculateSubtotal(rowsAboveB);
                                                const { tplus1Proj, tplus2Proj } = calculateGap(subTotalA, subTotalB)
                                                newValues.rows[index].tplus1Proj = tplus1Proj.toString();
                                                newValues.rows[index].tplus2Proj = tplus2Proj.toString();
                                            } else if (row.particulars.includes("Total Fund required:")) {
                                                const subTotalARow = values.rows.find((r: { particulars: string | string[]; }) => r.particulars.includes("Sub Total [A]"));
                                                const subTotalBRow = values.rows.find((r: { particulars: string | string[]; }) => r.particulars.includes("Sub-total [B]"));

                                                const tplus1Proj =
                                                    (parseFloat(subTotalARow?.tplus1Proj || "0") + parseFloat(subTotalBRow?.tplus1Proj || "0")).toString();
                                                const tplus2Proj =
                                                    (parseFloat(subTotalARow?.tplus2Proj || "0") + parseFloat(subTotalBRow?.tplus2Proj || "0")).toString();

                                                newValues.rows[index].tplus1Proj = tplus1Proj;
                                                newValues.rows[index].tplus2Proj = tplus2Proj;
                                            }

                                        });

                                        return {};
                                    }}
                                    validateOnBlur={false}
                                    enableReinitialize={true}
                                >
                                    {({ values }) => (
                                        <Form>
                                            <fieldset disabled={values?.rows?.[0]?.saveStatus === "02"}>
                                                {values?.rows?.[0]?.saveStatus !== "02" && (
                                                    <AutoSave debounceMs={5000} values={values} onSubmit={handleSubmit} />
                                                )}
                                                <div className="wrap-inner-table">
                                                    <Table>
                                                        <TableBody>
                                                            {/* Static Header Row */}
                                                            <TableRow sx={{ backgroundColor: "rgb(244, 244, 244)" }}>
                                                                <TableCell>
                                                                    <strong>Particulars</strong>
                                                                </TableCell>
                                                                <TableCell sx={{ minWidth: 300 }}>
                                                                    <strong>Projections for FY {transactionData?.lstAudYrTp1 || "FY-T+1"}</strong>
                                                                </TableCell>
                                                                <TableCell sx={{ minWidth: 400 }}>
                                                                    <strong>Projections for FY  {transactionData?.lstAudYrTp2 || "FY-T+2"}</strong>
                                                                </TableCell>
                                                            </TableRow>

                                                            {/* Dynamic Rows */}
                                                            <FieldArray name="rows">
                                                                {() =>
                                                                    values?.rows?.map((row: any, index: number) => (
                                                                        <TableRow key={`row-${index}`}>
                                                                            <TableCell>{row.particulars}</TableCell>
                                                                            <TableCell sx={{ minWidth: 300 }}>
                                                                                <FormControl fullWidth>
                                                                                    <AdvanceTextBoxField
                                                                                        label=''
                                                                                        name={`rows.${index}.tplus1Proj`}
                                                                                        type="number"
                                                                                        allowNegative={false}
                                                                                        allowDecimal
                                                                                        disabled={
                                                                                            row.particulars.includes("Total Fund required:") ||
                                                                                            row.particulars.includes("Sub Total [A]") ||
                                                                                            row.particulars.includes("Sub-total [B]") ||
                                                                                            row.particulars.includes("Fund required [Gap]")
                                                                                        }
                                                                                    />
                                                                                </FormControl>
                                                                            </TableCell>
                                                                            <TableCell sx={{ minWidth: 300 }}>
                                                                                <FormControl fullWidth>
                                                                                    <AdvanceTextBoxField
                                                                                        label=''
                                                                                        name={`rows.${index}.tplus2Proj`}
                                                                                        type="number"
                                                                                        allowNegative={false}
                                                                                        allowDecimal
                                                                                        disabled={
                                                                                            row.particulars.includes("Total Fund required:") ||
                                                                                            row.particulars.includes("Sub Total [A]") ||
                                                                                            row.particulars.includes("Sub-total [B]") ||
                                                                                            row.particulars.includes("Fund required [Gap]")
                                                                                        }
                                                                                    />
                                                                                </FormControl>
                                                                            </TableCell>
                                                                        </TableRow>
                                                                    ))
                                                                }
                                                            </FieldArray>
                                                        </TableBody>
                                                    </Table>

                                                </div>
                                                {values?.rows?.[0]?.saveStatus !== "02" &&
                                                    <Button className="sbmtBtn psn_btn mt-3 mb-3 ms-3" type='submit'
                                                        onClick={() => handleClickSetAction('01')}
                                                        variant="contained"> Save <CheckCircleOutlineIcon />
                                                    </Button>
                                                }
                                                {values?.rows?.[0]?.saveStatus !== "02" &&
                                                    <Button className="sbmtBtn sbmtBtn_scn psn_btn mt-3 mb-3 ms-3" type='submit'
                                                        onClick={() => handleClickSetAction('02')}
                                                        variant="contained"> Submit <SaveAsIcon />
                                                    </Button>
                                                }
                                            </fieldset>
                                        </Form>
                                    )}
                                </Formik>
                            </div>
                            <NbfcSnackbar open={openSnackbar} msg={snackMsg} severity={severity}
                                handleSnackClose={handleSnackClose} submitCall={false} />
                        </>
                }
            </>
        );
    };

    export default FundingGap;

import React from 'react';
import Grid from "@mui/material/Grid";
import { KeyValuePair } from "./KeyValuePair";
import { getIn, useFormikContext } from "formik";
import Typography from "@mui/material/Typography";
import { removeRestrictedCharacters } from '../../utlis/input';
import { InputAdornment, Tooltip, IconButton } from '@mui/material';
import HelpOutlineIcon from '@mui/icons-material/HelpOutline';
import RedditTextField from './RedditTextField';


interface AdvanceTextBoxFieldProps {
  id?: number;
  label?: string;
  name: string;
  disabled?: boolean;
  type?: string;
  value?: string;
  readonly?: boolean;
  restrictedCharacters?: string;
  placeholder?: string;
  tooltip?: string;
  required?: boolean;
  maxLength?: number;
  minLength?: number;
  startAdornment?: React.ReactNode;
  endAdornment?: React.ReactNode;
  multiline?: boolean;
  rows?: number;
  maxRows?: number;
  validation?: {
    pattern?: RegExp;
    customValidation?: (value: string) => string | undefined;
  };
  transformValue?: (value: string) => string;
  onCustomChange?: any;
  fullWidth?: boolean;
  className?: string;
  style?: React.CSSProperties;
  InputProps?: any;
  allowNegative?: boolean;
  allowDecimal?: boolean;
  decimalPlaces?: number;
}

export const AdvanceTextBoxField: React.FC<AdvanceTextBoxFieldProps> = ({
  label = "",
  name,
  disabled = false,
  type = 'text',
  readonly = false,
  restrictedCharacters = "<>{}",
  placeholder,
  tooltip,
  required = false,
  maxLength,
  minLength,
  startAdornment,
  endAdornment,
  multiline = false,
  rows,
  maxRows,
  validation,
  transformValue,
  onCustomChange,
  fullWidth = true,
  className,
  style,
  allowNegative = false,
  allowDecimal = true,
  decimalPlaces = 2,
  ...props
}) => {
  const { handleChange, handleBlur, values, touched, errors, setFieldValue } =
    useFormikContext<KeyValuePair>() || {};

  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    let { value } = event.target;

    if (restrictedCharacters) {
      value = removeRestrictedCharacters(value, restrictedCharacters);
    }

    if (transformValue) {
      value = transformValue(value);
    }

    if (type === 'number') {
      let regex = allowNegative ? /^-?\d*\.?\d{0,2}$/ : /^\d*\.?\d{0,2}$/;
      if (!allowDecimal) {
        regex = /^\d*$/;
      }
      if (allowNegative && !allowDecimal) {
        regex = /^-?\d*$/;
      }
      if (!regex.test(value) && value !== '') {
        return;
      }
      if (value !== '' && value !== '-' && allowDecimal && value.includes('.')) {
        const parts = value.split('.');
        if (parts[1] && parts[1].length > decimalPlaces) {
          const rounded = Number(parseFloat(value).toFixed(decimalPlaces));
          value = rounded.toString();
        }
      }
    }

    if (validation?.pattern && !validation.pattern.test(value)) {
      return;
    }
    setFieldValue(name, value);
    if (onCustomChange) {
      onCustomChange(value);
    }
  };
  const labelStyles = {
    '& .MuiInputLabel-shrink': {
      background: '#fff',
      padding: '0 8px',
    },
  };

  const getErrorMessage = () => {
    if (getIn(touched, name) && getIn(errors, name)) {
      return JSON.stringify(getIn(errors, name)).replaceAll('"', "");
    }
    return "";
  };

  return (
    <Grid item xs={12} style={style}>
      <Grid item xs={12}>
        <RedditTextField
          label={label}
          className={`${name} ${className || ''}`}
          onChange={handleInputChange}
          onBlur={handleBlur}
          value={getIn(values, name)}
          name={name}
          size="small"
          disabled={disabled}
          type={type}
          placeholder={placeholder}
          required={required}
          sx={labelStyles}
          inputProps={{
            readOnly: readonly,
            maxLength: maxLength,
            minLength: minLength,
            inputMode: type === 'number' ? 'decimal' : 'text',
            pattern: type === 'number' ? undefined : undefined
          }}
          multiline={multiline}
          rows={rows}
          maxRows={maxRows}
          fullWidth={fullWidth}
          InputProps={{
            startAdornment: startAdornment && (
              <InputAdornment position="start">{startAdornment}</InputAdornment>
            ),
            endAdornment: (
              <InputAdornment position="end">
                {tooltip && (
                  <Tooltip title={tooltip}>
                    <IconButton size="small">
                      <HelpOutlineIcon />
                    </IconButton>
                  </Tooltip>
                )}
                {endAdornment}
              </InputAdornment>
            ),
          }}
          {...props}
        />
      </Grid>
      <Grid item xs={12}>
        <Typography
          color="error"
          variant="subtitle2"
          gutterBottom
          component="span"
          className="mybooking_error"
        >
          {getErrorMessage()}
        </Typography>
      </Grid>
    </Grid>
  );
};




