import React, { useEffect, useState } from 'react';
import {
  Box, TextField, Button, Typography, Container, Paper, Stack,
  CircularProgress, Alert, RadioGroup, FormControlLabel, Radio,
  FormControl, FormLabel, Select, MenuItem, IconButton,
  Modal, Dialog, DialogTitle, DialogContent, DialogActions
} from '@mui/material';
import AddIcon from '@mui/icons-material/Add';
import { useNavigate } from 'react-router-dom';
import QrApi from 'store/services/qrApi';
import MemberApi from 'store/services/memberApi';

const CreateQR = () => {
  const [formData, setFormData] = useState({
    eventName: '',
    eventId: '',
    selectedMember: '',
    eventOemflg: ''
  });
  const [memberList, setMemberList] = useState<any>([]);
  const [selectionType, setSelectionType] = useState<'eventId' | 'member'>('eventId');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [modalOpen, setModalOpen] = useState(false);
  const [newOemData, setNewOemData] = useState({
    oemCode: '',
    oemNamec: ''
  });
  const navigate = useNavigate();

  const handleChange: any = (e: React.ChangeEvent<HTMLInputElement | { name?: string; value: unknown }>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name as string]: value }));
    if (error) setError(null);
  };

  const handleNewOemChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setNewOemData((prev) => ({ ...prev, [name as string]: value }));
  };

  const validateForm = () => {
    if (!formData.eventName.trim()) {
      setError('Event Name is required');
      return false;
    }
    if (formData.eventName.length < 3) {
      setError('Event Name must be at least 3 characters long');
      return false;
    }
    if (selectionType === 'eventId' && !formData.eventId.trim()) {
      setError('Event ID is required');
      return false;
    }
    if (selectionType === 'member' && !formData.selectedMember.trim()) {
      setError('Please select a member');
      return false;
    }
    return true;
  };

  const validateNewOemForm = () => {
    if (!newOemData.oemCode.trim()) {
      setError('OEM Code is required');
      return false;
    }
    if (!newOemData.oemNamec.trim()) {
      setError('OEM Name is required');
      return false;
    }
    return true;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!validateForm()) return;

    setLoading(true);
    setError(null);

    try {
      const payload = {
        eventName: formData.eventName,
        eventId: selectionType === 'eventId' ? formData.eventId : formData.selectedMember,
        eventOemflg: selectionType,
        oemName:formData.selectedMember || "",
      };
      const response = await QrApi.generateQr(payload);
      console.log("response--> ",response);
      navigate('/qr-display', {
        state: {
          qrImageData: response?.imageData,
          eventData: payload,
        },
      });
    } catch (err: any) {
      const errorMessage = err.response?.data?.message || err.message || 'Failed to generate QR code.';
      setError(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  const handleAddOemSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!validateNewOemForm()) return;

    setLoading(true);
    setError(null);

    try {
      await MemberApi.saveOemMasterDetail(newOemData);
      setModalOpen(false);
      setNewOemData({ oemCode: '', oemNamec: '' });
      await getOemMasterDetail(); // Refresh member list
    } catch (err: any) {
      const errorMessage = err.response?.data?.message || err.message || 'Failed to add OEM details.';
      setError(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    getOemMasterDetail();
  }, []);

  const getOemMasterDetail = async () => {
    try {
      const response: any = await MemberApi.getEventDetails();
      console.log("response", response);
      setMemberList(response.result);
    } catch (err) {
      console.log("err", err);
      setError('Failed to fetch member list');
    }
  };

  const handleBackToDashboard = () => {
    navigate('/');
  };

  const handleModalClose = () => {
    setModalOpen(false);
    setNewOemData({ oemCode: '', oemNamec: '' });
    setError(null);
  };

  return (
    <Box sx={{ minHeight: '100vh', background: 'linear-gradient(to right, #e3f2fd, #fce4ec)', display: 'flex', alignItems: 'center', justifyContent: 'center', p: 2 }}>
      <Container maxWidth="sm">
        <Paper elevation={6} sx={{ p: 4, borderRadius: 3 }}>
          <Typography variant="h4" align="center" gutterBottom color="primary">
            Create QR
          </Typography>
          {error && <Alert severity="error" sx={{ mb: 3 }}>{error}</Alert>}
          <form onSubmit={handleSubmit}>
            <TextField
              label="Event Name"
              name="eventName"
              value={formData.eventName}
              onChange={handleChange}
              variant="outlined"
              fullWidth
              required
              disabled={loading}
              sx={{ mb: 3 }}
              helperText="Enter a descriptive name for your event"
            />
            <FormControl component="fieldset" sx={{ mb: 3 }}>
              <FormLabel component="legend">Choose Identifier</FormLabel>
              <RadioGroup
                row
                value={selectionType}
                onChange={(e) => setSelectionType(e.target.value as 'eventId' | 'member')}
              >
                <FormControlLabel value="eventId" control={<Radio />} label="Event ID" />
                <FormControlLabel value="member" control={<Radio />} label="Member" />
              </RadioGroup>
            </FormControl>
            {selectionType === 'eventId' ? (
              <TextField
                label="Event ID"
                name="eventId"
                value={formData.eventId}
                onChange={handleChange}
                variant="outlined"
                fullWidth
                required
                disabled={loading}
                sx={{ mb: 3 }}
                helperText="Enter a unique identifier for your event"
              />
            ) : (
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 3 }}>
                <FormControl fullWidth>
                  <Select
                    name="selectedMember"
                    value={formData.selectedMember}
                    onChange={handleChange}
                    disabled={loading}
                    displayEmpty
                  >
                    <MenuItem value="" disabled>Select a member</MenuItem>
                    {memberList?.map((member: any) => (
                      <MenuItem key={member?.oemCode} value={member?.oemCode}>{member?.oemNamec}</MenuItem>
                    ))}
                  </Select>
                </FormControl>
                <IconButton
                  color="primary"
                  onClick={() => setModalOpen(true)}
                  disabled={loading}
                >
                  <AddIcon />
                </IconButton>
              </Box>
            )}
            <Stack direction="row" spacing={2}>
              <Button
                type="submit"
                variant="contained"
                color="primary"
                fullWidth
                disabled={loading}
                startIcon={loading ? <CircularProgress size={20} /> : null}
              >
                {loading ? 'Generating QR...' : 'Generate QR Code'}
              </Button>
              <Button
                variant="outlined"
                color="secondary"
                fullWidth
                onClick={handleBackToDashboard}
                disabled={loading}
              >
                Back to Dashboard
              </Button>
            </Stack>
          </form>
        </Paper>
      </Container>

      <Dialog open={modalOpen} onClose={handleModalClose}>
        <DialogTitle>Add New OEM</DialogTitle>
        <DialogContent>
          <TextField
            label="OEM Code"
            name="oemCode"
            value={newOemData.oemCode}
            onChange={handleNewOemChange}
            variant="outlined"
            fullWidth
            required
            sx={{ mb: 2, mt: 1 }}
          />
          <TextField
            label="OEM Name"
            name="oemNamec"
            value={newOemData.oemNamec}
            onChange={handleNewOemChange}
            variant="outlined"
            fullWidth
            required
            sx={{ mb: 2 }}
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={handleModalClose} disabled={loading}>
            Cancel
          </Button>
          <Button
            onClick={handleAddOemSubmit}
            variant="contained"
            color="primary"
            disabled={loading}
            startIcon={loading ? <CircularProgress size={20} /> : null}
          >
            {loading ? 'Adding...' : 'Add OEM'}
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default CreateQR;

    "USER_ID" NUMBER NOT NULL ENABLE, 
	"MOBILE_NO" NUMBER, 
	"BUSINESS_PAN" VARCHAR2(10 BYTE), 
	"PERSON_NAME" VARCHAR2(100 BYTE), 
	"PERSON_EMAIL" VARCHAR2(100 BYTE), 
	"PRODUCT" VARCHAR2(500 BYTE), 
	"AMOUNT" NUMBER(10,0), 
	"ENTITY_NAME" VARCHAR2(200 BYTE), 
	"PIN_CODE" NUMBER(6,0), 
	"CREATED_ON" DATE, 
