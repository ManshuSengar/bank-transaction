import React, { useState } from 'react';
import {
  Box, TextField, Button, Typography, Container, Paper, Stack,
  CircularProgress, Alert, FormControl, InputLabel, Select, MenuItem
} from '@mui/material';
import { useNavigate } from 'react-router-dom';

const CreateUserForm = () => {
  const [formData, setFormData] = useState({
    userId: '',
    mobileNo: '',
    businessPan: '',
    personName: '',
    personEmail: '',
    product: '',
    amount: '',
    entityName: '',
    pinCode: '',
    createdOn: ''
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const navigate = useNavigate();

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | { name?: string; value: unknown }>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name as string]: value }));
    if (error) setError(null);
  };

  const validateForm = () => {
    if (!formData.userId.trim()) {
      setError('User ID is required');
      return false;
    }
    if (!/^\d+$/.test(formData.userId)) {
      setError('User ID must be a number');
      return false;
    }
    if (!formData.mobileNo.trim()) {
      setError('Mobile Number is required');
      return false;
    }
    if (!/^\d{10}$/.test(formData.mobileNo)) {
      setError('Mobile Number must be a valid 10-digit number');
      return false;
    }
    if (!formData.businessPan.trim()) {
      setError('Business PAN is required');
      return false;
    }
    if (!/^[A-Z]{5}\d{4}[A-Z]{1}$/.test(formData.businessPan)) {
      setError('Business PAN must be a valid 10-character PAN (e.g., ABCDE1234F)');
      return false;
    }
    if (!formData.personName.trim()) {
      setError('Person Name is required');
      return false;
    }
    if (formData.personName.length < 3) {
      setError('Person Name must be at least 3 characters long');
      return false;
    }
    if (!formData.personEmail.trim()) {
      setError('Person Email is required');
      return false;
    }
    if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.personEmail)) {
      setError('Please enter a valid email address');
      return false;
    }
    if (!formData.product.trim()) {
      setError('Product is required');
      return false;
    }
    if (!formData.amount.trim()) {
      setError('Amount is required');
      return false;
    }
    if (!/^\d+$/.test(formData.amount)) {
      setError('Amount must be a valid number');
      return false;
    }
    if (!formData.entityName.trim()) {
      setError('Entity Name is required');
      return false;
    }
    if (!formData.pinCode.trim()) {
      setError('Pin Code is required');
      return false;
    }
    if (!/^\d{6}$/.test(formData.pinCode)) {
      setError('Pin Code must be a valid 6-digit number');
      return false;
    }
    if (!formData.createdOn.trim()) {
      setError('Created On date is required');
      return false;
    }
    return true;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!validateForm()) return;

    setLoading(true);
    setError(null);

    try {
      const payload = {
        userId: parseInt(formData.userId),
        mobileNo: parseInt(formData.mobileNo),
        businessPan: formData.businessPan,
        personName: formData.personName,
        personEmail: formData.personEmail,
        product: formData.product,
        amount: parseInt(formData.amount),
        entityName: formData.entityName,
        pinCode: parseInt(formData.pinCode),
        createdOn: formData.createdOn
      };

      // Placeholder for API call (replace with actual API integration)
      // const response = await UserApi.createUser(payload);
      console.log('Submitting payload:', payload);

      // Navigate to a success page or dashboard after submission
      navigate('/dashboard', {
        state: { userData: payload }
      });
    } catch (err: any) {
      const errorMessage = err.response?.data?.message || err.message || 'Failed to submit user data.';
      setError(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  const handleBackToDashboard = () => {
    navigate('/');
  };

  return (
    <Box
      sx={{
        minHeight: '100vh',
        background: 'linear-gradient(to right, #e3f2fd, #fce4ec)',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        p: 2
      }}
    >
      <Container maxWidth="sm">
        <Paper elevation={6} sx={{ p: 4, borderRadius: 3 }}>
          <Typography variant="h4" align="center" gutterBottom color="primary">
            Create User
          </Typography>
          {error && <Alert severity="error" sx={{ mb: 3 }}>{error}</Alert>}
          <form onSubmit={handleSubmit}>
            <TextField
              label="User ID"
              name="userId"
              value={formData.userId}
              onChange={handleChange}
              variant="outlined"
              fullWidth
              required
              disabled={loading}
              sx={{ mb: 3 }}
              helperText="Enter a unique numeric User ID"
              type="number"
            />
            <TextField
              label="Mobile Number"
              name="mobileNo"
              value={formData.mobileNo}
              onChange={handleChange}
              variant="outlined"
              fullWidth
              required
              disabled={loading}
              sx={{ mb: 3 }}
              helperText="Enter a 10-digit mobile number"
              type="tel"
            />
            <TextField
              label="Business PAN"
              name="businessPan"
              value={formData.businessPan}
              onChange={handleChange}
              variant="outlined"
              fullWidth
              required
              disabled={loading}
              sx={{ mb: 3 }}
              helperText="Enter a valid 10-character PAN (e.g., ABCDE1234F)"
            />
            <TextField
              label="Person Name"
              name="personName"
              value={formData.personName}
              onChange={handleChange}
              variant="outlined"
              fullWidth
              required
              disabled={loading}
              sx={{ mb: 3 }}
              helperText="Enter the full name of the person"
            />
            <TextField
              label="Person Email"
              name="personEmail"
              value={formData.personEmail}
              onChange={handleChange}
              variant="outlined"
              fullWidth
              required
              disabled={loading}
              sx={{ mb: 3 }}
              helperText="Enter a valid email address"
              type="email"
            />
            <TextField
              label="Product"
              name="product"
              value={formData.product}
              onChange={handleChange}
              variant="outlined"
              fullWidth
              required
              disabled={loading}
              sx={{ mb: 3 }}
              helperText="Enter the product name or description (max 500 characters)"
              multiline
              maxRows={4}
            />
            <TextField
              label="Amount"
              name="amount"
              value={formData.amount}
              onChange={handleChange}
              variant="outlined"
              fullWidth
              required
              disabled={loading}
              sx={{ mb: 3 }}
              helperText="Enter the amount (numeric value)"
              type="number"
            />
            <TextField
              label="Entity Name"
              name="entityName"
              value={formData.entityName}
              onChange={handleChange}
              variant="outlined"
              fullWidth
              required
              disabled={loading}
              sx={{ mb: 3 }}
              helperText="Enter the entity name (max 200 characters)"
            />
            <TextField
              label="Pin Code"
              name="pinCode"
              value={formData.pinCode}
              onChange={handleChange}
              variant="outlined"
              fullWidth
              required
              disabled={loading}
              sx={{ mb: 3 }}
              helperText="Enter a 6-digit pin code"
              type="number"
            />
            <TextField
              label="Created On"
              name="createdOn"
              value={formData.createdOn}
              onChange={handleChange}
              variant="outlined"
              fullWidth
              required
              disabled={loading}
              sx={{ mb: 3 }}
              helperText="Select the creation date"
              type="date"
              InputLabelProps={{ shrink: true }}
            />
            <Stack direction="row" spacing={2}>
              <Button
                type="submit"
                variant="contained"
                color="primary"
                fullWidth
                disabled={loading}
                startIcon={loading ? <CircularProgress size={20} /> : null}
              >
                {loading ? 'Submitting...' : 'Submit User Data'}
              </Button>
              <Button
                variant="outlined"
                color="secondary"
                fullWidth
                onClick={handleBackToDashboard}
                disabled={loading}
              >
                Back to Dashboard
              </Button>
            </Stack>
          </form>
        </Paper>
      </Container>
    </Box>
  );
};

export default CreateUserForm;











import React, { useEffect, useState } from 'react';
import {
  Box, TextField, Button, Typography, Container, Paper, Stack,
  CircularProgress, Alert, RadioGroup, FormControlLabel, Radio,
  FormControl, FormLabel, Select, MenuItem, IconButton,
  Modal, Dialog, DialogTitle, DialogContent, DialogActions
} from '@mui/material';
import AddIcon from '@mui/icons-material/Add';
import { useNavigate } from 'react-router-dom';
import QrApi from 'store/services/qrApi';
import MemberApi from 'store/services/memberApi';

const CreateQR = () => {
  const [formData, setFormData] = useState({
    eventName: '',
    eventId: '',
    selectedMember: '',
    eventOemflg: ''
  });
  const [memberList, setMemberList] = useState<any>([]);
  const [selectionType, setSelectionType] = useState<'eventId' | 'member'>('eventId');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [modalOpen, setModalOpen] = useState(false);
  const [newOemData, setNewOemData] = useState({
    oemCode: '',
    oemNamec: ''
  });
  const navigate = useNavigate();

  const handleChange: any = (e: React.ChangeEvent<HTMLInputElement | { name?: string; value: unknown }>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name as string]: value }));
    if (error) setError(null);
  };

  const handleNewOemChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setNewOemData((prev) => ({ ...prev, [name as string]: value }));
  };

  const validateForm = () => {
    if (!formData.eventName.trim()) {
      setError('Event Name is required');
      return false;
    }
    if (formData.eventName.length < 3) {
      setError('Event Name must be at least 3 characters long');
      return false;
    }
    if (selectionType === 'eventId' && !formData.eventId.trim()) {
      setError('Event ID is required');
      return false;
    }
    if (selectionType === 'member' && !formData.selectedMember.trim()) {
      setError('Please select a member');
      return false;
    }
    return true;
  };

  const validateNewOemForm = () => {
    if (!newOemData.oemCode.trim()) {
      setError('OEM Code is required');
      return false;
    }
    if (!newOemData.oemNamec.trim()) {
      setError('OEM Name is required');
      return false;
    }
    return true;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!validateForm()) return;

    setLoading(true);
    setError(null);

    try {
      const payload = {
        eventName: formData.eventName,
        eventId: selectionType === 'eventId' ? formData.eventId : formData.selectedMember,
        eventOemflg: selectionType,
        oemName:formData.selectedMember || "",
      };
      const response = await QrApi.generateQr(payload);
      console.log("response--> ",response);
      navigate('/qr-display', {
        state: {
          qrImageData: response?.imageData,
          eventData: payload,
        },
      });
    } catch (err: any) {
      const errorMessage = err.response?.data?.message || err.message || 'Failed to generate QR code.';
      setError(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  const handleAddOemSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!validateNewOemForm()) return;

    setLoading(true);
    setError(null);

    try {
      await MemberApi.saveOemMasterDetail(newOemData);
      setModalOpen(false);
      setNewOemData({ oemCode: '', oemNamec: '' });
      await getOemMasterDetail(); // Refresh member list
    } catch (err: any) {
      const errorMessage = err.response?.data?.message || err.message || 'Failed to add OEM details.';
      setError(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    getOemMasterDetail();
  }, []);

  const getOemMasterDetail = async () => {
    try {
      const response: any = await MemberApi.getEventDetails();
      console.log("response", response);
      setMemberList(response.result);
    } catch (err) {
      console.log("err", err);
      setError('Failed to fetch member list');
    }
  };

  const handleBackToDashboard = () => {
    navigate('/');
  };

  const handleModalClose = () => {
    setModalOpen(false);
    setNewOemData({ oemCode: '', oemNamec: '' });
    setError(null);
  };

  return (
    <Box sx={{ minHeight: '100vh', background: 'linear-gradient(to right, #e3f2fd, #fce4ec)', display: 'flex', alignItems: 'center', justifyContent: 'center', p: 2 }}>
      <Container maxWidth="sm">
        <Paper elevation={6} sx={{ p: 4, borderRadius: 3 }}>
          <Typography variant="h4" align="center" gutterBottom color="primary">
            Create QR
          </Typography>
          {error && <Alert severity="error" sx={{ mb: 3 }}>{error}</Alert>}
          <form onSubmit={handleSubmit}>
            <TextField
              label="Event Name"
              name="eventName"
              value={formData.eventName}
              onChange={handleChange}
              variant="outlined"
              fullWidth
              required
              disabled={loading}
              sx={{ mb: 3 }}
              helperText="Enter a descriptive name for your event"
            />
            <FormControl component="fieldset" sx={{ mb: 3 }}>
              <FormLabel component="legend">Choose Identifier</FormLabel>
              <RadioGroup
                row
                value={selectionType}
                onChange={(e) => setSelectionType(e.target.value as 'eventId' | 'member')}
              >
                <FormControlLabel value="eventId" control={<Radio />} label="Event ID" />
                <FormControlLabel value="member" control={<Radio />} label="Member" />
              </RadioGroup>
            </FormControl>
            {selectionType === 'eventId' ? (
              <TextField
                label="Event ID"
                name="eventId"
                value={formData.eventId}
                onChange={handleChange}
                variant="outlined"
                fullWidth
                required
                disabled={loading}
                sx={{ mb: 3 }}
                helperText="Enter a unique identifier for your event"
              />
            ) : (
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 3 }}>
                <FormControl fullWidth>
                  <Select
                    name="selectedMember"
                    value={formData.selectedMember}
                    onChange={handleChange}
                    disabled={loading}
                    displayEmpty
                  >
                    <MenuItem value="" disabled>Select a member</MenuItem>
                    {memberList?.map((member: any) => (
                      <MenuItem key={member?.oemCode} value={member?.oemCode}>{member?.oemNamec}</MenuItem>
                    ))}
                  </Select>
                </FormControl>
                <IconButton
                  color="primary"
                  onClick={() => setModalOpen(true)}
                  disabled={loading}
                >
                  <AddIcon />
                </IconButton>
              </Box>
            )}
            <Stack direction="row" spacing={2}>
              <Button
                type="submit"
                variant="contained"
                color="primary"
                fullWidth
                disabled={loading}
                startIcon={loading ? <CircularProgress size={20} /> : null}
              >
                {loading ? 'Generating QR...' : 'Generate QR Code'}
              </Button>
              <Button
                variant="outlined"
                color="secondary"
                fullWidth
                onClick={handleBackToDashboard}
                disabled={loading}
              >
                Back to Dashboard
              </Button>
            </Stack>
          </form>
        </Paper>
      </Container>

      <Dialog open={modalOpen} onClose={handleModalClose}>
        <DialogTitle>Add New OEM</DialogTitle>
        <DialogContent>
          <TextField
            label="OEM Code"
            name="oemCode"
            value={newOemData.oemCode}
            onChange={handleNewOemChange}
            variant="outlined"
            fullWidth
            required
            sx={{ mb: 2, mt: 1 }}
          />
          <TextField
            label="OEM Name"
            name="oemNamec"
            value={newOemData.oemNamec}
            onChange={handleNewOemChange}
            variant="outlined"
            fullWidth
            required
            sx={{ mb: 2 }}
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={handleModalClose} disabled={loading}>
            Cancel
          </Button>
          <Button
            onClick={handleAddOemSubmit}
            variant="contained"
            color="primary"
            disabled={loading}
            startIcon={loading ? <CircularProgress size={20} /> : null}
          >
            {loading ? 'Adding...' : 'Add OEM'}
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default CreateQR;

    "USER_ID" NUMBER NOT NULL ENABLE, 
	"MOBILE_NO" NUMBER, 
	"BUSINESS_PAN" VARCHAR2(10 BYTE), 
	"PERSON_NAME" VARCHAR2(100 BYTE), 
	"PERSON_EMAIL" VARCHAR2(100 BYTE), 
	"PRODUCT" VARCHAR2(500 BYTE), 
	"AMOUNT" NUMBER(10,0), 
	"ENTITY_NAME" VARCHAR2(200 BYTE), 
	"PIN_CODE" NUMBER(6,0), 
	"CREATED_ON" DATE, 
