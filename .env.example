import React, { useEffect } from "react";
import { Grid, Table, TableBody, Button, TableCell, TableHead, TableRow, Alert, CardContent, Card, Typography } from "@mui/material"
import { useAppSelector } from "../../app/hooks";
import { useGetListOfModuleListDataQuery, useLazyGetLoiReportTermFileQuery } from "../../features/loi-notes/loiNotesApi";
import { Link } from "react-router-dom";
import { AiOutlineArrowLeft } from "react-icons/ai";
import { Download } from "@mui/icons-material";
import RiskLoader from "../../loader/riskLoader/RiskLoader";
import { useLazyGetNbfcReportDataByIdQuery } from "../../features/appraisal/appraisalReportApi";
import {
    useLazyGenReportQuery
} from "../../features/risk/api";
import {
    useLazyGetLoiReportFileQuery,
} from "../../features/loi-notes/loiNotesApi";
import { useLazyPnfReportDataQuery } from "../../features/pnf/api";
import { useLazyGenReportDataQuery } from "../../features/mir/api";
import { useLazyGenReportQuery as useLazyDueDiligenceReport } from "../../features/due-diligence-searches/dueDeligenceMainApi";

const ModuleReports = () => {
    const { applId } = useAppSelector((state: { userStore: any; }) => state.userStore);
    const { data: mdlist, isLoading, isError } = useGetListOfModuleListDataQuery(applId, {
        skip: !applId, refetchOnMountOrArgChange: true
    });
    const [schemeCodeValue, setSchemeCodeValue] = React.useState<any | null>(null);
    const [queryParams, setQueryParams] = React.useState<any | null>(null);
    const [snackbarOpen, setSnackbarOpen] = React.useState(false);
    const [snackbarMessage, setSnackbarMessage] = React.useState("");
    const [error, setError] = React.useState<boolean>(false);
    const [loading, setLoading] = React.useState<boolean>(false);
    import { showFileFromByteArray } from "../../utlis/helpers";
    // appraisal 
    const [triggerAppraisalReport, { data: genAppRatedData, isLoading: isAppraisalReport, isFetching: isFetchingAppraisal }] = useLazyGetNbfcReportDataByIdQuery();

    // previsit
    const [triggerPreVisitReport, { data: genPreRatedData, isLoading: isPreLoading, isFetching: isFetchingPre }] = useLazyGenReportQuery();
    // PNF Report
    const [triggerPnfReport, { data: pnfReportData, isLoading: isPnfLoading, isFetching: isPnfFetching }] = useLazyPnfReportDataQuery();

    // MIR Report
    const [triggerMirReport, { data: mirReportData, isLoading: isMirLoading, isFetching: isMirFetching }] = useLazyGenReportDataQuery();

    // Due Diligence Report
    const [triggerDueDiligenceReport, { data: dueDiligenceReportData, isLoading: isDueDiligenceLoading, isFetching: isDueDiligenceFetching }] = useLazyDueDiligenceReport();

    // Risk Concern Report
    const [triggerRiskConcernReport, { data: riskConcernReportData, isLoading: isRiskConcernLoading, isFetching: isRiskConcernFetching }] = useLazyGenReportQuery();

    // LOI Office Note Report
    const [triggerLoiOfficeNoteReport] = useLazyGetLoiReportFileQuery();

    // LOI Term Report
    const [triggerLoiTermReport, { data: loiTermReportData, isLoading: isLoiTermLoading, isFetching: isLoiTermFetching }] = useLazyGetLoiReportTermFileQuery();

    useEffect(() => {
        const schemeCd = sessionStorage.getItem("schemeCode");
        if (schemeCd) {
            setSchemeCodeValue(schemeCd);
        }
    }, []);

    const handleGenrateReports = async () => {
        if (!schemeCodeValue || !applId) {
            setSnackbarMessage("Scheme or Application ID is missing.");
            setSnackbarOpen(true);
            return;
        }

        try {
            setLoading(true);
            setError(false);

            if (!queryParams) {
                setQueryParams({ applId, schemeCodeValue });
            }
            const response = await triggerReport({ applId, schemeCode }).unwrap();
            if (response?.repData && response?.mimeType) {
                showFileFromByteArray(response.repData, response.mimeType);
            } else {
                console.error("Invalid response data");
                setSnackbarMessage("Invalid response data");
                setSnackbarOpen(true);
                setError(true);
            }

        } catch (err: any) {
            console.error("Error fetching report:", err);
            setSnackbarMessage(err?.message || "Something went wrong!");
            setSnackbarOpen(true);
            setError(true);
        } finally {
            setLoading(false);
        }
    };

    if (isLoading) return <RiskLoader />;


    return (

        <div className="ModuleReports-container-css wrap-appraisal-area">
            <Grid item xs={12} className="los_rgtdata px-2">
                <Grid className="mb-1 mt-1" container spacing={1} style={{ zIndex: '9', position: 'relative' }}>
                    <Grid className="py-0 pb-0" item xs={7}>
                        <Typography
                            className="wrap-bold"
                            noWrap
                            variant="subtitle1"
                            component="div"
                        >
                            <h6 className="title">Module Reports</h6>
                        </Typography>
                    </Grid>
                    <Grid
                        className="py-0 pb-0"
                        item
                        xs={5}
                        display="flex"
                        justifyContent="end"
                    >
                        <Link className="in-clickable text-capitalize" to="/landing">
                            <Button
                                color="inherit"
                                className="text-capitalize"
                                variant="outlined"
                                size="small"
                            >
                                <AiOutlineArrowLeft className="me-2" /> Back
                            </Button>
                        </Link>
                    </Grid>
                </Grid>
                <Grid item xs={12} className="los_rgtdata">

                </Grid>
                <Grid item md={12}>
                    <div className="wrap-inner-table">
                        <Table sx={{ minWidth: 650 }} className="table">
                            <TableHead>
                                <TableRow>
                                    <TableCell style={{ minWidth: '150px' }} ><b className="py-1 d-block">Module Name</b></TableCell>
                                    <TableCell style={{ minWidth: '150px' }}><b className="py-1 d-block">Action</b></TableCell>

                                </TableRow>
                            </TableHead>

                            <TableBody>
                                {mdlist && mdlist.length > 0 ? mdlist.map((item: any, index: number) => (
                                    <TableRow key={index}>
                                        <TableCell style={{ fontSize: "12px" }}>
                                            <Typography style={{ fontSize: "12px" }} >
                                                {item?.moduleDesc && item?.moduleDesc != null ? item?.moduleDesc : ''}
                                            </Typography>
                                        </TableCell>
                                        <TableCell>
                                            <Button
                                                color="primary"
                                                className="text-capitalize"
                                                variant="contained"
                                                size="small"
                                            >
                                                <Download className="me-1" style={{ fontSize: '18px' }} /> Download
                                            </Button>
                                        </TableCell>

                                    </TableRow>
                                )) : null}


                            </TableBody>
                        </Table>
                    </div>
                </Grid>
            </Grid>
        </div>
    )
}

export default ModuleReports;

{
    "data": [
        {
            "slNo": 1,
            "moduleCode": "MIR",
            "moduleDesc": "Market Inteligence Report",
            "moduleCodeNum": null,
            "activeMenu": null,
            "route": null
        },
        {
            "slNo": 2,
            "moduleCode": "PNF",
            "moduleDesc": "Personnel Nomination Form",
            "moduleCodeNum": null,
            "activeMenu": null,
            "route": null
        },
        {
            "slNo": 3,
            "moduleCode": "PREVISIT",
            "moduleDesc": "Pre-sanction Visit",
            "moduleCodeNum": null,
            "activeMenu": null,
            "route": null
        },
        {
            "slNo": 4,
            "moduleCode": "RISK",
            "moduleDesc": "Risk Concern",
            "moduleCodeNum": null,
            "activeMenu": null,
            "route": null
        },
        {
            "slNo": 5,
            "moduleCode": "DUED",
            "moduleDesc": "Due Diligence Searches",
            "moduleCodeNum": null,
            "activeMenu": null,
            "route": null
        },
        {
            "slNo": 6,
            "moduleCode": "APPR",
            "moduleDesc": "Appraisal",
            "moduleCodeNum": null,
            "activeMenu": null,
            "route": null
        },
        {
            "slNo": 7,
            "moduleCode": "MINUTES",
            "moduleDesc": "Minutes",
            "moduleCodeNum": null,
            "activeMenu": null,
            "route": null
        },
        {
            "slNo": 8,
            "moduleCode": "LOINOTE",
            "moduleDesc": "Office Note",
            "moduleCodeNum": null,
            "activeMenu": null,
            "route": null
        },
        {
            "slNo": 9,
            "moduleCode": "LOIREPORT",
            "moduleDesc": "LOI Report",
            "moduleCodeNum": null,
            "activeMenu": null,
            "route": null
        },
        {
            "slNo": 10,
            "moduleCode": "MEETING",
            "moduleDesc": "Meeting",
            "moduleCodeNum": null,
            "activeMenu": null,
            "route": null
        }
    ],
    "message": "Success",
    "status": 200
}

