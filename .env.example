class Solution {
    /**
     * @param {number[][]} grid
     * @return {number}
     */
    orangesRotting(grid) {
        const m = grid.length;
        const n = grid[0].length;
        let q = [];
        let min = 0;
        for (let i = 0; i < m; i++) {
            for (let j = 0; j < n; j++) {
                if (grid[i][j] === 2) {
                    q.push([i, j, 0]);
                }
            }
        }
        while (q.length) {
            let [r, c, level] = q[0];
            let top = r > 0 && grid[r - 1][c];
            let bottom = (r < m - 1) && grid[r + 1][c];
            let right = c < n - 1 && grid[r][c + 1];
            let left = c > 0 && grid[r][c - 1];
            if (top === 1) {
                grid[r - 1][c]=2;
                q.push([r - 1, c, level + 1]);
            }
            if (bottom == 1) {
                grid[r + 1][c]=2;
                q.push([r + 1, c, level + 1]);
            }
            if (right == 1) {
              grid[r][c + 1]=2;
                q.push([r, c + 1, level + 1]);
            }
            if (left == 1) {
                grid[r][c - 1]=2;
                q.push([r, c - 1, level + 1]);
            }
           
            q.shift();
            min = Math.max(min, level);
        }
        console.log("q",q);
        for (let i = 0; i < m; i++) {
            for (let j = 0; j < n; j++) {
                if (grid[i][j] === 1) {
                    return -1;
                }
            }
        }
        return min;
    }
}
