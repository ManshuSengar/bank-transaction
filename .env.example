import { useState, useEffect, useRef } from "react";
import { FieldArray, Form, Formik } from 'formik';
import AutoSave from '../../../components/framework/AutoSave';
import { Delete } from '@mui/icons-material';
import {
    Button, Grid, IconButton, Table, TableBody, TableCell, TableHead, TableRow,
} from "@mui/material";
import CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';
import { connect } from 'react-redux';
import AddCircleIcon from '@mui/icons-material/AddCircle';
import { useAppSelector } from "../../../app/hooks";
import {
    useGetpFCutsStateWiseFormDataQuery,
    useSavepFCutsStateWiseFormDetailsMutation,
    useDeletepFCutsStateWiseByIdMutation,
    useGetStateMasterQuery,
} from "../../../features/application-form/Portfoliocuts";
import ConfirmationAlertDialog from "../../../models/application-form/ConfirmationAlertDialog";
import { OnlineSnackbar } from "../../../components/shared/OnlineSnackbar";
import { EnhancedDropDown } from "../../../components/framework/EnhancedDropDown";
import SaveAsIcon from '@mui/icons-material/SaveAs';
import * as Yup from 'yup';
import { AdvanceTextBoxField } from "../../../components/framework/AdvanceTextBoxField";
import FullScreenLoaderNoClose from "../../../components/common/FullScreenLoaderNoClose";

const StateWisePortfolio = ({ excelData }: any) => {
    const { applId, transactionData } = useAppSelector((state) => state.userStore);
    const [savepFCutsStateWiseFormDetails] = useSavepFCutsStateWiseFormDetailsMutation();
    const [deletepfCuts] = useDeletepFCutsStateWiseByIdMutation();
    const { data: stateValue } = useGetStateMasterQuery("");
    const { data: getpFCutsStateWiseFormData } = useGetpFCutsStateWiseFormDataQuery(applId);
    const [open, setOpen] = useState(false);
    const [index, setIndex] = useState(0);
    const [openConfirmation, setOpenConfirmation] = useState(false);
    const [formData, setFormData] = useState<any>("");
    const [actionVal, setActionVal] = useState<any>("");
    const [excelUploadError, setExcelUploadError] = useState<string | null>(null);
    const setFieldValueRef = useRef<any>(null);
    const [isUploading, setIsUploading] = useState<boolean>(false);
    const [snackMsgList, setSnackMsgList] = useState<any>("");

    const [snackOpen, setSnackOpen] = useState(false);
    const [snackSeverity, setSnackSeverity] = useState<'error' | 'success' | 'info'>('error');
    const [snackMessages, setSnackMessages] = useState<string[]>([]);


    useEffect(() => {
        if (excelData && excelData?.length > 0) {
            const stateRows = excelData.filter((row: any) => row[1] && row[1] !== 'Sub Total');
            const newData: any = [];

            stateRows.forEach((excelRow: any) => {
                const stateName = excelRow[1]?.toString().trim().toUpperCase();
                if (stateName !== "SUB TOTAL") {
                    const qtrDpd0 = parseExcelValue(excelRow[8]);
                    const qtrDpd1To30 = parseExcelValue(excelRow[9]);
                    const qtrDpd31To60 = parseExcelValue(excelRow[10]);
                    const qtrDpd61To90 = parseExcelValue(excelRow[11]);
                    const qtrDpdAbove90 = parseExcelValue(excelRow[12]);
                    const qtrPos = (qtrDpd0 + qtrDpd1To30 + qtrDpd31To60 + qtrDpd61To90 + qtrDpdAbove90).toFixed(2);

                    let tpos = '0';
                    if (transactionData?.lstAudQ !== 'Not Applicable') {
                        const tdpd0 = parseExcelValue(excelRow[15]);
                        const tdpd1To30 = parseExcelValue(excelRow[16]);
                        const tdpd31To60 = parseExcelValue(excelRow[17]);
                        const tdpd61To90 = parseExcelValue(excelRow[18]);
                        const tdpdAbove90 = parseExcelValue(excelRow[19]);
                        tpos = (tdpd0 + tdpd1To30 + tdpd31To60 + tdpd61To90 + tdpdAbove90).toFixed(2);
                    }

                    const rowData = {
                        state: stateName,
                        tminus2Loans: parseExcelValue(excelRow[2]),
                        tminus2Pos: parseExcelValue(excelRow[3]),
                        tminus1Loans: parseExcelValue(excelRow[4]),
                        tminus1Pos: parseExcelValue(excelRow[5]),
                        qtrLoans: parseExcelValue(excelRow[6]),
                        qtrPos,
                        qtrDpd0,
                        qtrDpd1To30,
                        qtrDpd31To60,
                        qtrDpd61To90,
                        qtrDpdAbove90,
                        tloans: parseExcelValue(excelRow[13]),
                        tpos,
                        tdpd0: parseExcelValue(excelRow[15]),
                        tdpd1To30: parseExcelValue(excelRow[16]),
                        tdpd31To60: parseExcelValue(excelRow[17]),
                        tdpd61To90: parseExcelValue(excelRow[18]),
                        tdpdAbove90: parseExcelValue(excelRow[19]),
                        slNo: null,
                        saveStatus: '01',
                    };

                    const existingIndex = newData.findIndex((row: any) => row.state === stateName);
                    if (existingIndex !== -1) {
                        newData[existingIndex] = { ...newData[existingIndex], ...rowData };
                    } else {
                        newData.push(rowData);
                    }
                }
            });
            setFieldValueRef.current("data", newData);
            setOpenSnackbar(true);
            setSeverity("success");
            setSnackMsg("State-wise data imported successfully");
        }
    }, [excelData, transactionData]);

    const handleSubmitApis = async (values: any) => {
        let finalValue = values?.data?.map((listData: any, index: number) => {
            return {
                ...listData, applId, slNo: index + 1
            };
        });
        if (!finalValue) {
            finalValue = values?.map((listData: any, index: number) => {
                return {
                    ...listData, applId, slNo: index + 1,
                };
            });
        }
        try {
            setIsUploading(true);

            if (await savepFCutsStateWiseFormDetails(finalValue).unwrap()) {
                setOpenSnackbar(true);
                setSeverity("success");
                setIsUploading(false);
                if (finalValue?.[0]?.saveStatus === '02') {
                    setSnackMsg("Section submitted successfully");
                } else {
                    setSnackMsg("Record saved successfully");
                }
                return true;
            }
            return false;
        } catch (error: any) {
            setOpenSnackbar(true);
            setIsUploading(false);
            setSeverity("error");
            setSnackMsg("Failed to save: " + error?.message);
            return false;
        }
    };

    const handleCloseConfirmation = () => {
        setActionVal(null);
        setOpenConfirmation(false);
    };

    const handleSubmitConfirmation = (values: any) => {
        const finalValue = values?.data?.map((listData: any) => {
            return {
                ...listData, saveStatus: '02'
            };
        });
        setOpenConfirmation(false);
        handleSubmitApis(finalValue);
    };

    const handleSubmit = async (values: any) => {
        if (actionVal === '02') {
            setFormData(values);
            setOpenConfirmation(true);
        } else {
            handleSubmitApis(values);
        }
        setActionVal(null);
    };

    const handleClickSetAction = (action: any) => {
        setActionVal(action);
    };

    const calculation = (setFieldValue: any, values: any, currentIndex: number,
        currentVal: number, currentRowId: string) => {
        calculationTotal(setFieldValue, values, currentIndex, currentVal, currentRowId);

        if (currentRowId === 'qtrDpd0' || currentRowId === 'qtrDpd1To30' || currentRowId === 'qtrDpd31To60'
            || currentRowId === 'qtrDpd61To90' || currentRowId === 'qtrDpdAbove90') {
            calculationCurrentFy(setFieldValue, values, currentIndex, currentVal, currentRowId);
        } else if (currentRowId === 'tdpd0' || currentRowId === 'tdpd1To30' || currentRowId === 'tdpd31To60'
            || currentRowId === 'tdpd61To90' || currentRowId === 'tdpdAbove90')
            calculationCurrentFyQtr(setFieldValue, values, currentIndex, currentVal, currentRowId);
    };

    const calculationCurrentFy = (setFieldValue: any, values: any, currentIndex: number,
        currentVal: number, currentRowId: string) => {
        const currentRow = values.data[currentIndex];
        const qtrDpd0 = currentRowId === 'qtrDpd0' ? currentVal : currentRow.qtrDpd0;
        const qtrDpd1To30 = currentRowId === 'qtrDpd1To30' ? currentVal : currentRow.qtrDpd1To30;
        const qtrDpd31To60 = currentRowId === 'qtrDpd31To60' ? currentVal : currentRow.qtrDpd31To60;
        const qtrDpd61To90 = currentRowId === 'qtrDpd61To90' ? currentVal : currentRow.qtrDpd61To90;
        const qtrDpdAbove90 = currentRowId === 'qtrDpdAbove90' ? currentVal : currentRow.qtrDpdAbove90;

        const total = +qtrDpd0 + +qtrDpd1To30 + +qtrDpd31To60 + +qtrDpd61To90 + +qtrDpdAbove90;
        const totalPrefix = 'data.' + currentIndex + '.qtrPos';
        setFieldValue(`${totalPrefix}`, total.toFixed(2));
        calculationTotal(setFieldValue, values, currentIndex, Number(total.toFixed(2)), 'qtrPos');
    };

    const calculationCurrentFyQtr = (setFieldValue: any, values: any, currentIndex: number,
        currentVal: number, currentRowId: string) => {
        const currentRow = values.data[currentIndex];
        const qtrDpd0 = currentRowId === 'tdpd0' ? currentVal : currentRow.tdpd0;
        const qtrDpd1To30 = currentRowId === 'tdpd1To30' ? currentVal : currentRow.tdpd1To30;
        const qtrDpd31To60 = currentRowId === 'tdpd31To60' ? currentVal : currentRow.tdpd31To60;
        const qtrDpd61To90 = currentRowId === 'tdpd61To90' ? currentVal : currentRow.tdpd61To90;
        const qtrDpdAbove90 = currentRowId === 'tdpdAbove90' ? currentVal : currentRow.tdpdAbove90;

        const total = +qtrDpd0 + +qtrDpd1To30 + +qtrDpd31To60 + +qtrDpd61To90 + +qtrDpdAbove90;
        const totalPrefix = 'data.' + currentIndex + '.tpos';
        setFieldValue(`${totalPrefix}`, total.toFixed(2));
        calculationTotal(setFieldValue, values, currentIndex, Number(total.toFixed(2)), 'tpos');
    };

    const calculationTotal = (setFieldValue: any, values: any, currentIndex: number,
        currentVal: number, currentRowId: string) => {
        const currentRowVal = currentVal;
        let total = 0;
        for (let i = 0; i < values?.data?.length - 1; i++) {
            if (i !== currentIndex) {
                total = (+total + +getRowValue(values, i, currentRowId));
            }
        }
    };

    const getRowValue = (values: any, index: number, currentRowId: string) => {
        if (currentRowId === 'tdpd1To30') return values.data[index].tdpd1To30;
        else if (currentRowId === 'tdpd31To60') return values.data[index].tdpd31To60;
        else if (currentRowId === 'tdpd61To90') return values.data[index].tdpd61To90;
        else if (currentRowId === 'tdpdAbove90') return values.data[index].tdpdAbove90;
        else if (currentRowId === "tdpd0") return values.data[index].tdpd0;
        else if (currentRowId === "tminus2Loans") return values.data[index].tminus2Loans;
        else if (currentRowId === "tminus2Pos") return values.data[index].tminus2Pos;
        else if (currentRowId === "tminus1Loans") return values.data[index].tminus1Loans;
        else if (currentRowId === "tminus1Pos") return values.data[index].tminus1Pos;
        else if (currentRowId === "qtrLoans") return values.data[index].qtrLoans;
        else if (currentRowId === "qtrPos") return values.data[index].qtrPos;
        else if (currentRowId === "qtrDpd0") return values.data[index].qtrDpd0;
        else if (currentRowId === "qtrDpd1To30") return values.data[index].qtrDpd1To30;
        else if (currentRowId === "qtrDpd31To60") return values.data[index].qtrDpd31To60;
        else if (currentRowId === "qtrDpd61To90") return values.data[index].qtrDpd61To90;
        else if (currentRowId === "qtrDpdAbove90") return values.data[index].qtrDpdAbove90;
        else if (currentRowId === "tloans") return values.data[index].tloans;
        else if (currentRowId === "tpos") return values.data[index].tpos;
    };

    const handleDelete = async (applId: any, index: number) => {
        handleClose();
        try {
            if (await deletepfCuts({ applId, index }).unwrap()) {
                setOpenSnackbar(true);
                setSeverity("success");
                setSnackMsg("Record Deleted successfully");
            }
        } catch (error) {
            console.error("Error saving compliance position:", error);
            setOpenSnackbar(true);
            setSeverity("error");
            setSnackMsg("Failed to delete");
        }
    };

    const calculatetminus2Loans = (values: any) => {
        return values.data.reduce((total: number, data1: any) => {
            return total + (parseFloat(data1?.tminus2Loans) || 0);
        }, 0);
    };

    const calculatettminus2Pos = (values: any) => {
        return values.data.reduce((total: number, data1: any) => {
            return total + (parseFloat(data1?.tminus2Pos) || 0);
        }, 0);
    };

    const calculatetminus1Loans = (values: any) => {
        return values.data.reduce((total: number, data1: any) => {
            return total + (parseFloat(data1?.tminus1Loans) || 0);
        }, 0);
    };

    const calculatetminus1Pos = (values: any) => {
        return values.data.reduce((total: number, data1: any) => {
            return total + (parseFloat(data1?.tminus1Pos) || 0);
        }, 0);
    };

    const calculatetqtrLoans = (values: any) => {
        return values.data.reduce((total: number, data1: any) => {
            return total + (parseFloat(data1?.qtrLoans) || 0);
        }, 0);
    };

    const calculatetqtrPos = (values: any) => {
        return values.data.reduce((total: number, data1: any) => {
            return total + (parseFloat(data1?.qtrPos) || 0);
        }, 0);
    };

    const calculatetqtrDpd0 = (values: any) => {
        return values.data.reduce((total: number, data1: any) => {
            return total + (parseFloat(data1?.qtrDpd0) || 0);
        }, 0);
    };

    const calculatetqtrDpd1To30 = (values: any) => {
        return values.data.reduce((total: number, data1: any) => {
            return total + (parseFloat(data1?.qtrDpd1To30) || 0);
        }, 0);
    };

    const calculatetqtrqtrDpd31To60 = (values: any) => {
        return values.data.reduce((total: number, data1: any) => {
            return total + (parseFloat(data1?.qtrDpd31To60) || 0);
        }, 0);
    };

    const calculatetqtrqtrqtrDpd61To90 = (values: any) => {
        return values.data.reduce((total: number, data1: any) => {
            return total + (parseFloat(data1?.qtrDpd61To90) || 0);
        }, 0);
    };

    const calculatetqtrqtrqtrDpdAbove90 = (values: any) => {
        return values.data.reduce((total: number, data1: any) => {
            return total + (parseFloat(data1?.qtrDpdAbove90) || 0);
        }, 0);
    };

    const calculatetqtrqtrqtrtloans = (values: any) => {
        return values.data.reduce((total: number, data1: any) => {
            return total + (parseFloat(data1?.tloans) || 0);
        }, 0);
    };

    const calculatetqtrqtrtpos = (values: any) => {
        return values.data.reduce((total: number, data1: any) => {
            return total + (parseFloat(data1?.tpos) || 0);
        }, 0);
    };

    const calculatetqtrqttdpd0 = (values: any) => {
        return values.data.reduce((total: number, data1: any) => {
            return total + (parseFloat(data1?.tdpd0) || 0);
        }, 0);
    };

    const calculatetqtrqtdpd1To30 = (values: any) => {
        return values.data.reduce((total: number, data1: any) => {
            return total + (parseFloat(data1?.tdpd1To30) || 0);
        }, 0);
    };

    const calculatetqtrqtdptdpd31To60 = (values: any) => {
        return values.data.reduce((total: number, data1: any) => {
            return total + (parseFloat(data1?.tdpd31To60) || 0);
        }, 0);
    };

    const calculatetqtrqtdptdpdtdpd61To90 = (values: any) => {
        return values.data.reduce((total: number, data1: any) => {
            return total + (parseFloat(data1?.tdpd61To90) || 0);
        }, 0);
    };

    const calculatetqtrqtdptdpdtdtdpdAbove90 = (values: any) => {
        return values.data.reduce((total: number, data1: any) => {
            return total + (parseFloat(data1?.tdpdAbove90) || 0);
        }, 0);
    };

    const handleClickOpen = (index: number) => {
        setIndex(index);
        setOpen(true);
    };

    const handleClose = () => {
        setOpen(false);
    };

    const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);
    const [snackMsg, setSnackMsg] = useState<any>("");
    const [severity, setSeverity] = useState<string | any>("success");

    const handleClosePop = () => {
        setOpenSnackbar(false);
    };

    const parseExcelValue = (value: any): number => {
        if (value === undefined || value === null || value === '') return 0;
        if (typeof value === 'string') return parseFloat(value.replace(/,/g, '')) || 0;
        return parseFloat(value.toFixed(2)) || 0;
    };

    const statewiseListingSchema = Yup.object().shape({
        data: Yup.array().of(
            Yup.object().shape({
                state: Yup.string().required('Required')
            })
        ),
    });
    if (isUploading) return <FullScreenLoaderNoClose />;

    return (
        <div className="wrap-appraisal-area">
            <div className="custome-form">
                <ConfirmationAlertDialog
                    id={applId as unknown as number}
                    type={4}
                    open={openConfirmation}
                    handleClose={handleCloseConfirmation}
                    handleDelete={handleSubmitConfirmation}
                    values={formData}
                />
                <ConfirmationAlertDialog
                    id={applId as unknown as number}
                    index={index}
                    type={2}
                    open={open}
                    handleClose={handleClose}
                    handleDelete={handleDelete}
                />
                <div className="wrap-inner-table" style={{ overflow: 'auto' }}>
                    <Formik
                        initialValues={getpFCutsStateWiseFormData || { data: [] }}
                        onSubmit={handleSubmit}
                        enableReinitialize
                        validationSchema={statewiseListingSchema}
                        validateOnChange={true}
                        validateOnBlur={true}
                    >
                        {({ values, setFieldValue }) => {
                            setFieldValueRef.current = setFieldValue;
                            return (
                                <Form>
                                    <fieldset disabled={values?.data?.[0]?.saveStatus === "02"}>
                                        {values?.data?.[0]?.saveStatus !== "02" &&
                                            <AutoSave handleSubmit={handleSubmit} values={values} debounceMs={30000} autoStyle={true} />
                                        }

                                        <FieldArray name="data">
                                            {({ remove, push }) => (
                                                <>
                                                    {values?.data?.[0]?.saveStatus !== "02" && (
                                                        <Button
                                                            size="small"
                                                            className='psn_btn text-capitalize my-2 saveBtn'
                                                            color="primary"
                                                            style={{ marginLeft: '15px', display: 'block' }}
                                                            onClick={() =>
                                                                push({
                                                                    state: "",
                                                                    tminus2Loans: "",
                                                                    tminus2Pos: "",
                                                                    tminus1Loans: "",
                                                                    tminus1Pos: "",
                                                                    qtrLoans: "",
                                                                    qtrPos: "",
                                                                    qtrDpd0: "",
                                                                    qtrDpd1To30: "",
                                                                    qtrDpd31To60: "",
                                                                    qtrDpd61To90: "",
                                                                    qtrDpdAbove90: "",
                                                                    tloans: "",
                                                                    tpos: "",
                                                                    tdpd0: "",
                                                                    tdpd1To30: "",
                                                                    tdpd31To60: "",
                                                                    tdpd61To90: "",
                                                                    tdpdAbove90: "",
                                                                    slNo: ""
                                                                })
                                                            }
                                                        >
                                                            Add <AddCircleIcon />
                                                        </Button>
                                                    )}
                                                    <Table sx={{ minWidth: 650 }} aria-label="simple table" className="smTxt">
                                                        <TableHead>
                                                            <TableRow>
                                                                <TableCell style={{ width: '7%' }} align='center'>
                                                                    <b>Action</b>
                                                                </TableCell>
                                                                <TableCell style={{ minWidth: '150px' }}><b>State</b></TableCell>
                                                                <TableCell colSpan={2} align='center'><b>FY {transactionData?.lstAudYrTm2}</b></TableCell>
                                                                <TableCell colSpan={2} align='center'><b>FY {transactionData?.lstAudYrTm1}</b></TableCell>
                                                                <TableCell colSpan={7} align='center'><b>FY {transactionData?.lstAudYrT}</b></TableCell>
                                                                {transactionData?.lstAudQ !== 'Not Applicable' &&
                                                                    <TableCell colSpan={7} align='center'><b>{transactionData?.lstAudQ}</b></TableCell>
                                                                }
                                                            </TableRow>
                                                        </TableHead>
                                                        <TableHead>
                                                            <TableRow>
                                                                <TableCell style={{ minWidth: '100px' }}><b></b></TableCell>
                                                                <TableCell style={{ minWidth: '100px' }}><b></b></TableCell>
                                                                <TableCell style={{ minWidth: '100px' }}><b>No. Of Loans</b></TableCell>
                                                                <TableCell style={{ minWidth: '100px' }}><b>POS</b></TableCell>
                                                                <TableCell style={{ minWidth: '100px' }}><b>No. of Loans</b></TableCell>
                                                                <TableCell style={{ minWidth: '100px' }}><b>POS</b></TableCell>
                                                                <TableCell style={{ minWidth: '100px' }}><b>No. of Loans</b></TableCell>
                                                                <TableCell style={{ minWidth: '100px' }}><b>POS</b></TableCell>
                                                                <TableCell style={{ minWidth: '100px' }}><b>{"<"}0</b></TableCell>
                                                                <TableCell style={{ minWidth: '100px' }}><b>1-30</b></TableCell>
                                                                <TableCell style={{ minWidth: '100px' }}><b>31-60</b></TableCell>
                                                                <TableCell style={{ minWidth: '100px' }}><b>61-90</b></TableCell>
                                                                <TableCell style={{ minWidth: '100px' }}><b>{">"}90</b></TableCell>
                                                                {transactionData?.lstAudQ !== 'Not Applicable' &&
                                                                    <TableCell style={{ minWidth: '100px' }}><b>No of Loans</b></TableCell>
                                                                }
                                                                {transactionData?.lstAudQ !== 'Not Applicable' &&
                                                                    <TableCell style={{ minWidth: '100px' }}><b>POS</b></TableCell>
                                                                }
                                                                {transactionData?.lstAudQ !== 'Not Applicable' &&
                                                                    <TableCell style={{ minWidth: '100px' }}><b>{"<"}0</b></TableCell>
                                                                }
                                                                {transactionData?.lstAudQ !== 'Not Applicable' &&
                                                                    <TableCell style={{ minWidth: '100px' }}><b>1-30</b></TableCell>
                                                                }
                                                                {transactionData?.lstAudQ !== 'Not Applicable' &&
                                                                    <TableCell style={{ minWidth: '100px' }}><b>31-60</b></TableCell>
                                                                }
                                                                {transactionData?.lstAudQ !== 'Not Applicable' &&
                                                                    <TableCell style={{ minWidth: '100px' }}><b>61-90</b></TableCell>
                                                                }
                                                                {transactionData?.lstAudQ !== 'Not Applicable' &&
                                                                    <TableCell style={{ minWidth: '100px' }}><b>{">"}90</b></TableCell>
                                                                }
                                                            </TableRow>
                                                        </TableHead>
                                                        <TableBody>
                                                            {values?.data?.map((item: any, index: any) => (
                                                                <TableRow key={index}>
                                                                    <TableCell align='center'>
                                                                        {item?.saveStatus !== '02' && (
                                                                            <IconButton
                                                                                onClick={() => item?.slNo ? handleClickOpen(item.slNo) : remove(index)}
                                                                                color="error"
                                                                            >
                                                                                <Delete />
                                                                            </IconButton>
                                                                        )}
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <Grid item xs={12}>
                                                                            <EnhancedDropDown
                                                                                label="State Name"
                                                                                name={`data.${index}.state`}
                                                                                domain="mstr/getStateMaster"
                                                                                disabled={item?.saveStatus === '02'}
                                                                            />
                                                                        </Grid>
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <AdvanceTextBoxField
                                                                            name={`data.${index}.tminus2Loans`}
                                                                            onCustomChange={(currentVal: any) =>
                                                                                calculation(setFieldValue, values, index, currentVal, 'tminus2Loans')}
                                                                            type={'number'}
                                                                            allowNegative={false}
                                                                            allowDecimal={false}
                                                                        />
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <AdvanceTextBoxField
                                                                            name={`data.${index}.tminus2Pos`}
                                                                            onCustomChange={(currentVal: any) =>
                                                                                calculation(setFieldValue, values, index, currentVal, 'tminus2Pos')}
                                                                            type={'number'}
                                                                        />
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <AdvanceTextBoxField
                                                                            name={`data.${index}.tminus1Loans`}
                                                                            onCustomChange={(currentVal: any) =>
                                                                                calculation(setFieldValue, values, index, currentVal, 'tminus1Loans')}
                                                                            type={'number'}
                                                                            allowNegative={false}
                                                                            allowDecimal={false}
                                                                        />
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <AdvanceTextBoxField
                                                                            name={`data.${index}.tminus1Pos`}
                                                                            onCustomChange={(currentVal: any) =>
                                                                                calculation(setFieldValue, values, index, currentVal, 'tminus1Pos')}
                                                                            type={'number'}
                                                                        />
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <AdvanceTextBoxField
                                                                            name={`data.${index}.qtrLoans`}
                                                                            onCustomChange={(currentVal: any) =>
                                                                                calculation(setFieldValue, values, index, currentVal, 'qtrLoans')}
                                                                            type={'number'}
                                                                            allowNegative={false}
                                                                            allowDecimal={false}
                                                                        />
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <AdvanceTextBoxField
                                                                            name={`data.${index}.qtrPos`}
                                                                            onCustomChange={(currentVal: any) =>
                                                                                calculation(setFieldValue, values, index, currentVal, 'qtrPos')}
                                                                            type={'number'}
                                                                            disabled={true}
                                                                        />
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <AdvanceTextBoxField
                                                                            name={`data.${index}.qtrDpd0`}
                                                                            onCustomChange={(currentVal: any) =>
                                                                                calculation(setFieldValue, values, index, currentVal, 'qtrDpd0')}
                                                                            type={'number'}
                                                                        />
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <AdvanceTextBoxField
                                                                            name={`data.${index}.qtrDpd1To30`}
                                                                            onCustomChange={(currentVal: any) =>
                                                                                calculation(setFieldValue, values, index, currentVal, 'qtrDpd1To30')}
                                                                            type={'number'}
                                                                        />
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <AdvanceTextBoxField
                                                                            name={`data.${index}.qtrDpd31To60`}
                                                                            onCustomChange={(currentVal: any) =>
                                                                                calculation(setFieldValue, values, index, currentVal, 'qtrDpd31To60')}
                                                                            type={'number'}
                                                                        />
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <AdvanceTextBoxField
                                                                            name={`data.${index}.qtrDpd61To90`}
                                                                            onCustomChange={(currentVal: any) =>
                                                                                calculation(setFieldValue, values, index, currentVal, 'qtrDpd61To90')}
                                                                            type={'number'}
                                                                        />
                                                                    </TableCell>
                                                                    <TableCell>
                                                                        <AdvanceTextBoxField
                                                                            name={`data.${index}.qtrDpdAbove90`}
                                                                            onCustomChange={(currentVal: any) =>
                                                                                calculation(setFieldValue, values, index, currentVal, 'qtrDpdAbove90')}
                                                                            type={'number'}
                                                                        />
                                                                    </TableCell>
                                                                    {transactionData?.lstAudQ !== 'Not Applicable' &&
                                                                        <TableCell>
                                                                            <AdvanceTextBoxField
                                                                                name={`data.${index}.tloans`}
                                                                                onCustomChange={(currentVal: any) =>
                                                                                    calculation(setFieldValue, values, index, currentVal, 'tloans')}
                                                                                type={'number'}
                                                                                allowNegative={false}
                                                                                allowDecimal={false}
                                                                            />
                                                                        </TableCell>
                                                                    }
                                                                    {transactionData?.lstAudQ !== 'Not Applicable' &&
                                                                        <TableCell>
                                                                            <AdvanceTextBoxField
                                                                                name={`data.${index}.tpos`}
                                                                                onCustomChange={(currentVal: any) =>
                                                                                    calculation(setFieldValue, values, index, currentVal, 'tpos')}
                                                                                type={'number'}
                                                                                disabled={true}
                                                                            />
                                                                        </TableCell>
                                                                    }
                                                                    {transactionData?.lstAudQ !== 'Not Applicable' &&
                                                                        <TableCell>
                                                                            <AdvanceTextBoxField
                                                                                name={`data.${index}.tdpd0`}
                                                                                onCustomChange={(currentVal: any) =>
                                                                                    calculation(setFieldValue, values, index, currentVal, 'tdpd0')}
                                                                                type={'number'}
                                                                            />
                                                                        </TableCell>
                                                                    }
                                                                    {transactionData?.lstAudQ !== 'Not Applicable' &&
                                                                        <TableCell>
                                                                            <AdvanceTextBoxField
                                                                                name={`data.${index}.tdpd1To30`}
                                                                                onCustomChange={(currentVal: any) =>
                                                                                    calculation(setFieldValue, values, index, currentVal, 'tdpd1To30')}
                                                                                type={'number'}
                                                                            />
                                                                        </TableCell>
                                                                    }
                                                                    {transactionData?.lstAudQ !== 'Not Applicable' &&
                                                                        <TableCell>
                                                                            <AdvanceTextBoxField
                                                                                name={`data.${index}.tdpd31To60`}
                                                                                onCustomChange={(currentVal: any) =>
                                                                                    calculation(setFieldValue, values, index, currentVal, 'tdpd31To60')}
                                                                                type={'number'}
                                                                            />
                                                                        </TableCell>
                                                                    }
                                                                    {transactionData?.lstAudQ !== 'Not Applicable' &&
                                                                        <TableCell>
                                                                            <AdvanceTextBoxField
                                                                                name={`data.${index}.tdpd61To90`}
                                                                                onCustomChange={(currentVal: any) =>
                                                                                    calculation(setFieldValue, values, index, currentVal, 'tdpd61To90')}
                                                                                type={'number'}
                                                                            />
                                                                        </TableCell>
                                                                    }
                                                                    {transactionData?.lstAudQ !== 'Not Applicable' &&
                                                                        <TableCell>
                                                                            <AdvanceTextBoxField
                                                                                name={`data.${index}.tdpdAbove90`}
                                                                                onCustomChange={(currentVal: any) =>
                                                                                    calculation(setFieldValue, values, index, currentVal, 'tdpdAbove90')}
                                                                                type={'number'}
                                                                            />
                                                                        </TableCell>
                                                                    }
                                                                </TableRow>
                                                            ))}
                                                        </TableBody>
                                                        {values?.data?.length > 0 && (
                                                            <TableRow>
                                                                <TableCell><b>Sub Total</b></TableCell>
                                                                <TableCell><b></b></TableCell>
                                                                <TableCell>
                                                                    <b>
                                                                        {calculatetminus2Loans(values).toLocaleString({
                                                                            maximumFractionDigits: 2,
                                                                            style: 'currency',
                                                                            currency: 'INR'
                                                                        })}
                                                                    </b>
                                                                </TableCell>
                                                                <TableCell>
                                                                    <b>
                                                                        {calculatettminus2Pos(values).toLocaleString({
                                                                            maximumFractionDigits: 2,
                                                                            style: 'currency',
                                                                            currency: 'INR'
                                                                        })}
                                                                    </b>
                                                                </TableCell>
                                                                <TableCell>
                                                                    <b>
                                                                        {calculatetminus1Loans(values).toLocaleString({
                                                                            maximumFractionDigits: 2,
                                                                            style: 'currency',
                                                                            currency: 'INR'
                                                                        })}
                                                                    </b>
                                                                </TableCell>
                                                                <TableCell>
                                                                    <b>
                                                                        {calculatetminus1Pos(values).toLocaleString({
                                                                            maximumFractionDigits: 2,
                                                                            style: 'currency',
                                                                            currency: 'INR'
                                                                        })}
                                                                    </b>
                                                                </TableCell>
                                                                <TableCell>
                                                                    <b>
                                                                        {calculatetqtrLoans(values).toLocaleString({
                                                                            maximumFractionDigits: 2,
                                                                            style: 'currency',
                                                                            currency: 'INR'
                                                                        })}
                                                                    </b>
                                                                </TableCell>
                                                                <TableCell>
                                                                    <b>
                                                                        {calculatetqtrPos(values).toLocaleString({
                                                                            maximumFractionDigits: 2,
                                                                            style: 'currency',
                                                                            currency: 'INR'
                                                                        })}
                                                                    </b>
                                                                </TableCell>
                                                                <TableCell>
                                                                    <b>
                                                                        {calculatetqtrDpd0(values).toLocaleString({
                                                                            maximumFractionDigits: 2,
                                                                            style: 'currency',
                                                                            currency: 'INR'
                                                                        })}
                                                                    </b>
                                                                </TableCell>
                                                                <TableCell>
                                                                    <b>
                                                                        {calculatetqtrDpd1To30(values).toLocaleString({
                                                                            maximumFractionDigits: 2,
                                                                            style: 'currency',
                                                                            currency: 'INR'
                                                                        })}
                                                                    </b>
                                                                </TableCell>
                                                                <TableCell>
                                                                    <b>
                                                                        {calculatetqtrqtrDpd31To60(values).toLocaleString({
                                                                            maximumFractionDigits: 2,
                                                                            style: 'currency',
                                                                            currency: 'INR'
                                                                        })}
                                                                    </b>
                                                                </TableCell>
                                                                <TableCell>
                                                                    <b>
                                                                        {calculatetqtrqtrqtrDpd61To90(values).toLocaleString({
                                                                            maximumFractionDigits: 2,
                                                                            style: 'currency',
                                                                            currency: 'INR'
                                                                        })}
                                                                    </b>
                                                                </TableCell>
                                                                <TableCell>
                                                                    <b>
                                                                        {calculatetqtrqtrqtrDpdAbove90(values).toLocaleString({
                                                                            maximumFractionDigits: 2,
                                                                            style: 'currency',
                                                                            currency: 'INR'
                                                                        })}
                                                                    </b>
                                                                </TableCell>
                                                                {transactionData?.lstAudQ !== 'Not Applicable' &&
                                                                    <TableCell>
                                                                        <b>
                                                                            {calculatetqtrqtrqtrtloans(values).toLocaleString({
                                                                                maximumFractionDigits: 2,
                                                                                style: 'currency',
                                                                                currency: 'INR'
                                                                            })}
                                                                        </b>
                                                                    </TableCell>
                                                                }
                                                                {transactionData?.lstAudQ !== 'Not Applicable' &&
                                                                    <TableCell>
                                                                        <b>
                                                                            {calculatetqtrqtrtpos(values).toLocaleString({
                                                                                maximumFractionDigits: 2,
                                                                                style: 'currency',
                                                                                currency: 'INR'
                                                                            })}
                                                                        </b>
                                                                    </TableCell>
                                                                }
                                                                {transactionData?.lstAudQ !== 'Not Applicable' &&
                                                                    <TableCell>
                                                                        <b>
                                                                            {calculatetqtrqttdpd0(values).toLocaleString({
                                                                                maximumFractionDigits: 2,
                                                                                style: 'currency',
                                                                                currency: 'INR'
                                                                            })}
                                                                        </b>
                                                                    </TableCell>
                                                                }
                                                                {transactionData?.lstAudQ !== 'Not Applicable' &&
                                                                    <TableCell>
                                                                        <b>
                                                                            {calculatetqtrqtdpd1To30(values).toLocaleString({
                                                                                maximumFractionDigits: 2,
                                                                                style: 'currency',
                                                                                currency: 'INR'
                                                                            })}
                                                                        </b>
                                                                    </TableCell>
                                                                }
                                                                {transactionData?.lstAudQ !== 'Not Applicable' &&
                                                                    <TableCell>
                                                                        <b>
                                                                            {calculatetqtrqtdptdpd31To60(values).toLocaleString({
                                                                                maximumFractionDigits: 2,
                                                                                style: 'currency',
                                                                                currency: 'INR'
                                                                            })}
                                                                        </b>
                                                                    </TableCell>
                                                                }
                                                                {transactionData?.lstAudQ !== 'Not Applicable' &&
                                                                    <TableCell>
                                                                        <b>
                                                                            {calculatetqtrqtdptdpdtdpd61To90(values).toLocaleString({
                                                                                maximumFractionDigits: 2,
                                                                                style: 'currency',
                                                                                currency: 'INR'
                                                                            })}
                                                                        </b>
                                                                    </TableCell>
                                                                }
                                                                {transactionData?.lstAudQ !== 'Not Applicable' &&
                                                                    <TableCell>
                                                                        <b>
                                                                            {calculatetqtrqtdptdpdtdtdpdAbove90(values).toLocaleString({
                                                                                maximumFractionDigits: 2,
                                                                                style: 'currency',
                                                                                currency: 'INR'
                                                                            })}
                                                                        </b>
                                                                    </TableCell>
                                                                }
                                                            </TableRow>
                                                        )}
                                                    </Table>
                                                </>
                                            )}
                                        </FieldArray>
                                    </fieldset>
                                    {values?.data?.[0]?.saveStatus !== "02" &&
                                        <Button
                                            className="sbmtBtn psn_btn mt-3 mb-3 ms-3"
                                            type='submit'
                                            onClick={() => handleClickSetAction('01')}
                                            variant="contained"
                                        >
                                            Save <CheckCircleOutlineIcon />
                                        </Button>
                                    }
                                    {values?.data?.[0]?.saveStatus !== "02" &&
                                        <Button
                                            className="sbmtBtn sbmtBtn_scn psn_btn mt-3 mb-3 ms-3"
                                            type='submit'
                                            onClick={() => handleClickSetAction('02')}
                                            variant="contained"
                                        >
                                            Submit <SaveAsIcon />
                                        </Button>
                                    }
                                </Form>
                            );
                        }}
                    </Formik>
                </div>
                <OnlineSnackbar
                    open={openSnackbar}
                    msg={snackMsg}
                    severity={severity}
                    handleSnackClose={handleClosePop}
                />
            </div>
        </div>
    );
};

export default connect((state: any) => {
    return {
        applId: state.userStore.applId
    };
})(StateWisePortfolio);


import { useState, useEffect, useRef } from "react";
import { FieldArray, Form, Formik } from 'formik';
import AutoSave from '../../../components/framework/AutoSave';
import { Button, Table, TableBody, TableCell, TableHead, TableRow, IconButton } from "@mui/material";
import { connect } from 'react-redux';
import CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';
import AddCircleIcon from '@mui/icons-material/AddCircle';
import DeleteIcon from '@mui/icons-material/Delete';
import { useAppSelector } from "../../../app/hooks";
import {
    useGetpFCutsTenurWiseFormDataQuery,
    useSavepFCutsTenurWiseFormDetailsMutation
} from "../../../features/application-form/Portfoliocuts";
import { AdvanceTextBoxField } from "../../../components/framework/AdvanceTextBoxField";
import { OnlineSnackbar } from "../../../components/shared/OnlineSnackbar";
import SaveAsIcon from '@mui/icons-material/SaveAs';
import ConfirmationAlertDialog from "../../../models/application-form/ConfirmationAlertDialog";
import FullScreenLoaderNoClose from "../../../components/common/FullScreenLoaderNoClose";

const TenureWisePortfolioCuts = ({ excelData }: any) => {
    const { applId, transactionData } = useAppSelector((state) => state.userStore);
    const [savepFCutsTenurWiseFormDetails] = useSavepFCutsTenurWiseFormDetailsMutation();
    const { data: getpFCutsTenurWiseFormData } = useGetpFCutsTenurWiseFormDataQuery(applId, { refetchOnMountOrArgChange: true });
    const [initialValues, setInitialValues] = useState<any>({ data: [] });
    const [openConfirmation, setOpenConfirmation] = useState<boolean>(false);
    const [formData, setFormData] = useState<any>("");
    const [actionVal, setActionVal] = useState<any>("");
    const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);
    const [snackMsg, setSnackMsg] = useState<any>("");
    const [severity, setSeverity] = useState<string | any>("success");
    const [excelUploadError, setExcelUploadError] = useState<string | null>(null);
    const [isUploading, setIsUploading] = useState<boolean>(false);
    const setFieldValueRef = useRef<any>(null);
    const [isExcelUpload, setIsExcelUpload] = useState<boolean>(false);
    useEffect(() => {
        console.log("getpFCutsTenurWiseFormData",getpFCutsTenurWiseFormData);
        if (getpFCutsTenurWiseFormData && !isExcelUpload) {
            console.log("getpFCutsTenurWiseFormData2",isExcelUpload);
            let data = [...getpFCutsTenurWiseFormData];
            const fieldIds = [
                'tminus2Loans', 'tminus2Pos', 'tminus1Loans', 'tminus1Pos',
                'qtrLoans', 'qtrPos', 'qtrDpd0', 'qtrDpd1To30', 'qtrDpd31To60',
                'qtrDpd61To90', 'qtrDpdAbove90', 'tloans', 'tpos', 'tdpd0',
                'tdpd1To30', 'tdpd31To60', 'tdpd61To90', 'tdpdAbove90'
            ];

            if (!data.some(row => row.tenureSlab === "Sub Total")) {
                const totalRow: any = { tenureSlab: "Sub Total" };
                fieldIds.forEach(field => {
                    totalRow[field] = data.reduce((sum, row) => sum + (parseFloat(row[field]) || 0), 0).toFixed(2);
                });
                data.push(totalRow);
            }

            setInitialValues({ data });
        }
    }, [getpFCutsTenurWiseFormData, applId, isExcelUpload]);

    const handleSubmitApis = async (values: any) => {
        let finalValue = values?.data?.map((listData: any, index: number) => {
            return {
                ...listData, applId, slNo: index+1
            };
        });
        if (!finalValue) {
            finalValue = values?.map((listData: any, index: number) => {
                return {
                    ...listData, applId,slNo: index+1
                };
            });
        }
        try {
            setIsUploading(true);
            if (await savepFCutsTenurWiseFormDetails(finalValue).unwrap()) {
                setOpenSnackbar(true);
                setSeverity("success");
                setIsUploading(false);
                if (finalValue?.[0]?.saveStatus === '02') {
                    setSnackMsg("Section submitted successfully");
                } else {
                    setSnackMsg("Record saved successfully");
                }
                return true;
            }
            return false;
        } catch (error: any) {
            setOpenSnackbar(true);
            setIsUploading(false);
            setSeverity("error");
            setSnackMsg("Failed to save: " + error?.message);
            return false;
        }
    };

    const handleCloseConfirmation = () => {
        setActionVal(null);
        setOpenConfirmation(false);
    };

    const handleSubmitConfirmation = (values: any) => {
        const finalValue = values?.data?.map((listData: any) => {
            return {
                ...listData, saveStatus: '02'
            };
        });
        setOpenConfirmation(false);
        handleSubmitApis(finalValue);
    };

    const handleSubmit = async (values: any) => {
        if (actionVal === '02') {
            setFormData(values);
            setOpenConfirmation(true);
        } else {
            handleSubmitApis(values);
        }
        setActionVal(null);
    };

    const handleClickSetAction = (action: any) => {
        setActionVal(action);
    };

    const calculation = (setFieldValue: any, values: any, currentIndex: number,
        currentVal: number, currentRowId: string) => {
        calculationTotal(setFieldValue, values, currentIndex, currentVal, currentRowId);

        if (currentRowId === 'qtrDpd0' || currentRowId === 'qtrDpd1To30' || currentRowId === 'qtrDpd31To60'
            || currentRowId === 'qtrDpd61To90' || currentRowId === 'qtrDpdAbove90') {
            calculationCurrentFy(setFieldValue, values, currentIndex, currentVal, currentRowId);
        } else if (currentRowId === 'tdpd0' || currentRowId === 'tdpd1To30' || currentRowId === 'tdpd31To60'
            || currentRowId === 'tdpd61To90' || currentRowId === 'tdpdAbove90') {
            calculationCurrentFyQtr(setFieldValue, values, currentIndex, currentVal, currentRowId);
        }
    };

    const calculationCurrentFy = (setFieldValue: any, values: any, currentIndex: number,
        currentVal: number, currentRowId: string) => {
        const currentRow = values.data[currentIndex];
        const qtrDpd0 = parseFloat(currentRowId === 'qtrDpd0' ? currentVal : currentRow.qtrDpd0) || 0;
        const qtrDpd1To30 = parseFloat(currentRowId === 'qtrDpd1To30' ? currentVal : currentRow.qtrDpd1To30) || 0;
        const qtrDpd31To60 = parseFloat(currentRowId === 'qtrDpd31To60' ? currentVal : currentRow.qtrDpd31To60) || 0;
        const qtrDpd61To90 = parseFloat(currentRowId === 'qtrDpd61To90' ? currentVal : currentRow.qtrDpd61To90) || 0;
        const qtrDpdAbove90 = parseFloat(currentRowId === 'qtrDpdAbove90' ? currentVal : currentRow.qtrDpdAbove90) || 0;

        const total = qtrDpd0 + qtrDpd1To30 + qtrDpd31To60 + qtrDpd61To90 + qtrDpdAbove90;
        const totalPrefix = 'data.' + currentIndex + '.qtrPos';
        setFieldValue(`${totalPrefix}`, total.toFixed(2));
        calculationTotal(setFieldValue, values, currentIndex, total, 'qtrPos');
    };

    const calculationCurrentFyQtr = (setFieldValue: any, values: any, currentIndex: number,
        currentVal: number, currentRowId: string) => {
        const currentRow = values.data[currentIndex];
        const tdpd0 = parseFloat(currentRowId === 'tdpd0' ? currentVal : currentRow.tdpd0) || 0;
        const tdpd1To30 = parseFloat(currentRowId === 'tdpd1To30' ? currentVal : currentRow.tdpd1To30) || 0;
        const tdpd31To60 = parseFloat(currentRowId === 'tdpd31To60' ? currentVal : currentRow.tdpd31To60) || 0;
        const tdpd61To90 = parseFloat(currentRowId === 'tdpd61To90' ? currentVal : currentRow.tdpd61To90) || 0;
        const tdpdAbove90 = parseFloat(currentRowId === 'tdpdAbove90' ? currentVal : currentRow.tdpdAbove90) || 0;

        const total = tdpd0 + tdpd1To30 + tdpd31To60 + tdpd61To90 + tdpdAbove90;
        const totalPrefix = 'data.' + currentIndex + '.tpos';
        setFieldValue(`${totalPrefix}`, total.toFixed(2));
        calculationTotal(setFieldValue, values, currentIndex, total, 'tpos');
    };

    const calculationTotal = (setFieldValue: any, values: any, currentIndex: number,
        currentVal: number, currentRowId: string) => {
        const currentRowVal = currentVal;
        let total = 0;
        for (let i = 0; i < values.data.length - 1; i++) {
            if (i !== currentIndex) {
                total += (parseFloat(getRowValue(values, i, currentRowId)) || 0);
            }
        }
        total += currentRowVal;
        const totalPrefix = `data.${values.data.length - 1}.${currentRowId}`;
        setFieldValue(`${totalPrefix}`, total.toFixed(2));
    };

    const getRowValue = (values: any, index: number, currentRowId: string) => {
        if (currentRowId === 'tdpd1To30') return values.data[index].tdpd1To30;
        else if (currentRowId === 'tdpd31To60') return values.data[index].tdpd31To60;
        else if (currentRowId === 'tdpd61To90') return values.data[index].tdpd61To90;
        else if (currentRowId === 'tdpdAbove90') return values.data[index].tdpdAbove90;
        else if (currentRowId === "tdpd0") return values.data[index].tdpd0;
        else if (currentRowId === "tminus2Loans") return values.data[index].tminus2Loans;
        else if (currentRowId === "tminus2Pos") return values.data[index].tminus2Pos;
        else if (currentRowId === "tminus1Loans") return values.data[index].tminus1Loans;
        else if (currentRowId === "tminus1Pos") return values.data[index].tminus1Pos;
        else if (currentRowId === "qtrLoans") return values.data[index].qtrLoans;
        else if (currentRowId === "qtrPos") return values.data[index].qtrPos;
        else if (currentRowId === "qtrDpd0") return values.data[index].qtrDpd0;
        else if (currentRowId === "qtrDpd1To30") return values.data[index].qtrDpd1To30;
        else if (currentRowId === "qtrDpd31To60") return values.data[index].qtrDpd31To60;
        else if (currentRowId === "qtrDpd61To90") return values.data[index].qtrDpd61To90;
        else if (currentRowId === "qtrDpdAbove90") return values.data[index].qtrDpdAbove90;
        else if (currentRowId === "tloans") return values.data[index].tloans;
        else if (currentRowId === "tpos") return values.data[index].tpos;
    };

    const handleClose = () => {
        setOpenSnackbar(false);
    };

    const processExcelData = (excelData: any[]) => {
        const formDataMap = new Map();
        for (let i = 3; i < excelData.length; i++) {
            const excelRow = excelData[i];
            if (excelRow && excelRow[0] && typeof excelRow[0] === 'string' && !excelRow[0].toLowerCase().includes('total')) {
                const tenureSlab = excelRow[0].trim();
                let newRow = formDataMap.get(tenureSlab) || { tenureSlab };

                newRow.tminus2Loans = parseExcelValue(excelRow[1]);
                newRow.tminus2Pos = parseExcelValue(excelRow[2]);
                newRow.tminus1Loans = parseExcelValue(excelRow[3]);
                newRow.tminus1Pos = parseExcelValue(excelRow[4]);
                newRow.qtrLoans = parseExcelValue(excelRow[5]);
                newRow.qtrDpd0 = parseExcelValue(excelRow[7]);
                newRow.qtrDpd1To30 = parseExcelValue(excelRow[8]);
                newRow.qtrDpd31To60 = parseExcelValue(excelRow[9]);
                newRow.qtrDpd61To90 = parseExcelValue(excelRow[10]);
                newRow.qtrDpdAbove90 = parseExcelValue(excelRow[11]);
                newRow.tloans = parseExcelValue(excelRow[12]);
                newRow.tdpd0 = parseExcelValue(excelRow[14]);
                newRow.tdpd1To30 = parseExcelValue(excelRow[15]);
                newRow.tdpd31To60 = parseExcelValue(excelRow[16]);
                newRow.tdpd61To90 = parseExcelValue(excelRow[17]);
                newRow.tdpdAbove90 = parseExcelValue(excelRow[18]);

                newRow.qtrPos = calculateQtrPos(newRow);
                newRow.tpos = calculateTpos(newRow);

                formDataMap.set(tenureSlab, newRow);
            }
        }

        let mappedData = Array.from(formDataMap.values());

        if (mappedData.length > 0) {
            mappedData.push({ tenureSlab: "Sub Total" });
            mappedData = calculateTotalsForExcel(mappedData);
        }
        // setFieldValueRef.current("data", mappedData);
        return mappedData;
    };

    const calculateQtrPos = (row: any) => {
        const qtrDpd0 = parseFloat(row.qtrDpd0) || 0;
        const qtrDpd1To30 = parseFloat(row.qtrDpd1To30) || 0;
        const qtrDpd31To60 = parseFloat(row.qtrDpd31To60) || 0;
        const qtrDpd61To90 = parseFloat(row.qtrDpd61To90) || 0;
        const qtrDpdAbove90 = parseFloat(row.qtrDpdAbove90) || 0;
        return (qtrDpd0 + qtrDpd1To30 + qtrDpd31To60 + qtrDpd61To90 + qtrDpdAbove90).toFixed(2);
    };

    const calculateTpos = (row: any) => {
        const tdpd0 = parseFloat(row.tdpd0) || 0;
        const tdpd1To30 = parseFloat(row.tdpd1To30) || 0;
        const tdpd31To60 = parseFloat(row.tdpd31To60) || 0;
        const tdpd61To90 = parseFloat(row.tdpd61To90) || 0;
        const tdpdAbove90 = parseFloat(row.tdpdAbove90) || 0;
        return (tdpd0 + tdpd1To30 + tdpd31To60 + tdpd61To90 + tdpdAbove90).toFixed(2);
    };

    const calculateTotalsForExcel = (data: any[]) => {
        const totalRowIndex = data.findIndex(row => row.tenureSlab === "Sub Total");
        if (totalRowIndex !== -1) {
            const fieldsToSum = [
                'tminus2Loans', 'tminus2Pos', 'tminus1Loans', 'tminus1Pos',
                'qtrLoans', 'qtrPos', 'qtrDpd0', 'qtrDpd1To30', 'qtrDpd31To60',
                'qtrDpd61To90', 'qtrDpdAbove90', 'tloans', 'tpos', 'tdpd0',
                'tdpd1To30', 'tdpd31To60', 'tdpd61To90', 'tdpdAbove90'
            ];
            const totalRow = { ...data[totalRowIndex] };
            fieldsToSum.forEach(field => {
                totalRow[field] = data
                    .filter(row => row.tenureSlab !== "Sub Total")
                    .reduce((sum, row) => sum + (parseFloat(row[field]) || 0), 0)
                    .toFixed(2);
            });
            data[totalRowIndex] = totalRow;
        }
        return data;
    };

    const parseExcelValue = (value: any): number => {
        if (value === undefined || value === null || value === '') return 0;
        if (typeof value === 'string') return parseFloat(value.replace(/,/g, '')) || 0;
        return parseFloat(value.toFixed(2)) || 0;
    };

    useEffect(() => {
        if (excelData && excelData.length > 0) {
            const processedData = processExcelData(excelData);
            console.log("setIsExcelUpload",isExcelUpload)
            setIsExcelUpload(()=>true);
            setOpenSnackbar(true);
            setSeverity("success");
            setSnackMsg("Tenure-wise data imported successfully");
        }
    }, [excelData, transactionData]);

    if (isUploading) return <FullScreenLoaderNoClose />;

    return (
        <div className="wrap-appraisal-area">
            <ConfirmationAlertDialog
                id={applId as unknown as number}
                type={4}
                open={openConfirmation}
                handleClose={handleCloseConfirmation}
                handleDelete={handleSubmitConfirmation}
                values={formData}
            />
            <div className="custome-form">
                <div className="wrap-inner-table" style={{ overflow: 'auto' }}>
                    <Formik
                        initialValues={initialValues}
                        onSubmit={handleSubmit}
                        enableReinitialize
                    >
                        {({ values, setFieldValue }) => {
                            setFieldValueRef.current = setFieldValue;
                            const fieldIds = [
                                'tminus2Loans', 'tminus2Pos', 'tminus1Loans', 'tminus1Pos',
                                'qtrLoans', 'qtrPos', 'qtrDpd0', 'qtrDpd1To30', 'qtrDpd31To60',
                                'qtrDpd61To90', 'qtrDpdAbove90', 'tloans', 'tpos', 'tdpd0',
                                'tdpd1To30', 'tdpd31To60', 'tdpd61To90', 'tdpdAbove90'
                            ];
                            const newRow = {
                                tenureSlab: '',
                                tminus2Loans: '',
                                tminus2Pos: '',
                                tminus1Loans: '',
                                tminus1Pos: '',
                                qtrLoans: '',
                                qtrPos: '',
                                qtrDpd0: '',
                                qtrDpd1To30: '',
                                qtrDpd31To60: '',
                                qtrDpd61To90: '',
                                qtrDpdAbove90: '',
                                tloans: '',
                                tpos: '',
                                tdpd0: '',
                                tdpd1To30: '',
                                tdpd31To60: '',
                                tdpd61To90: '',
                                tdpdAbove90: '',
                            };
                            return (
                                <Form>
                                    <fieldset disabled={values?.data?.[0]?.saveStatus === "02"}>
                                        {values?.data?.[0]?.saveStatus !== "02" && (
                                            <AutoSave handleSubmit={handleSubmit} values={values} debounceMs={30000} autoStyle={true} />
                                        )}
                                        <FieldArray name="data">
                                            {({ remove, insert }) => {
                                                const handleAddRow = () => {
                                                    insert(values.data.length - 1, newRow);
                                                };
                                                return (
                                                    <>
                                                        {values?.data?.[0]?.saveStatus !== "02" && (
                                                            <Button
                                                                size="small"
                                                                className='psn_btn text-capitalize my-2 saveBtn'
                                                                color="primary"
                                                                style={{ marginLeft: '15px', display: 'block' }}
                                                                onClick={handleAddRow}
                                                            >
                                                                Add <AddCircleIcon />
                                                            </Button>
                                                        )}
                                                        <Table sx={{ minWidth: 650 }} aria-label="simple table">
                                                            <TableHead>
                                                                <TableRow>
                                                                    <TableCell style={{ width: '7%' }} align='center'><b>Action</b></TableCell>
                                                                    <TableCell align='center'><b>Tenure</b></TableCell>
                                                                    <TableCell colSpan={2} align='center'><b>FY {transactionData?.lstAudYrTm2}</b></TableCell>
                                                                    <TableCell colSpan={2} align='center'><b>FY {transactionData?.lstAudYrTm1}</b></TableCell>
                                                                    <TableCell colSpan={7} align='center'><b>FY {transactionData?.lstAudYrT}</b></TableCell>
                                                                    {transactionData?.lstAudQ !== 'Not Applicable' && (
                                                                        <TableCell colSpan={7} align='center'><b>{transactionData?.lstAudQ}</b></TableCell>
                                                                    )}
                                                                </TableRow>
                                                            </TableHead>
                                                            <TableHead>
                                                                <TableRow>
                                                                    <TableCell style={{ minWidth: '100px' }}><b></b></TableCell>
                                                                    <TableCell style={{ minWidth: '100px' }}><b></b></TableCell>
                                                                    <TableCell style={{ minWidth: '100px' }}><b>No. of Loans</b></TableCell>
                                                                    <TableCell style={{ minWidth: '100px' }}><b>POS</b></TableCell>
                                                                    <TableCell style={{ minWidth: '100px' }}><b>No. of Loans</b></TableCell>
                                                                    <TableCell style={{ minWidth: '100px' }}><b>POS</b></TableCell>
                                                                    <TableCell style={{ minWidth: '100px' }}><b>No. of Loans</b></TableCell>
                                                                    <TableCell style={{ minWidth: '100px' }}><b>POS</b></TableCell>
                                                                    <TableCell style={{ minWidth: '100px' }}><b>{"<"}0</b></TableCell>
                                                                    <TableCell style={{ minWidth: '100px' }}><b>1-30</b></TableCell>
                                                                    <TableCell style={{ minWidth: '100px' }}><b>31-60</b></TableCell>
                                                                    <TableCell style={{ minWidth: '100px' }}><b>61-90</b></TableCell>
                                                                    <TableCell style={{ minWidth: '100px' }}><b>{">"}90</b></TableCell>
                                                                    {transactionData?.lstAudQ !== 'Not Applicable' && (
                                                                        <>
                                                                            <TableCell style={{ minWidth: '100px' }}><b>No. of Loans</b></TableCell>
                                                                            <TableCell style={{ minWidth: '100px' }}><b>POS</b></TableCell>
                                                                            <TableCell style={{ minWidth: '100px' }}><b>{"<"}0</b></TableCell>
                                                                            <TableCell style={{ minWidth: '100px' }}><b>1-30</b></TableCell>
                                                                            <TableCell style={{ minWidth: '100px' }}><b>31-60</b></TableCell>
                                                                            <TableCell style={{ minWidth: '100px' }}><b>61-90</b></TableCell>
                                                                            <TableCell style={{ minWidth: '100px' }}><b>{">"}90</b></TableCell>
                                                                        </>
                                                                    )}
                                                                </TableRow>
                                                            </TableHead>
                                                            <TableBody>
                                                                {values?.data?.map((item: any, index: any) => (
                                                                    <TableRow
                                                                        key={index}
                                                                        sx={item?.tenureSlab === "Sub Total" ? {
                                                                            backgroundColor: "gray.100",
                                                                            fontWeight: "bold"
                                                                        } : {}}
                                                                    >
                                                                        <TableCell align='center'>
                                                                            {item?.tenureSlab === "Sub Total" ? (
                                                                                <b>Sub Total</b>
                                                                            ) : item?.saveStatus !== '02' ? (
                                                                                <IconButton
                                                                                    onClick={() => remove(index)}
                                                                                    color="error"
                                                                                >
                                                                                    <DeleteIcon />
                                                                                </IconButton>
                                                                            ) : <></>}
                                                                        </TableCell>
                                                                        <TableCell>
                                                                            {item?.tenureSlab !== "Sub Total" && (
                                                                                <AdvanceTextBoxField
                                                                                    name={`data.${index}.tenureSlab`}
                                                                                />
                                                                            )}
                                                                        </TableCell>
                                                                        <TableCell>
                                                                            <AdvanceTextBoxField
                                                                                name={`data.${index}.tminus2Loans`}
                                                                                onCustomChange={(currentVal: any) =>
                                                                                    calculation(setFieldValue, values, index,
                                                                                        parseFloat(currentVal) || 0, 'tminus2Loans')}
                                                                                type={'number'}
                                                                                disabled={item?.tenureSlab === "Sub Total"}
                                                                                allowNegative={false}
                                                                                allowDecimal={false}
                                                                            />
                                                                        </TableCell>
                                                                        <TableCell>
                                                                            <AdvanceTextBoxField
                                                                                name={`data.${index}.tminus2Pos`}
                                                                                onCustomChange={(currentVal: any) =>
                                                                                    calculation(setFieldValue, values, index,
                                                                                        parseFloat(currentVal) || 0, 'tminus2Pos')}
                                                                                type={'number'}
                                                                                disabled={item?.tenureSlab === "Sub Total"}
                                                                            />
                                                                        </TableCell>
                                                                        <TableCell>
                                                                            <AdvanceTextBoxField
                                                                                name={`data.${index}.tminus1Loans`}
                                                                                onCustomChange={(currentVal: any) =>
                                                                                    calculation(setFieldValue, values, index,
                                                                                        parseFloat(currentVal) || 0, 'tminus1Loans')}
                                                                                type={'number'}
                                                                                disabled={item?.tenureSlab === "Sub Total"}
                                                                                allowNegative={false}
                                                                                allowDecimal={false}
                                                                            />
                                                                        </TableCell>
                                                                        <TableCell>
                                                                            <AdvanceTextBoxField
                                                                                name={`data.${index}.tminus1Pos`}
                                                                                onCustomChange={(currentVal: any) =>
                                                                                    calculation(setFieldValue, values, index,
                                                                                        parseFloat(currentVal) || 0, 'tminus1Pos')}
                                                                                type={'number'}
                                                                                disabled={item?.tenureSlab === "Sub Total"}
                                                                            />
                                                                        </TableCell>
                                                                        <TableCell>
                                                                            <AdvanceTextBoxField
                                                                                name={`data.${index}.qtrLoans`}
                                                                                onCustomChange={(currentVal: any) =>
                                                                                    calculation(setFieldValue, values, index,
                                                                                        parseFloat(currentVal) || 0, 'qtrLoans')}
                                                                                type={'number'}
                                                                                disabled={item?.tenureSlab === "Sub Total"}
                                                                                allowNegative={false}
                                                                                allowDecimal={false}
                                                                            />
                                                                        </TableCell>
                                                                        <TableCell>
                                                                            <AdvanceTextBoxField
                                                                                name={`data.${index}.qtrPos`}
                                                                                onCustomChange={(currentVal: any) =>
                                                                                    calculation(setFieldValue, values, index,
                                                                                        parseFloat(currentVal) || 0, 'qtrPos')}
                                                                                type={'number'}
                                                                                disabled={true}
                                                                            />
                                                                        </TableCell>
                                                                        <TableCell>
                                                                            <AdvanceTextBoxField
                                                                                name={`data.${index}.qtrDpd0`}
                                                                                onCustomChange={(currentVal: any) =>
                                                                                    calculation(setFieldValue, values, index,
                                                                                        parseFloat(currentVal) || 0, 'qtrDpd0')}
                                                                                type={'number'}
                                                                                disabled={item?.tenureSlab === "Sub Total"}
                                                                            />
                                                                        </TableCell>
                                                                        <TableCell>
                                                                            <AdvanceTextBoxField
                                                                                name={`data.${index}.qtrDpd1To30`}
                                                                                onCustomChange={(currentVal: any) =>
                                                                                    calculation(setFieldValue, values, index,
                                                                                        parseFloat(currentVal) || 0, 'qtrDpd1To30')}
                                                                                type={'number'}
                                                                                disabled={item?.tenureSlab === "Sub Total"}
                                                                            />
                                                                        </TableCell>
                                                                        <TableCell>
                                                                            <AdvanceTextBoxField
                                                                                name={`data.${index}.qtrDpd31To60`}
                                                                                onCustomChange={(currentVal: any) =>
                                                                                    calculation(setFieldValue, values, index,
                                                                                        parseFloat(currentVal) || 0, 'qtrDpd31To60')}
                                                                                type={'number'}
                                                                                disabled={item?.tenureSlab === "Sub Total"}
                                                                            />
                                                                        </TableCell>
                                                                        <TableCell>
                                                                            <AdvanceTextBoxField
                                                                                name={`data.${index}.qtrDpd61To90`}
                                                                                onCustomChange={(currentVal: any) =>
                                                                                    calculation(setFieldValue, values, index,
                                                                                        parseFloat(currentVal) || 0, 'qtrDpd61To90')}
                                                                                type={'number'}
                                                                                disabled={item?.tenureSlab === "Sub Total"}
                                                                            />
                                                                        </TableCell>
                                                                        <TableCell>
                                                                            <AdvanceTextBoxField
                                                                                name={`data.${index}.qtrDpdAbove90`}
                                                                                onCustomChange={(currentVal: any) =>
                                                                                    calculation(setFieldValue, values, index,
                                                                                        parseFloat(currentVal) || 0, 'qtrDpdAbove90')}
                                                                                type={'number'}
                                                                                disabled={item?.tenureSlab === "Sub Total"}
                                                                            />
                                                                        </TableCell>
                                                                        {transactionData?.lstAudQ !== 'Not Applicable' && (
                                                                            <>
                                                                                <TableCell>
                                                                                    <AdvanceTextBoxField
                                                                                        name={`data.${index}.tloans`}
                                                                                        onCustomChange={(currentVal: any) =>
                                                                                            calculation(setFieldValue, values, index,
                                                                                                parseFloat(currentVal) || 0, 'tloans')}
                                                                                        type={'number'}
                                                                                        disabled={item?.tenureSlab === "Sub Total"}
                                                                                        allowNegative={false}
                                                                                        allowDecimal={false}
                                                                                    />
                                                                                </TableCell>
                                                                                <TableCell>
                                                                                    <AdvanceTextBoxField
                                                                                        name={`data.${index}.tpos`}
                                                                                        onCustomChange={(currentVal: any) =>
                                                                                            calculation(setFieldValue, values, index,
                                                                                                parseFloat(currentVal) || 0, 'tpos')}
                                                                                        type={'number'}
                                                                                        disabled={true}
                                                                                    />
                                                                                </TableCell>
                                                                                <TableCell>
                                                                                    <AdvanceTextBoxField
                                                                                        name={`data.${index}.tdpd0`}
                                                                                        onCustomChange={(currentVal: any) =>
                                                                                            calculation(setFieldValue, values, index,
                                                                                                parseFloat(currentVal) || 0, 'tdpd0')}
                                                                                        type={'number'}
                                                                                        disabled={item?.tenureSlab === "Sub Total"}
                                                                                    />
                                                                                </TableCell>
                                                                                <TableCell>
                                                                                    <AdvanceTextBoxField
                                                                                        name={`data.${index}.tdpd1To30`}
                                                                                        onCustomChange={(currentVal: any) =>
                                                                                            calculation(setFieldValue, values, index,
                                                                                                parseFloat(currentVal) || 0, 'tdpd1To30')}
                                                                                        type={'number'}
                                                                                        disabled={item?.tenureSlab === "Sub Total"}
                                                                                    />
                                                                                </TableCell>
                                                                                <TableCell>
                                                                                    <AdvanceTextBoxField
                                                                                        name={`data.${index}.tdpd31To60`}
                                                                                        onCustomChange={(currentVal: any) =>
                                                                                            calculation(setFieldValue, values, index,
                                                                                                parseFloat(currentVal) || 0, 'tdpd31To60')}
                                                                                        type={'number'}
                                                                                        disabled={item?.tenureSlab === "Sub Total"}
                                                                                    />
                                                                                </TableCell>
                                                                                <TableCell>
                                                                                    <AdvanceTextBoxField
                                                                                        name={`data.${index}.tdpd61To90`}
                                                                                        onCustomChange={(currentVal: any) =>
                                                                                            calculation(setFieldValue, values, index,
                                                                                                parseFloat(currentVal) || 0, 'tdpd61To90')}
                                                                                        type={'number'}
                                                                                        disabled={item?.tenureSlab === "Sub Total"}
                                                                                    />
                                                                                </TableCell>
                                                                                <TableCell>
                                                                                    <AdvanceTextBoxField
                                                                                        name={`data.${index}.tdpdAbove90`}
                                                                                        onCustomChange={(currentVal: any) =>
                                                                                            calculation(setFieldValue, values, index,
                                                                                                parseFloat(currentVal) || 0, 'tdpdAbove90')}
                                                                                        type={'number'}
                                                                                        disabled={item?.tenureSlab === "Sub Total"}
                                                                                    />
                                                                                </TableCell>
                                                                            </>
                                                                        )}
                                                                    </TableRow>
                                                                ))}
                                                            </TableBody>
                                                        </Table>
                                                    </>
                                                );
                                            }}
                                        </FieldArray>
                                        {values?.data?.[0]?.saveStatus !== "02" && (
                                            <>
                                                <Button
                                                    className="sbmtBtn psn_btn mt-3 mb-3 ms-3"
                                                    type='submit'
                                                    onClick={() => handleClickSetAction('01')}
                                                    variant="contained"
                                                >
                                                    Save <CheckCircleOutlineIcon />
                                                </Button>
                                                <Button
                                                    className="sbmtBtn sbmtBtn_scn psn_btn mt-3 mb-3 ms-3"
                                                    type='submit'
                                                    onClick={() => handleClickSetAction('02')}
                                                    variant="contained"
                                                >
                                                    Submit <SaveAsIcon />
                                                </Button>
                                            </>
                                        )}
                                    </fieldset>
                                </Form>
                            );
                        }}
                    </Formik>
                </div>
                <OnlineSnackbar
                    open={openSnackbar}
                    msg={snackMsg}
                    severity={severity}
                    handleSnackClose={handleClose}
                />
            </div>
        </div>
    );
};

export default connect((state: any) => {
    return {
        applId: state.userStore.applId
    };
})(TenureWisePortfolioCuts);


as like statwise do same like in that component we are not saving subtotal make like that and upload excel also in same way so we don't need useEffect(() => {
        console.log("getpFCutsTenurWiseFormData",getpFCutsTenurWiseFormData);
        if (getpFCutsTenurWiseFormData && !isExcelUpload) {
            console.log("getpFCutsTenurWiseFormData2",isExcelUpload);
            let data = [...getpFCutsTenurWiseFormData];
            const fieldIds = [
                'tminus2Loans', 'tminus2Pos', 'tminus1Loans', 'tminus1Pos',
                'qtrLoans', 'qtrPos', 'qtrDpd0', 'qtrDpd1To30', 'qtrDpd31To60',
                'qtrDpd61To90', 'qtrDpdAbove90', 'tloans', 'tpos', 'tdpd0',
                'tdpd1To30', 'tdpd31To60', 'tdpd61To90', 'tdpdAbove90'
            ];

            if (!data.some(row => row.tenureSlab === "Sub Total")) {
                const totalRow: any = { tenureSlab: "Sub Total" };
                fieldIds.forEach(field => {
                    totalRow[field] = data.reduce((sum, row) => sum + (parseFloat(row[field]) || 0), 0).toFixed(2);
                });
                data.push(totalRow);
            }

            setInitialValues({ data });
        }
    }, [getpFCutsTenurWiseFormData, applId, isExcelUpload]);  these useeffect also 

give me complete and proper code 
