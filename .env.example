import { useState, useEffect, useRef } from 'react';
import { Table, TableCell, TableHead, TableRow, TableBody, Button, CircularProgress, Grid } from '@mui/material'
import {
    useGetCollectionEfficiencyQuery,
    useSaveCollectionEffciencyMutation
} from "../../../features/application-form/collectionEff";
import CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';
import SaveAsIcon from '@mui/icons-material/SaveAs';

import { connect } from 'react-redux'
import { FieldArray, Form, Formik } from 'formik';
import AutoSave from '../../../components/framework/AutoSave';
import { AdvanceTextBoxField } from '../../../components/framework/AdvanceTextBoxField';
import { OnlineSnackbar } from "../../../components/shared/OnlineSnackbar";
import ConfirmationAlertDialog from '../../../models/application-form/ConfirmationAlertDialog';
import Notification from '../../../components/shared/Notification';
import { useAppSelector } from '../../../app/hooks';
import DrawerResponseComponent from '../../../components/DrawerComponent/DrawerResponseComponent';
import NotificationSectionWiseButton from '../../../components/DrawerComponent/NotificationSectionWiseButton';
import { useUpdateCommentByNIdMutation } from '../../../features/application-form/applicationForm';
import React from 'react';

const CollectionEfficiencyMonths = ({ excelData, openSectionsData }: any) => {
    const { applId } = useAppSelector((state) => state.userStore);
    const [addCollectionEfficiencyMonths] = useSaveCollectionEffciencyMutation();
    const { data: collectionEfficiencyMonths, isLoading, isError, refetch } = useGetCollectionEfficiencyQuery(applId, { skip: !applId, refetchOnMountOrArgChange: true });

    const [initialValues, setInitialValues] = useState<any>({ data: [] })
    const [openConfirmation, setOpenConfirmation] = useState(false);
    const [formData, setFormData] = useState<any>("");
    const [actionVal, setActionVal] = useState<any>("");
    const formikRef = useRef<any>(null);
    const [isUploading, setIsUploading] = useState<boolean>(false);


    const handleSubmitApis = async (values: any) => {
        try {
            let requestBody = values.data;
            if (!requestBody) {
                requestBody = values;
            }
            if (await addCollectionEfficiencyMonths(requestBody).unwrap()) {
                if (requestBody?.[0]?.saveStatus === '02' || requestBody?.[0]?.saveStatus === '01') {
                    setOpenSnackbar(true);
                    setSeverity("success");
                    if (requestBody?.[0]?.saveStatus === '02') {
                        setSnackMsg("Section submitted successfully");
                    } else if (requestBody?.[0]?.saveStatus === '01') {
                        setSnackMsg("Record saved successfully");
                    }
                }
                setActionVal(null);
                return true;
            }
            return false;
        } catch (error: any) {
            setOpenSnackbar(true);
            setSeverity("error");
            setSnackMsg("failed to save : " + error?.message);
            return false;
        }
    };

    const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);
    const [snackMsg, setSnackMsg] = useState<any>("");
    const [severity, setSeverity] = useState<string>("success");

    const handleClose = () => {
        setOpenSnackbar(false);
    };

    const handleCloseConfirmation = () => {
        setActionVal(null);
        setOpenConfirmation(false);
    };

    const handleSubmitConfirmation = (values: any) => {
        setOpenConfirmation(false);
        handleSubmitApis(values);
    };

    const handleSubmit = async (values: any) => {
        const finalValue = values?.data?.slice(0, 36)?.map((listData: any, index: number) => {
            return {
                ...listData, slNo: index + 1, saveStatus: actionVal
            }
        });
        if (actionVal === '02') {
            setFormData(finalValue);
            setOpenConfirmation(true);
        } else {
            handleSubmitApis(finalValue);
        }
        setActionVal(null);
    };

    const handleClickSetAction = (action: any) => {
        setActionVal(action);
    };

    const calculation = (setFieldValue: any, values: any, currentIndex: number,
        currentVal: number, currentRowId: string) => {
        if (currentRowId === 'openingOvrd' || currentRowId === 'currMonDue') {
            calculationTotalDemand(setFieldValue, values, currentIndex, currentVal, currentRowId);
        } else if (currentRowId === 'ovrdColl' || currentRowId === 'currMonColl') {
            calculationTotalCollection(setFieldValue, values, currentIndex, currentVal, currentRowId);
        }

        calculationClosingOverdue(setFieldValue, values, currentIndex, currentVal, currentRowId);
        calculationCollection(setFieldValue, values, currentIndex, currentVal, currentRowId);
    }

    const calculationTotalDemand = (setFieldValue: any, values: any, currentIndex: number,
        currentVal: number, currentRowId: string) => {
        const currentRow = values.data[currentIndex];
        const openingOvrd = currentRowId === 'openingOvrd' ? currentVal : currentRow.openingOvrd;
        const currMonDue = currentRowId === 'currMonDue' ? currentVal : currentRow.currMonDue;
        const total = (+openingOvrd + +currMonDue);
        const totalPrefix = 'data.' + currentIndex + '.totDemand';
        setFieldValue(`${totalPrefix}`, total.toFixed(2) || 0);

        const totalColl = currentRow.totColl;
        calculationOverAllCollection(setFieldValue, currentIndex, totalColl, total);
        calculationTotCollCurrDemEff(setFieldValue, currentIndex, totalColl, currMonDue);
    }

    const calculationTotalCollection = (setFieldValue: any, values: any, currentIndex: number,
        currentVal: number, currentRowId: string) => {
        const currentRow = values.data[currentIndex];
        const ovrdColl = currentRowId === 'ovrdColl' ? currentVal : currentRow.ovrdColl;
        const currMonColl = currentRowId === 'currMonColl' ? currentVal : currentRow.currMonColl;
        const total = (+ovrdColl + +currMonColl);
        const totalPrefix = 'data.' + currentIndex + '.totColl';
        setFieldValue(`${totalPrefix}`, total.toFixed(2) || 0);

        const totDemand = currentRow.totDemand;
        calculationOverAllCollection(setFieldValue, currentIndex, total, totDemand);
        calculationTotCollCurrDemEff(setFieldValue, currentIndex, total, currentRow.currMonDue);
    }

    const calculationClosingOverdue = (setFieldValue: any, values: any, currentIndex: number,
        currentVal: number, currentRowId: string) => {
        const currentRow = values.data[currentIndex];
        const openingOvrd = currentRowId === 'openingOvrd' ? currentVal : currentRow.openingOvrd;
        const currMonDue = currentRowId === 'currMonDue' ? currentVal : currentRow.currMonDue;
        const ovrdColl = currentRowId === 'ovrdColl' ? currentVal : currentRow.ovrdColl;
        const currMonColl = currentRowId === 'currMonColl' ? currentVal : currentRow.currMonColl;
        const b3MinusE3 = (+openingOvrd - +ovrdColl);
        const c3MinusF3 = (+currMonDue - +currMonColl);
        let total = (+b3MinusE3 + +c3MinusF3);

        const totalPrefix = 'data.' + currentIndex + '.closingOvrd';
        setFieldValue(`${totalPrefix}`, total.toFixed(2) || 0);

        const nextIndex = +currentIndex + +1;
        const nextOverduePrefix = 'data.' + nextIndex + '.openingOvrd';
        setFieldValue(`${nextOverduePrefix}`, total.toFixed(2) || 0);
    }

    const calculationCollection = (setFieldValue: any, values: any, currentIndex: number,
        currentVal: number, currentRowId: string) => {
        const currentRow = values.data[currentIndex];
        const currMonColl = currentRowId === 'currMonColl' ? currentVal : currentRow.currMonColl;
        const currMonDue = currentRowId === 'currMonDue' ? currentVal : currentRow.currMonDue;

        const total = (+currMonColl / +(Number(currMonDue) === 0 ? 1 : currMonDue));

        const totalPrefix = 'data.' + currentIndex + '.collEffCurrMon';
        const totalMul100 = +total * 100;
        setFieldValue(`${totalPrefix}`, totalMul100.toFixed(2) || 0);
    }

    const calculationOverAllCollection = (setFieldValue: any, currentIndex: number, totColl: number, totDemand: number) => {
        const total = (+totColl / +(Number(totDemand) === 0 ? 1 : totDemand));
        const totalPrefix = 'data.' + currentIndex + '.overallCollEff';
        const totalMul100 = +total * 100;
        setFieldValue(`${totalPrefix}`, totalMul100.toFixed(2) || 0);
    }

    const calculationTotCollCurrDemEff = (setFieldValue: any, currentIndex: number, totColl: number, currMonDue: number) => {
        const total = (+totColl / +(Number(currMonDue) === 0 ? 1 : currMonDue));
        const totalPrefix = 'data.' + currentIndex + '.totCollCurrDemEff';
        const totalMul100 = +total * 100;
        setFieldValue(`${totalPrefix}`, totalMul100.toFixed(2) || 0);
    }

    const parseExcelValue = (value: any): any => {
        if (value === undefined || value === null || value === '' || value === '#DIV/0!') return 0;
        return parseFloat(value) ? parseFloat(value).toFixed(2) : 0;
    };


    useEffect(() => {
        if (collectionEfficiencyMonths) {
            const dataWithApplId = collectionEfficiencyMonths.map((item: any) => ({
                ...item,
                applId
            }))
            setInitialValues({ data: dataWithApplId })
        }
    }, [collectionEfficiencyMonths, applId])


    useEffect(() => {
        if (
            excelData &&
            excelData.length > 0 &&
            collectionEfficiencyMonths &&
            formikRef.current
        ) {
            try {
                console.log('excelData', excelData)
                const dataRows = excelData.slice(1);

                const dataWithApplId = collectionEfficiencyMonths.map((item: any) => ({
                    ...item,
                    applId,
                }));

                const processedData = dataWithApplId.map((item: any, index: number) => {
                    // setIsUploading(true);
                    const row = dataRows[index] || [];

                    return {
                        ...item,
                        openingOvrd: parseExcelValue(row[1]),
                        currMonDue: parseExcelValue(row[2]),
                        totDemand: parseExcelValue(row[3]),
                        ovrdColl: parseExcelValue(row[4]),
                        currMonColl: parseExcelValue(row[5]),
                        prepayAmt: parseExcelValue(row[6]),
                        totColl: parseExcelValue(row[7]),
                        closingOvrd: parseExcelValue(row[8]),
                        collEffCurrMon: parseExcelValue(row[9]),
                        overallCollEff: parseExcelValue(row[10]),
                    };
                });

                processedData.forEach((item: any, index: number) => {
                    const totDemand = +item.openingOvrd + +item.currMonDue;
                    item.totDemand = totDemand.toFixed(2);

                    const totColl = +item.ovrdColl + +item.currMonColl;
                    item.totColl = totColl.toFixed(2);

                    const closingOvrd =
                        +item.openingOvrd - +item.ovrdColl + (+item.currMonDue - +item.currMonColl);
                    item.closingOvrd = closingOvrd.toFixed(2);

                    if (index < processedData.length - 1) {
                        processedData[index + 1].openingOvrd = closingOvrd.toFixed(2);
                    }

                    const collEffCurrMon =
                        +item.currMonDue !== 0
                            ? ((+item.currMonColl / +item.currMonDue) * 100).toFixed(2)
                            : "0.00";
                    item.collEffCurrMon = collEffCurrMon;

                    const overallCollEff =
                        totDemand !== 0 ? ((totColl / totDemand) * 100).toFixed(2) : "0.00";
                    item.overallCollEff = overallCollEff;

                    const totCollCurrDemEff =
                        +item.currMonDue !== 0
                            ? ((totColl / +item.currMonDue) * 100).toFixed(2)
                            : "0.00";
                    item.totCollCurrDemEff = totCollCurrDemEff;
                });

                console.log('processedData', processedData)
                formikRef.current.setValues({ data: processedData });
                setInitialValues({ data: processedData })
                setOpenSnackbar(true);
                setIsUploading(false);
                setSeverity("success");
                setSnackMsg("Collection Efficiency data updated successfully");
            } catch (error: any) {
                console.error("Error processing Excel data:", error);
                setOpenSnackbar(true);
                setIsUploading(false);
                setSeverity("error");
                setSnackMsg("Failed to process Excel data: " + error.message);
            }
        }
    }, [excelData, collectionEfficiencyMonths, applId]);

    const [updateCommentByNId] = useUpdateCommentByNIdMutation();
    const { opensections } = useAppSelector((state) => state.userStore);
    const [getOpenSectionsData, setOpenSections] = useState<any[]>([]);
    const [open, setOpen] = React.useState<any>(false);
    const [getNotiId, setNotiId] = React.useState<any>('');

    const toggleDrawer = (newOpen: boolean) => () => {
        setOpen(true);
    };
    const handleButtonClick = (notfId: any) => {
        setOpen(true);
        setNotiId(notfId);
    };
    useEffect(() => {
        if (opensections && opensections.length > 0) {
            setOpenSections(opensections);
        }
    }, [opensections]);

    if (isUploading) return <div className="CrclProg"><CircularProgress /></div>;

    return (
        <>
            <Grid item xs={12} className="opensections-sticky-css">
                <Grid
                    className="pb-0"
                    item
                    xs={12}
                    display="flex"
                    justifyContent="end">
                    {getOpenSectionsData && getOpenSectionsData.length > 0 && (() => {
                        const matchedItem = getOpenSectionsData.find(
                            (item: any) => item?.sectionId === "16" && item?.subSectionId === "01"
                        );
                        return matchedItem ? (
                            <div className="openSection-item">
                                <NotificationSectionWiseButton
                                    label="Respond"
                                    handleClick={() => handleButtonClick(matchedItem?.notfId)}
                                    className="btn-primary-css--"
                                    notfId={matchedItem?.notfId}
                                    getOpenSectionsData={getOpenSectionsData}

                                />
                            </div>
                        ) : null;
                    })()}
                    <DrawerResponseComponent
                        open={open}
                        toggleDrawer={toggleDrawer}
                        notfId={getNotiId}
                        detailsData={''}
                        postDataTrigger={updateCommentByNId}
                        setOpen={setOpen}
                    />
                </Grid>
            </Grid>
            {collectionEfficiencyMonths === undefined || null ?
                <Notification /> :
                <div className="wrap-appraisal-area">
                    <ConfirmationAlertDialog
                        id={applId as unknown as number}
                        type={4}
                        open={openConfirmation}
                        handleClose={handleCloseConfirmation}
                        handleDelete={handleSubmitConfirmation}
                        values={formData}
                    />
                    <div className="custome-form">
                        <div className="wrap-inner-table" style={{ overflow: 'auto' }}>
                            <Formik
                                initialValues={initialValues}
                                onSubmit={handleSubmit}
                                enableReinitialize
                                innerRef={formikRef}
                            >
                                {({ values, setFieldValue }) => {
                                    return (
                                        <Form>
                                            <fieldset disabled={values?.data?.[0]?.saveStatus === "02"}>
                                                {values?.data?.[0]?.saveStatus !== "02" &&
                                                    <AutoSave handleSubmit={handleSubmit} values={values} debounceMs={10000} autoStyle={true} />
                                                }
                                                <FieldArray name="data">
                                                    {() => (
                                                        <Table sx={{ minWidth: 650 }} aria-label="simple table">
                                                            <TableHead>
                                                                <TableRow>
                                                                    <TableCell style={{ minWidth: '80px' }}><b>Month</b></TableCell>
                                                                    <TableCell style={{ minWidth: '100px' }}><b>Opening Overdue</b></TableCell>
                                                                    <TableCell style={{ minWidth: '100px' }}><b>Current Month Due</b></TableCell>
                                                                    <TableCell style={{ minWidth: '100px' }}><b>Total Demand</b></TableCell>
                                                                    <TableCell style={{ minWidth: '100px' }}><b>Overdue Collection</b></TableCell>
                                                                    <TableCell style={{ minWidth: '100px' }}><b>Current Month Collection</b></TableCell>
                                                                    <TableCell style={{ minWidth: '100px' }}><b>Prepayments</b></TableCell>
                                                                    <TableCell style={{ minWidth: '100px' }}><b>Total Collection</b></TableCell>
                                                                    <TableCell style={{ minWidth: '100px' }}><b>Closing Overdue</b></TableCell>
                                                                    <TableCell style={{ minWidth: '100px' }}><b>Current Collection Efficiency (Current Collection/ Current Demand) %</b></TableCell>
                                                                    <TableCell style={{ minWidth: '100px' }}><b>Overall Collection Efficiency (Total Collection/ Total Demand) %</b></TableCell>
                                                                    <TableCell style={{ minWidth: '100px' }}><b>(Current Collection + Overdue Collection)/ (Current Demand) %</b></TableCell>
                                                                </TableRow>

                                                            </TableHead>
                                                            <TableBody>
                                                                {
                                                                    values?.data?.slice(0, 36)?.map((item: any, index: any) => (
                                                                        <TableRow key={index + 1}>
                                                                            <TableCell>
                                                                                <p>{item?.month}</p>
                                                                            </TableCell>
                                                                            <TableCell>
                                                                                <AdvanceTextBoxField
                                                                                    name={`data.${index}.openingOvrd`}
                                                                                    label=""
                                                                                    onCustomChange={(currentVal: any) =>
                                                                                        calculation(setFieldValue, values, index, currentVal, 'openingOvrd')}
                                                                                    type={'number'}
                                                                                    allowNegative={false}
                                                                                />
                                                                            </TableCell>

                                                                            <TableCell>
                                                                                <AdvanceTextBoxField
                                                                                    name={`data.${index}.currMonDue`}
                                                                                    label=""
                                                                                    onCustomChange={(currentVal: any) =>
                                                                                        calculation(setFieldValue, values, index, currentVal, 'currMonDue')}
                                                                                    type={'number'}
                                                                                    allowNegative={false}
                                                                                />
                                                                            </TableCell>

                                                                            <TableCell>
                                                                                <AdvanceTextBoxField
                                                                                    name={`data.${index}.totDemand`}
                                                                                    label=""
                                                                                    type={'number'}
                                                                                    disabled={true}
                                                                                    allowNegative={false}
                                                                                />
                                                                            </TableCell>

                                                                            <TableCell>
                                                                                <AdvanceTextBoxField
                                                                                    name={`data.${index}.ovrdColl`}
                                                                                    label=""
                                                                                    onCustomChange={(currentVal: any) =>
                                                                                        calculation(setFieldValue, values, index, currentVal, 'ovrdColl')}
                                                                                    type={'number'}
                                                                                    allowNegative={false}
                                                                                />

                                                                            </TableCell>

                                                                            <TableCell>
                                                                                <AdvanceTextBoxField
                                                                                    name={`data.${index}.currMonColl`}
                                                                                    label=""
                                                                                    onCustomChange={(currentVal: any) =>
                                                                                        calculation(setFieldValue, values, index, currentVal, 'currMonColl')}
                                                                                    type={'number'}
                                                                                    allowNegative={false}
                                                                                />
                                                                            </TableCell>

                                                                            <TableCell>
                                                                                <AdvanceTextBoxField
                                                                                    name={`data.${index}.prepayAmt`}
                                                                                    label=""
                                                                                    type={'number'}
                                                                                    allowNegative={false}
                                                                                />
                                                                            </TableCell>
                                                                            <TableCell>
                                                                                <AdvanceTextBoxField
                                                                                    name={`data.${index}.totColl`}
                                                                                    label=""
                                                                                    type={'number'}
                                                                                    disabled={true}
                                                                                    allowNegative={false}
                                                                                />
                                                                            </TableCell>
                                                                            <TableCell>
                                                                                <AdvanceTextBoxField
                                                                                    name={`data.${index}.closingOvrd`}
                                                                                    label=""
                                                                                    type={'number'}
                                                                                    disabled={true}
                                                                                    allowNegative={false}
                                                                                />
                                                                            </TableCell>
                                                                            <TableCell>
                                                                                <AdvanceTextBoxField
                                                                                    name={`data.${index}.collEffCurrMon`}
                                                                                    label=""
                                                                                    type={'number'}
                                                                                    disabled={true}
                                                                                    allowNegative={false}
                                                                                />
                                                                            </TableCell>
                                                                            <TableCell>
                                                                                <AdvanceTextBoxField
                                                                                    name={`data.${index}.overallCollEff`}
                                                                                    label=""
                                                                                    type={'number'}
                                                                                    disabled={true}
                                                                                    allowNegative={false}
                                                                                />
                                                                            </TableCell>
                                                                            <TableCell>
                                                                                <AdvanceTextBoxField
                                                                                    name={`data.${index}.totCollCurrDemEff`}
                                                                                    label=""
                                                                                    type={'number'}
                                                                                    disabled={true}
                                                                                    allowNegative={false}
                                                                                />
                                                                            </TableCell>
                                                                        </TableRow>
                                                                    ))
                                                                }
                                                            </TableBody>
                                                        </Table>
                                                    )}
                                                </FieldArray>
                                            </fieldset>
                                            {values?.data?.[0]?.saveStatus !== "02" &&
                                                <Button className="sbmtBtn psn_btn mt-3 mb-3 ms-3" type='submit'
                                                    onClick={() => handleClickSetAction('01')}
                                                    variant="contained"> Save <CheckCircleOutlineIcon />
                                                </Button>
                                            }
                                            {values?.data?.[0]?.saveStatus !== "02" &&
                                                <Button className="sbmtBtn sbmtBtn_scn psn_btn mt-3 mb-3 ms-3" type='submit'
                                                    onClick={() => handleClickSetAction('02')}
                                                    variant="contained"> Submit <SaveAsIcon />
                                                </Button>
                                            }
                                        </Form>
                                    )
                                }}
                            </Formik>
                        </div>
                        <OnlineSnackbar open={openSnackbar} msg={snackMsg} severity={severity}
                            handleSnackClose={handleClose} />
                    </div>
                </div>
            }
        </>

    )
}
export default connect((state: any) => {
    return {
        applId: state.userStore.applId
    };
})(CollectionEfficiencyMonths);







import { useState, useEffect, useRef } from 'react';
import { Table, TableCell, TableHead, TableRow, TableBody, Button, CircularProgress, Grid } from '@mui/material'
import {
    useGetCollectionEfficiencyQuery,
    useSaveCollectionEffciencyMutation
} from "../../../features/application-form/collectionEff";
import CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';
import SaveAsIcon from '@mui/icons-material/SaveAs';

import { connect } from 'react-redux'
import { FieldArray, Form, Formik } from 'formik';
import AutoSave from '../../../components/framework/AutoSave';
import { AdvanceTextBoxField } from '../../../components/framework/AdvanceTextBoxField';
import { OnlineSnackbar } from "../../../components/shared/OnlineSnackbar";
import ConfirmationAlertDialog from '../../../models/application-form/ConfirmationAlertDialog';
import Notification from '../../../components/shared/Notification';
import { useAppSelector } from '../../../app/hooks';
import DrawerResponseComponent from '../../../components/DrawerComponent/DrawerResponseComponent';
import NotificationSectionWiseButton from '../../../components/DrawerComponent/NotificationSectionWiseButton';
import { useUpdateCommentByNIdMutation } from '../../../features/application-form/applicationForm';
import React from 'react';

const CollectionEfficiencyMonths = ({ excelData, openSectionsData }: any) => {
    const { applId } = useAppSelector((state) => state.userStore);
    const [addCollectionEfficiencyMonths] = useSaveCollectionEffciencyMutation();
    const { data: collectionEfficiencyMonths, isLoading, isError, refetch } = useGetCollectionEfficiencyQuery(applId, { skip: !applId, refetchOnMountOrArgChange: true });

    const [initialValues, setInitialValues] = useState<any>({ data: [] })
    const [openConfirmation, setOpenConfirmation] = useState(false);
    const [formData, setFormData] = useState<any>("");
    const [actionVal, setActionVal] = useState<any>("");
    const formikRef = useRef<any>(null);
    const [isUploading, setIsUploading] = useState<boolean>(false);


    const handleSubmitApis = async (values: any) => {
        try {
            let requestBody = values.data;
            if (!requestBody) {
                requestBody = values;
            }
            if (await addCollectionEfficiencyMonths(requestBody).unwrap()) {
                if (requestBody?.[0]?.saveStatus === '02' || requestBody?.[0]?.saveStatus === '01') {
                    setOpenSnackbar(true);
                    setSeverity("success");
                    if (requestBody?.[0]?.saveStatus === '02') {
                        setSnackMsg("Section submitted successfully");
                    } else if (requestBody?.[0]?.saveStatus === '01') {
                        setSnackMsg("Record saved successfully");
                    }
                }
                setActionVal(null);
                return true;
            }
            return false;
        } catch (error: any) {
            setOpenSnackbar(true);
            setSeverity("error");
            setSnackMsg("failed to save : " + error?.message);
            return false;
        }
    };

    const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);
    const [snackMsg, setSnackMsg] = useState<any>("");
    const [severity, setSeverity] = useState<string>("success");

    const handleClose = () => {
        setOpenSnackbar(false);
    };

    const handleCloseConfirmation = () => {
        setActionVal(null);
        setOpenConfirmation(false);
    };

    const handleSubmitConfirmation = (values: any) => {
        setOpenConfirmation(false);
        handleSubmitApis(values);
    };

    const handleSubmit = async (values: any) => {
        const finalValue = values?.data?.slice(0, 36)?.map((listData: any, index: number) => {
            return {
                ...listData, slNo: index + 1, saveStatus: actionVal
            }
        });
        if (actionVal === '02') {
            setFormData(finalValue);
            setOpenConfirmation(true);
        } else {
            handleSubmitApis(finalValue);
        }
        setActionVal(null);
    };

    const handleClickSetAction = (action: any) => {
        setActionVal(action);
    };

    const calculation = (setFieldValue: any, values: any, currentIndex: number,
        currentVal: number, currentRowId: string) => {
        if (currentRowId === 'openingOvrd' || currentRowId === 'currMonDue') {
            calculationTotalDemand(setFieldValue, values, currentIndex, currentVal, currentRowId);
        } else if (currentRowId === 'ovrdColl' || currentRowId === 'currMonColl') {
            calculationTotalCollection(setFieldValue, values, currentIndex, currentVal, currentRowId);
        }

        calculationClosingOverdue(setFieldValue, values, currentIndex, currentVal, currentRowId);
        calculationCollection(setFieldValue, values, currentIndex, currentVal, currentRowId);
    }

    const calculationTotalDemand = (setFieldValue: any, values: any, currentIndex: number,
        currentVal: number, currentRowId: string) => {
        const currentRow = values.data[currentIndex];
        const openingOvrd = currentRowId === 'openingOvrd' ? currentVal : currentRow.openingOvrd;
        const currMonDue = currentRowId === 'currMonDue' ? currentVal : currentRow.currMonDue;
        const total = (+openingOvrd + +currMonDue);
        const totalPrefix = 'data.' + currentIndex + '.totDemand';
        setFieldValue(`${totalPrefix}`, total.toFixed(2) || 0);

        const totalColl = currentRow.totColl;
        calculationOverAllCollection(setFieldValue, currentIndex, totalColl, total);
    }

    const calculationTotalCollection = (setFieldValue: any, values: any, currentIndex: number,
        currentVal: number, currentRowId: string) => {
        const currentRow = values.data[currentIndex];
        const ovrdColl = currentRowId === 'ovrdColl' ? currentVal : currentRow.ovrdColl;
        const currMonColl = currentRowId === 'currMonColl' ? currentVal : currentRow.currMonColl;
        const total = (+ovrdColl + +currMonColl);
        const totalPrefix = 'data.' + currentIndex + '.totColl';
        setFieldValue(`${totalPrefix}`, total.toFixed(2) || 0);

        const totDemand = currentRow.totDemand;
        calculationOverAllCollection(setFieldValue, currentIndex, total, totDemand);
    }

    const calculationClosingOverdue = (setFieldValue: any, values: any, currentIndex: number,
        currentVal: number, currentRowId: string) => {
        const currentRow = values.data[currentIndex];
        const openingOvrd = currentRowId === 'openingOvrd' ? currentVal : currentRow.openingOvrd;
        const currMonDue = currentRowId === 'currMonDue' ? currentVal : currentRow.currMonDue;
        const ovrdColl = currentRowId === 'ovrdColl' ? currentVal : currentRow.ovrdColl;
        const currMonColl = currentRowId === 'currMonColl' ? currentVal : currentRow.currMonColl;
        const b3MinusE3 = (+openingOvrd - +ovrdColl);
        const c3MinusF3 = (+currMonDue - +currMonColl);
        let total = (+b3MinusE3 + +c3MinusF3);

        const totalPrefix = 'data.' + currentIndex + '.closingOvrd';
        setFieldValue(`${totalPrefix}`, total.toFixed(2) || 0);

        const nextIndex = +currentIndex + +1;
        const nextOverduePrefix = 'data.' + nextIndex + '.openingOvrd';
        setFieldValue(`${nextOverduePrefix}`, total.toFixed(2) || 0);
    }

    const calculationCollection = (setFieldValue: any, values: any, currentIndex: number,
        currentVal: number, currentRowId: string) => {
        const currentRow = values.data[currentIndex];
        const currMonColl = currentRowId === 'currMonColl' ? currentVal : currentRow.currMonColl;
        const currMonDue = currentRowId === 'currMonDue' ? currentVal : currentRow.currMonDue;

        const total = (+currMonColl / +(Number(currMonDue) === 0 ? 1 : currMonDue));

        const totalPrefix = 'data.' + currentIndex + '.collEffCurrMon';
        const totalMul100 = +total * 100;
        setFieldValue(`${totalPrefix}`, totalMul100.toFixed(2) || 0);
    }

    const calculationOverAllCollection = (setFieldValue: any, currentIndex: number, totColl: number, totDemand: number) => {
        const total = (+totColl / +(Number(totDemand) === 0 ? 1 : totDemand));
        const totalPrefix = 'data.' + currentIndex + '.overallCollEff';
        const totalMul100 = +total * 100;
        setFieldValue(`${totalPrefix}`, totalMul100.toFixed(2) || 0);
    }

    const parseExcelValue = (value: any): any => {
        if (value === undefined || value === null || value === '' || value === '#DIV/0!') return 0;
        return parseFloat(value) ? parseFloat(value).toFixed(2) : 0;
    };


    useEffect(() => {
        if (collectionEfficiencyMonths) {
            const dataWithApplId = collectionEfficiencyMonths.map((item: any) => ({
                ...item,
                applId
            }))
            setInitialValues({ data: dataWithApplId })
        }
    }, [collectionEfficiencyMonths, applId])


    useEffect(() => {
        if (
            excelData &&
            excelData.length > 0 &&
            collectionEfficiencyMonths &&
            formikRef.current
        ) {
            try {
                console.log('excelData', excelData)
                const dataRows = excelData.slice(1);

                const dataWithApplId = collectionEfficiencyMonths.map((item: any) => ({
                    ...item,
                    applId,
                }));

                const processedData = dataWithApplId.map((item: any, index: number) => {
                    // setIsUploading(true);
                    const row = dataRows[index] || [];

                    return {
                        ...item,
                        openingOvrd: parseExcelValue(row[1]),
                        currMonDue: parseExcelValue(row[2]),
                        totDemand: parseExcelValue(row[3]),
                        ovrdColl: parseExcelValue(row[4]),
                        currMonColl: parseExcelValue(row[5]),
                        prepayAmt: parseExcelValue(row[6]),
                        totColl: parseExcelValue(row[7]),
                        closingOvrd: parseExcelValue(row[8]),
                        collEffCurrMon: parseExcelValue(row[9]),
                        overallCollEff: parseExcelValue(row[10]),
                    };
                });

                processedData.forEach((item: any, index: number) => {
                    const totDemand = +item.openingOvrd + +item.currMonDue;
                    item.totDemand = totDemand.toFixed(2);

                    const totColl = +item.ovrdColl + +item.currMonColl;
                    item.totColl = totColl.toFixed(2);

                    const closingOvrd =
                        +item.openingOvrd - +item.ovrdColl + (+item.currMonDue - +item.currMonColl);
                    item.closingOvrd = closingOvrd.toFixed(2);

                    if (index < processedData.length - 1) {
                        processedData[index + 1].openingOvrd = closingOvrd.toFixed(2);
                    }

                    const collEffCurrMon =
                        +item.currMonDue !== 0
                            ? ((+item.currMonColl / +item.currMonDue) * 100).toFixed(2)
                            : "0.00";
                    item.collEffCurrMon = collEffCurrMon;

                    const overallCollEff =
                        totDemand !== 0 ? ((totColl / totDemand) * 100).toFixed(2) : "0.00";
                    item.overallCollEff = overallCollEff;
                });

                console.log('processedData', processedData)
                formikRef.current.setValues({ data: processedData });
                setInitialValues({ data: processedData })
                setOpenSnackbar(true);
                setIsUploading(false);
                setSeverity("success");
                setSnackMsg("Collection Efficiency data updated successfully");
            } catch (error: any) {
                console.error("Error processing Excel data:", error);
                setOpenSnackbar(true);
                setIsUploading(false);
                setSeverity("error");
                setSnackMsg("Failed to process Excel data: " + error.message);
            }
        }
    }, [excelData, collectionEfficiencyMonths, applId]);

    const [updateCommentByNId] = useUpdateCommentByNIdMutation();
    const { opensections } = useAppSelector((state) => state.userStore);
    const [getOpenSectionsData, setOpenSections] = useState<any[]>([]);
    const [open, setOpen] = React.useState<any>(false);
    const [getNotiId, setNotiId] = React.useState<any>('');

    const toggleDrawer = (newOpen: boolean) => () => {
        setOpen(true);
    };
    const handleButtonClick = (notfId: any) => {
        setOpen(true);
        setNotiId(notfId);
    };
    useEffect(() => {
        if (opensections && opensections.length > 0) {
            setOpenSections(opensections);
        }
    }, [opensections]);

    if (isUploading) return <div className="CrclProg"><CircularProgress /></div>;

    return (
        <>
            <Grid item xs={12} className="opensections-sticky-css">
                <Grid
                    className="pb-0"
                    item
                    xs={12}
                    display="flex"
                    justifyContent="end">
                    {getOpenSectionsData && getOpenSectionsData.length > 0 && (() => {
                        const matchedItem = getOpenSectionsData.find(
                            (item: any) => item?.sectionId === "16" && item?.subSectionId === "01"
                        );
                        return matchedItem ? (
                            <div className="openSection-item">
                                <NotificationSectionWiseButton
                                    label="Respond"
                                    handleClick={() => handleButtonClick(matchedItem?.notfId)}
                                    className="btn-primary-css--"
                                    notfId={matchedItem?.notfId}
                                    getOpenSectionsData={getOpenSectionsData}

                                />
                            </div>
                        ) : null;
                    })()}
                    <DrawerResponseComponent
                        open={open}
                        toggleDrawer={toggleDrawer}
                        notfId={getNotiId}
                        detailsData={''}
                        postDataTrigger={updateCommentByNId}
                        setOpen={setOpen}
                    />
                </Grid>
            </Grid>
            {collectionEfficiencyMonths === undefined || null ?
                <Notification /> :
                <div className="wrap-appraisal-area">
                    <ConfirmationAlertDialog
                        id={applId as unknown as number}
                        type={4}
                        open={openConfirmation}
                        handleClose={handleCloseConfirmation}
                        handleDelete={handleSubmitConfirmation}
                        values={formData}
                    />
                    <div className="custome-form">
                        <div className="wrap-inner-table" style={{ overflow: 'auto' }}>
                            <Formik
                                initialValues={initialValues}
                                onSubmit={handleSubmit}
                                enableReinitialize
                                innerRef={formikRef}
                            >
                                {({ values, setFieldValue }) => {
                                    return (
                                        <Form>
                                            <fieldset disabled={values?.data?.[0]?.saveStatus === "02"}>
                                                {values?.data?.[0]?.saveStatus !== "02" &&
                                                    <AutoSave handleSubmit={handleSubmit} values={values} debounceMs={10000} autoStyle={true} />
                                                }
                                                <FieldArray name="data">
                                                    {() => (
                                                        <Table sx={{ minWidth: 650 }} aria-label="simple table">
                                                            <TableHead>
                                                                <TableRow>
                                                                    <TableCell style={{ minWidth: '80px' }}><b>Month</b></TableCell>
                                                                    <TableCell style={{ minWidth: '100px' }}><b>Opening Overdue</b></TableCell>
                                                                    <TableCell style={{ minWidth: '100px' }}><b>Current Month Due</b></TableCell>
                                                                    <TableCell style={{ minWidth: '100px' }}><b>Total Demand</b></TableCell>
                                                                    <TableCell style={{ minWidth: '100px' }}><b>Overdue Collection</b></TableCell>
                                                                    <TableCell style={{ minWidth: '100px' }}><b>Current Month Collection</b></TableCell>
                                                                    <TableCell style={{ minWidth: '100px' }}><b>Prepayments</b></TableCell>
                                                                    <TableCell style={{ minWidth: '100px' }}><b>Total Collection</b></TableCell>
                                                                    <TableCell style={{ minWidth: '100px' }}><b>Closing Overdue</b></TableCell>
                                                                    <TableCell style={{ minWidth: '100px' }}><b>Collection Efficiency(Current Month)</b></TableCell>
                                                                    <TableCell style={{ minWidth: '100px' }}><b>Overall Collection Efficiency</b></TableCell>
                                                                </TableRow>

                                                            </TableHead>
                                                            <TableBody>
                                                                {
                                                                    values?.data?.slice(0, 36)?.map((item: any, index: any) => (
                                                                        <TableRow key={index + 1}>
                                                                            <TableCell>
                                                                                <p>{item?.month}</p>
                                                                            </TableCell>
                                                                            <TableCell>
                                                                                <AdvanceTextBoxField
                                                                                    name={`data.${index}.openingOvrd`}
                                                                                    label=""
                                                                                    onCustomChange={(currentVal: any) =>
                                                                                        calculation(setFieldValue, values, index, currentVal, 'openingOvrd')}
                                                                                    type={'number'}
                                                                                    allowNegative={false}
                                                                                />
                                                                            </TableCell>

                                                                            <TableCell>
                                                                                <AdvanceTextBoxField
                                                                                    name={`data.${index}.currMonDue`}
                                                                                    label=""
                                                                                    onCustomChange={(currentVal: any) =>
                                                                                        calculation(setFieldValue, values, index, currentVal, 'currMonDue')}
                                                                                    type={'number'}
                                                                                    allowNegative={false}
                                                                                />
                                                                            </TableCell>

                                                                            <TableCell>
                                                                                <AdvanceTextBoxField
                                                                                    name={`data.${index}.totDemand`}
                                                                                    label=""
                                                                                    type={'number'}
                                                                                    disabled={true}
                                                                                    allowNegative={false}
                                                                                />
                                                                            </TableCell>

                                                                            <TableCell>
                                                                                <AdvanceTextBoxField
                                                                                    name={`data.${index}.ovrdColl`}
                                                                                    label=""
                                                                                    onCustomChange={(currentVal: any) =>
                                                                                        calculation(setFieldValue, values, index, currentVal, 'ovrdColl')}
                                                                                    type={'number'}
                                                                                    allowNegative={false}
                                                                                />

                                                                            </TableCell>

                                                                            <TableCell>
                                                                                <AdvanceTextBoxField
                                                                                    name={`data.${index}.currMonColl`}
                                                                                    label=""
                                                                                    onCustomChange={(currentVal: any) =>
                                                                                        calculation(setFieldValue, values, index, currentVal, 'currMonColl')}
                                                                                    type={'number'}
                                                                                    allowNegative={false}
                                                                                />
                                                                            </TableCell>

                                                                            <TableCell>
                                                                                <AdvanceTextBoxField
                                                                                    name={`data.${index}.prepayAmt`}
                                                                                    label=""
                                                                                    type={'number'}
                                                                                    allowNegative={false}
                                                                                />
                                                                            </TableCell>
                                                                            <TableCell>
                                                                                <AdvanceTextBoxField
                                                                                    name={`data.${index}.totColl`}
                                                                                    label=""
                                                                                    type={'number'}
                                                                                    disabled={true}
                                                                                    allowNegative={false}
                                                                                />
                                                                            </TableCell>
                                                                            <TableCell>
                                                                                <AdvanceTextBoxField
                                                                                    name={`data.${index}.closingOvrd`}
                                                                                    label=""
                                                                                    type={'number'}
                                                                                    disabled={true}
                                                                                    allowNegative={false}
                                                                                />
                                                                            </TableCell>
                                                                            <TableCell>
                                                                                <AdvanceTextBoxField
                                                                                    name={`data.${index}.collEffCurrMon`}
                                                                                    label=""
                                                                                    type={'number'}
                                                                                    disabled={true}
                                                                                    allowNegative={false}
                                                                                />
                                                                            </TableCell>
                                                                            <TableCell>
                                                                                <AdvanceTextBoxField
                                                                                    name={`data.${index}.overallCollEff`}
                                                                                    label=""
                                                                                    type={'number'}
                                                                                    disabled={true}
                                                                                    allowNegative={false}
                                                                                />
                                                                            </TableCell>
                                                                        </TableRow>
                                                                    ))
                                                                }
                                                            </TableBody>
                                                        </Table>
                                                    )}
                                                </FieldArray>
                                            </fieldset>
                                            {values?.data?.[0]?.saveStatus !== "02" &&
                                                <Button className="sbmtBtn psn_btn mt-3 mb-3 ms-3" type='submit'
                                                    onClick={() => handleClickSetAction('01')}
                                                    variant="contained"> Save <CheckCircleOutlineIcon />
                                                </Button>
                                            }
                                            {values?.data?.[0]?.saveStatus !== "02" &&
                                                <Button className="sbmtBtn sbmtBtn_scn psn_btn mt-3 mb-3 ms-3" type='submit'
                                                    onClick={() => handleClickSetAction('02')}
                                                    variant="contained"> Submit <SaveAsIcon />
                                                </Button>
                                            }
                                        </Form>
                                    )
                                }}
                            </Formik>
                        </div>
                        <OnlineSnackbar open={openSnackbar} msg={snackMsg} severity={severity}
                            handleSnackClose={handleClose} />
                    </div>
                </div>
            }
        </>

    )
}
export default connect((state: any) => {
    return {
        applId: state.userStore.applId
    };
})(CollectionEfficiencyMonths);

import React from 'react';
import Grid from "@mui/material/Grid";
import { KeyValuePair } from "./KeyValuePair";
import { getIn, useFormikContext } from "formik";
import Typography from "@mui/material/Typography";
import { removeRestrictedCharacters } from '../../utlis/input';
import { InputAdornment, Tooltip, IconButton } from '@mui/material';
import HelpOutlineIcon from '@mui/icons-material/HelpOutline';
import RedditTextField from './RedditTextField';


interface AdvanceTextBoxFieldProps {
  id?: number;
  label?: string;
  name: string;
  disabled?: boolean;
  type?: string;
  value?: string;
  readonly?: boolean;
  restrictedCharacters?: string;
  placeholder?: string;
  tooltip?: string;
  required?: boolean;
  maxLength?: number;
  minLength?: number;
  startAdornment?: React.ReactNode;
  endAdornment?: React.ReactNode;
  multiline?: boolean;
  rows?: number;
  maxRows?: number;
  validation?: {
    pattern?: RegExp;
    customValidation?: (value: string) => string | undefined;
  };
  transformValue?: (value: string) => string;
  onCustomChange?: any;
  fullWidth?: boolean;
  className?: string;
  style?: React.CSSProperties;
  InputProps?: any;
  allowNegative?: boolean;
  allowDecimal?: boolean;
  decimalPlaces?: number;
}

export const AdvanceTextBoxField: React.FC<AdvanceTextBoxFieldProps> = ({
  label = "",
  name,
  disabled = false,
  type = 'text',
  readonly = false,
  restrictedCharacters = "<>{}",
  placeholder,
  tooltip,
  required = false,
  maxLength,
  minLength,
  startAdornment,
  endAdornment,
  multiline = false,
  rows,
  maxRows,
  validation,
  transformValue,
  onCustomChange,
  fullWidth = true,
  className,
  style,
  allowNegative = false,
  allowDecimal = true,
  decimalPlaces = 2,
  ...props
}) => {
  const { handleChange, handleBlur, values, touched, errors, setFieldValue } =
    useFormikContext<KeyValuePair>() || {};

  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    let { value } = event.target;

    if (restrictedCharacters) {
      value = removeRestrictedCharacters(value, restrictedCharacters);
    }

    if (transformValue) {
      value = transformValue(value);
    }

    if (type === 'number') {
      let regex = allowNegative ? /^-?\d*\.?\d{0,2}$/ : /^\d*\.?\d{0,2}$/;
      if (!allowDecimal) {
        regex = /^\d*$/;
      }
      if (allowNegative && !allowDecimal) {
        regex = /^-?\d*$/;
      }
      if (!regex.test(value) && value !== '') {
        return;
      }
      if (value !== '' && value !== '-' && allowDecimal && value.includes('.')) {
        const parts = value.split('.');
        if (parts[1] && parts[1].length > decimalPlaces) {
          const rounded = Number(parseFloat(value).toFixed(decimalPlaces));
          value = rounded.toString();
        }
      }
    }

    if (validation?.pattern && !validation.pattern.test(value)) {
      return;
    }
    setFieldValue(name, value);
    if (onCustomChange) {
      onCustomChange(value);
    }
  };
  const labelStyles = {
    '& .MuiInputLabel-shrink': {
      background: '#fff',
      padding: '0 8px',
    },
  };

  const getErrorMessage = () => {
    if (getIn(touched, name) && getIn(errors, name)) {
      return JSON.stringify(getIn(errors, name)).replaceAll('"', "");
    }
    return "";
  };

  return (
    <Grid item xs={12} style={style}>
      <Grid item xs={12}>
        <RedditTextField
          label={label}
          className={`${name} ${className || ''}`}
          onChange={handleInputChange}
          onBlur={handleBlur}
          value={getIn(values, name)}
          name={name}
          size="small"
          disabled={disabled}
          type={type}
          placeholder={placeholder}
          required={required}
          sx={labelStyles}
          inputProps={{
            readOnly: readonly,
            maxLength: maxLength,
            minLength: minLength,
            inputMode: type === 'number' ? 'decimal' : 'text',
            pattern: type === 'number' ? undefined : undefined
          }}
          multiline={multiline}
          rows={rows}
          maxRows={maxRows}
          fullWidth={fullWidth}
          InputProps={{
            startAdornment: startAdornment && (
              <InputAdornment position="start">{startAdornment}</InputAdornment>
            ),
            endAdornment: (
              <InputAdornment position="end">
                {tooltip && (
                  <Tooltip title={tooltip}>
                    <IconButton size="small">
                      <HelpOutlineIcon />
                    </IconButton>
                  </Tooltip>
                )}
                {endAdornment}
              </InputAdornment>
            ),
          }}
          {...props}
        />
      </Grid>
      <Grid item xs={12}>
        <Typography
          color="error"
          variant="subtitle2"
          gutterBottom
          component="span"
          className="mybooking_error"
        >
          {getErrorMessage()}
        </Typography>
      </Grid>
    </Grid>
  );
};




in api also three new field are added 


Current Collection Efficiency (Current Collection/ Current Demand) % 
Overall Collection Efficiency (Total Collection/ Total Demand) %
(Current Collection + Overdue Collection)/ (Current Demand) %

do proper calucation based on name written and all three field are disabled give me complete and proper code 

